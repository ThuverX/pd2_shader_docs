"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[5968],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>s});var n=r(7294);function m(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){m(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,m=function(e,t){if(null==e)return{};var r,n,m={},p=Object.keys(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||(m[r]=e[r]);return m}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(m[r]=e[r])}return m}var x=n.createContext({}),d=function(e){var t=n.useContext(x),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=d(e.components);return n.createElement(x.Provider,{value:t},e.children)},l="mdxType",_={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,m=e.mdxType,p=e.originalType,x=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),l=d(r),y=m,s=l["".concat(x,".").concat(y)]||l[y]||_[y]||p;return r?n.createElement(s,a(a({ref:t},c),{},{components:r})):n.createElement(s,a({ref:t},c))}));function s(e,t){var r=arguments,m=t&&t.mdxType;if("string"==typeof e||m){var p=r.length,a=new Array(p);a[0]=y;var o={};for(var x in t)hasOwnProperty.call(t,x)&&(o[x]=t[x]);o.originalType=e,o[l]="string"==typeof e?e:m,a[1]=o;for(var d=2;d<p;d++)a[d]=r[d];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},9718:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>x,contentTitle:()=>a,default:()=>_,frontMatter:()=>p,metadata:()=>o,toc:()=>d});var n=r(7462),m=(r(7294),r(3905));const p={id:0xb54ed56aec064800,title:"Global Shadow Mask Default Dx9 Fetch4"},a="Global Shadow Mask Default Dx9 Fetch4",o={unversionedId:"Generated/Shaders/Deferred Lighting/13064614224251472000",id:"Generated/Shaders/Deferred Lighting/13064614224251472000",title:"Global Shadow Mask Default Dx9 Fetch4",description:"(globalshadowmaskDX9_FETCH4, 0xb54ed56aec064925)",source:"@site/docs/Generated/Shaders/Deferred Lighting/0xb54ed56aec064925.mdx",sourceDirName:"Generated/Shaders/Deferred Lighting",slug:"/Generated/Shaders/Deferred Lighting/13064614224251472000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Deferred Lighting/13064614224251472000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Deferred Lighting/0xb54ed56aec064925.mdx",tags:[],version:"current",frontMatter:{id:"13064614224251472000",title:"Global Shadow Mask Default Dx9 Fetch4"},sidebar:"docsSidebar",previous:{title:"Spot Default Hq Invsq Projection Specular",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Deferred Lighting/12483658765258734000"},next:{title:"Omni Default Hq Projection",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Deferred Lighting/13085849601202158000"}},x={},d=[{value:"Technique <code>ambient</code>",id:"technique-ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Sampler 1",id:"sampler-1",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],c={toc:d},l="wrapper";function _(e){let{components:t,...r}=e;return(0,m.kt)(l,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,m.kt)("h1",{id:"global-shadow-mask-default-dx9-fetch4"},"Global Shadow Mask Default Dx9 Fetch4"),(0,m.kt)("p",null,"(",(0,m.kt)("inlineCode",{parentName:"p"},"global_shadow_mask:default:DX9_FETCH4"),", ",(0,m.kt)("inlineCode",{parentName:"p"},"0xb54ed56aec064925"),")"),(0,m.kt)("p",null,"This template is referenced 1 time by ",(0,m.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/deferred_lighting.render_template_database#global-shadow-mask"},"global_shadow_mask"),"."),(0,m.kt)("h3",{id:"technique-ambient"},"Technique ",(0,m.kt)("inlineCode",{parentName:"h3"},"ambient")),(0,m.kt)("h3",{id:"render-states"},"Render States"),(0,m.kt)("p",null,"More info can be found on the ",(0,m.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 7,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 1,\n    D3DRS_COLORWRITEENABLE = 8,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,m.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,m.kt)("p",null,"More info can be found on the ",(0,m.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,m.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 1,\n    D3DSAMP_MINFILTER = 1,\n    D3DSAMP_MIPFILTER = 1,\n};\n")),(0,m.kt)("h4",{id:"sampler-1"},"Sampler 1"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 877937991,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 2,\n    D3DSAMP_MINFILTER = 2,\n    D3DSAMP_MIPFILTER = 2,\n};\n")),(0,m.kt)("h3",{id:"shaders"},"Shaders"),(0,m.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 camera_inv_view_matrix : register(vs_3_0, c4);\nfloat3 camera_unprojection : register(vs_3_0, c7);\nfloat ref_depth_clip_space : register(vs_3_0, c8);\ncolumn_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float2 texcoord : TEXCOORD;\n    float3 texcoord1 : TEXCOORD1;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float2 temp0;\n    float3 temp1;\n    // def c9, 1, 0, 0, 0\n    // dcl_position v0\n    // dcl_texcoord v1\n    // dcl_position o0\n    // dcl_texcoord o1.xy\n    // dcl_texcoord1 o2.xyz\n    // dp4 o0.w, v0, c3\n    o.position.w = dot(i.position, (view_proj_matrix._m03_m13_m23_m33));\n    // dp4 r0.x, v0, c0\n    temp0.x = dot(i.position, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 r0.y, v0, c1\n    temp0.y = dot(i.position, (view_proj_matrix._m01_m11_m21_m31));\n    // mul r1.xy, r0, c7\n    temp1.xy = temp0.xy * camera_unprojection.xy;\n    // mov o0.xy, r0\n    o.position.xy = temp0.xy;\n    // mov r1.z, c9.x\n    temp1.z = float1(1);\n    // dp3 o2.x, r1, c4\n    o.texcoord1.x = dot(temp1.xyz, (camera_inv_view_matrix._m00_m10_m20_m30).xyz);\n    // dp3 o2.y, r1, c5\n    o.texcoord1.y = dot(temp1.xyz, (camera_inv_view_matrix._m01_m11_m21_m31).xyz);\n    // dp3 o2.z, r1, c6\n    o.texcoord1.z = dot(temp1.xyz, (camera_inv_view_matrix._m02_m12_m22_m32).xyz);\n    // mov o0.z, c8.x\n    o.position.z = ref_depth_clip_space.x;\n    // mov o1.xy, v1\n    o.texcoord = i.texcoord;\n    // \n\n    return o;\n}\n")),(0,m.kt)("p",null,"Decompiled by DXDecompiler."),(0,m.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 camera_world_matrix : register(ps_3_0, c11);\nsampler2D depth : register(ps_3_0, s0);\nsampler2D displacement_texture : register(ps_3_0, s1);\nfloat3 displacement_texture_size : register(ps_3_0, c16);\ncolumn_major float4x4 global_shadow_projection[3] : register(ps_3_0, c0);\nfloat3 ref_shadow_slice_depths : register(ps_3_0, c14);\nfloat3 ref_shadow_slice_overlap : register(ps_3_0, c15);\nstruct PixelMain_Input\n{\n    float2 texcoord : TEXCOORD;\n    float3 texcoord1 : TEXCOORD1;\n};\n\nfloat4 PixelMain(PixelMain_Input i) : COLOR\n{\n    float4 out_color;\n    float4 temp0, temp1, temp2, temp4, temp5, temp6, temp7, temp8, temp9, temp10;\n    float3 temp3;\n    // def c17, 0, 1, 2, -1\n    // def c18, 0.11111111, 0, 0, 0\n    // dcl_texcoord v0.xy\n    // dcl_texcoord1 v1.xyz\n    // dcl_2d s0\n    // dcl_2d s1\n    // mov r0.z, c17.y\n    temp0.z = float1(1);\n    // texld r1, v0, s0\n    temp1 = tex2D(depth, i.texcoord.xy);\n    // add r1.yz, -r1.x, c14.xyxw\n    temp1.yz = -temp1.xx + ref_shadow_slice_depths.yx;\n    // cmp r1.z, r1.z, c17.x, c17.y\n    temp1.z = (temp1.z >= 0) ? float1(0) : float1(1);\n    // cmp r1.y, r1.y, r1.z, c17.z\n    temp1.y = (temp1.y >= 0) ? temp1.z : float1(2);\n    // add r2.xyz, r1.y, -c17\n    temp2.xyz = temp1.yyy + float3(-0, -1, -2);\n    // mov r3.x, c17.x\n    temp3.x = float1(0);\n    // cmp r4, -r2_abs.x, c0, r3.x\n    temp4 = (-abs(temp2).x >= 0) ? (global_shadow_projection[0]._m00_m10_m20_m30) : temp3.x;\n    // cmp r4, -r2_abs.y, c4, r4\n    temp4 = (-abs(temp2).y >= 0) ? (global_shadow_projection[1]._m00_m10_m20_m30) : temp4;\n    // cmp r4, -r2_abs.z, c8, r4\n    temp4 = (-abs(temp2).z >= 0) ? (global_shadow_projection[2]._m00_m10_m20_m30) : temp4;\n    // mov r5.w, c17.y\n    temp5.w = float1(1);\n    // mad r5.x, v1.x, r1.x, c11.w\n    temp5.x = i.texcoord1.x * temp1.x + (camera_world_matrix._m00_m10_m20_m30).w;\n    // mad r5.y, v1.y, r1.x, c12.w\n    temp5.y = i.texcoord1.y * temp1.x + (camera_world_matrix._m01_m11_m21_m31).w;\n    // mad r5.z, v1.z, r1.x, c13.w\n    temp5.z = i.texcoord1.z * temp1.x + (camera_world_matrix._m02_m12_m22_m32).w;\n    // dp4 r4.x, r5, r4\n    temp4.x = dot(temp5, temp4);\n    // cmp r6, -r2_abs.x, c1, r3.x\n    temp6 = (-abs(temp2).x >= 0) ? (global_shadow_projection[0]._m01_m11_m21_m31) : temp3.x;\n    // cmp r6, -r2_abs.y, c5, r6\n    temp6 = (-abs(temp2).y >= 0) ? (global_shadow_projection[1]._m01_m11_m21_m31) : temp6;\n    // cmp r6, -r2_abs.z, c9, r6\n    temp6 = (-abs(temp2).z >= 0) ? (global_shadow_projection[2]._m01_m11_m21_m31) : temp6;\n    // dp4 r4.y, r5, r6\n    temp4.y = dot(temp5, temp6);\n    // rcp r6.x, c16.x\n    temp6.x = 1.0f / displacement_texture_size.x;\n    // rcp r6.y, c16.y\n    temp6.y = 1.0f / displacement_texture_size.y;\n    // add r1.zw, r4.xyxy, -r6.xyxy\n    temp1.zw = temp4.xy + -temp6.xy;\n    // texld r7, r1.zwzw, s1\n    temp7 = tex2D(displacement_texture, temp1.zw);\n    // cmp r8, -r2_abs.x, c2, r3.x\n    temp8 = (-abs(temp2).x >= 0) ? (global_shadow_projection[0]._m02_m12_m22_m32) : temp3.x;\n    // cmp r8, -r2_abs.y, c6, r8\n    temp8 = (-abs(temp2).y >= 0) ? (global_shadow_projection[1]._m02_m12_m22_m32) : temp8;\n    // cmp r2, -r2_abs.z, c10, r8\n    temp2 = (-abs(temp2).z >= 0) ? (global_shadow_projection[2]._m02_m12_m22_m32) : temp8;\n    // dp4 r1.z, r5, r2\n    temp1.z = dot(temp5, temp2);\n    // add r2, -r7, r1.z\n    temp2 = -temp7 + temp1.z;\n    // cmp r2, r2, c17.x, c17.y\n    temp2 = (temp2 >= 0) ? float4(0, 0, 0, 0) : float4(1, 1, 1, 1);\n    // mul r3.yz, r4.xxyw, c16.xxyw\n    temp3.yz = temp4.xy * displacement_texture_size.xy;\n    // frc r7.xy, r3.yzzw\n    temp7.xy = frac(temp3.yz);\n    // add r8.xy, -r7, c17.y\n    temp8.xy = -temp7.xy + float2(1, 1);\n    // mov r8.z, c17.y\n    temp8.z = float1(1);\n    // mul r0.xyw, r8.yxzy, r8.zzzx\n    temp0.xyw = temp8.yxy * temp8.zzx;\n    // dp4 r0.x, r2, r0\n    temp0.x = dot(temp2, temp0);\n    // mov r2.y, c17.y\n    temp2.y = float1(1);\n    // mad r9, r6.xyxy, c17.ywwy, r4.xyxy\n    temp9 = temp6.xyxy * float4(1, -1, -1, 1) + temp4.xyxy;\n    // add r0.yz, r4.xxyw, r6.xxyw\n    temp0.yz = temp4.xy + temp6.xy;\n    // texld r4, r0.yzzw, s1\n    temp4 = tex2D(displacement_texture, temp0.yz);\n    // add r4, r1.z, -r4\n    temp4 = temp1.z + -temp4;\n    // cmp r4, r4, c17.x, c17.y\n    temp4 = (temp4 >= 0) ? float4(0, 0, 0, 0) : float4(1, 1, 1, 1);\n    // texld r10, r9, s1\n    temp10 = tex2D(displacement_texture, temp9.xy);\n    // texld r9, r9.zwzw, s1\n    temp9 = tex2D(displacement_texture, temp9.zw);\n    // add r9, r1.z, -r9\n    temp9 = temp1.z + -temp9;\n    // add r10, r1.z, -r10\n    temp10 = temp1.z + -temp10;\n    // cmp r10, r10, c17.x, c17.y\n    temp10 = (temp10 >= 0) ? float4(0, 0, 0, 0) : float4(1, 1, 1, 1);\n    // cmp r9, r9, c17.x, c17.y\n    temp9 = (temp9 >= 0) ? float4(0, 0, 0, 0) : float4(1, 1, 1, 1);\n    // mov r7.zw, c17.y\n    temp7.zw = float2(1, 1);\n    // mul r2.xzw, r7.xyxz, r8.yyzy\n    temp2.xzw = temp7.xxz * temp8.yzy;\n    // mul r8.yzw, r7.xyyz, r8.xxzx\n    temp8.yzw = temp7.yyz * temp8.xzx;\n    // mul r7.xyz, r7.zzyw, r7.xyxw\n    temp7.xyz = temp7.zzy * temp7.xyx;\n    // dp4 r0.y, r10, r2\n    temp0.y = dot(temp10, temp2);\n    // add r0.x, r0.y, r0.x\n    temp0.x = temp0.y + temp0.x;\n    // mov r8.x, c17.y\n    temp8.x = float1(1);\n    // dp4 r0.y, r9, r8\n    temp0.y = dot(temp9, temp8);\n    // add r0.x, r0.y, r0.x\n    temp0.x = temp0.y + temp0.x;\n    // dp4 r0.y, r4, r7\n    temp0.y = dot(temp4, temp7);\n    // add r0.x, r0.y, r0.x\n    temp0.x = temp0.y + temp0.x;\n    // mov r2.xyz, c14\n    temp2.xyz = ref_shadow_slice_depths.xyz;\n    // add r0.yzw, r2.xyxz, -c15.xyxz\n    temp0.yzw = temp2.yxz + -ref_shadow_slice_overlap.yxz;\n    // add r2.xyz, -r1.x, r0.yzww\n    temp2.xyz = -temp1.xxx + temp0.yzw;\n    // add r0.y, -r0.w, r1.x\n    temp0.y = -temp0.w + temp1.x;\n    // cmp r0.z, r2.y, c17.x, c17.y\n    temp0.z = (temp2.y >= 0) ? float1(0) : float1(1);\n    // cmp r0.z, r2.x, r0.z, c17.z\n    temp0.z = (temp2.x >= 0) ? temp0.z : float1(2);\n    // add r2.xyw, r0.z, -c17.xyzz\n    temp2.xyw = temp0.zzz + float3(-0, -1, -2);\n    // cmp r4, -r2_abs.x, c0, r3.x\n    temp4 = (-abs(temp2).x >= 0) ? (global_shadow_projection[0]._m00_m10_m20_m30) : temp3.x;\n    // cmp r4, -r2_abs.y, c4, r4\n    temp4 = (-abs(temp2).y >= 0) ? (global_shadow_projection[1]._m00_m10_m20_m30) : temp4;\n    // cmp r4, -r2_abs.w, c8, r4\n    temp4 = (-abs(temp2).w >= 0) ? (global_shadow_projection[2]._m00_m10_m20_m30) : temp4;\n    // dp4 r4.x, r5, r4\n    temp4.x = dot(temp5, temp4);\n    // cmp r7, -r2_abs.x, c1, r3.x\n    temp7 = (-abs(temp2).x >= 0) ? (global_shadow_projection[0]._m01_m11_m21_m31) : temp3.x;\n    // cmp r7, -r2_abs.y, c5, r7\n    temp7 = (-abs(temp2).y >= 0) ? (global_shadow_projection[1]._m01_m11_m21_m31) : temp7;\n    // cmp r7, -r2_abs.w, c9, r7\n    temp7 = (-abs(temp2).w >= 0) ? (global_shadow_projection[2]._m01_m11_m21_m31) : temp7;\n    // dp4 r4.y, r5, r7\n    temp4.y = dot(temp5, temp7);\n    // add r1.zw, -r6.xyxy, r4.xyxy\n    temp1.zw = -temp6.xy + temp4.xy;\n    // texld r7, r1.zwzw, s1\n    temp7 = tex2D(displacement_texture, temp1.zw);\n    // cmp r8, -r2_abs.x, c2, r3.x\n    temp8 = (-abs(temp2).x >= 0) ? (global_shadow_projection[0]._m02_m12_m22_m32) : temp3.x;\n    // cmp r8, -r2_abs.y, c6, r8\n    temp8 = (-abs(temp2).y >= 0) ? (global_shadow_projection[1]._m02_m12_m22_m32) : temp8;\n    // cmp r8, -r2_abs.w, c10, r8\n    temp8 = (-abs(temp2).w >= 0) ? (global_shadow_projection[2]._m02_m12_m22_m32) : temp8;\n    // dp4 r0.w, r5, r8\n    temp0.w = dot(temp5, temp8);\n    // add r5, -r7, r0.w\n    temp5 = -temp7 + temp0.w;\n    // cmp r5, r5, c17.x, c17.y\n    temp5 = (temp5 >= 0) ? float4(0, 0, 0, 0) : float4(1, 1, 1, 1);\n    // mov r7.z, c17.y\n    temp7.z = float1(1);\n    // mul r1.zw, r4.xyxy, c16.xyxy\n    temp1.zw = temp4.xy * displacement_texture_size.xy;\n    // frc r8.xy, r1.zwzw\n    temp8.xy = frac(temp1.zw);\n    // add r9.xy, -r8, c17.y\n    temp9.xy = -temp8.xy + float2(1, 1);\n    // mov r9.z, c17.y\n    temp9.z = float1(1);\n    // mul r7.xyw, r9.yxzy, r9.zzzx\n    temp7.xyw = temp9.yxy * temp9.zzx;\n    // dp4 r1.z, r5, r7\n    temp1.z = dot(temp5, temp7);\n    // mad r5, r6.xyxy, c17.ywwy, r4.xyxy\n    temp5 = temp6.xyxy * float4(1, -1, -1, 1) + temp4.xyxy;\n    // add r2.xy, r6, r4\n    temp2.xy = temp6.xy + temp4.xy;\n    // texld r4, r2, s1\n    temp4 = tex2D(displacement_texture, temp2.xy);\n    // add r4, r0.w, -r4\n    temp4 = temp0.w + -temp4;\n    // cmp r4, r4, c17.x, c17.y\n    temp4 = (temp4 >= 0) ? float4(0, 0, 0, 0) : float4(1, 1, 1, 1);\n    // texld r6, r5, s1\n    temp6 = tex2D(displacement_texture, temp5.xy);\n    // texld r5, r5.zwzw, s1\n    temp5 = tex2D(displacement_texture, temp5.zw);\n    // add r5, r0.w, -r5\n    temp5 = temp0.w + -temp5;\n    // add r6, r0.w, -r6\n    temp6 = temp0.w + -temp6;\n    // cmp r6, r6, c17.x, c17.y\n    temp6 = (temp6 >= 0) ? float4(0, 0, 0, 0) : float4(1, 1, 1, 1);\n    // cmp r5, r5, c17.x, c17.y\n    temp5 = (temp5 >= 0) ? float4(0, 0, 0, 0) : float4(1, 1, 1, 1);\n    // mov r8.zw, c17.y\n    temp8.zw = float2(1, 1);\n    // mul r7.xzw, r8.xyxz, r9.yyzy\n    temp7.xzw = temp8.xxz * temp9.yzy;\n    // mul r9.yzw, r8.xyyz, r9.xxzx\n    temp9.yzw = temp8.yyz * temp9.xzx;\n    // mul r8.xyz, r8.zzyw, r8.xyxw\n    temp8.xyz = temp8.zzy * temp8.xyx;\n    // mov r7.y, c17.y\n    temp7.y = float1(1);\n    // dp4 r0.w, r6, r7\n    temp0.w = dot(temp6, temp7);\n    // add r0.w, r0.w, r1.z\n    temp0.w = temp0.w + temp1.z;\n    // mov r9.x, c17.y\n    temp9.x = float1(1);\n    // dp4 r1.z, r5, r9\n    temp1.z = dot(temp5, temp9);\n    // add r0.w, r0.w, r1.z\n    temp0.w = temp0.w + temp1.z;\n    // dp4 r1.z, r4, r8\n    temp1.z = dot(temp4, temp8);\n    // add r0.w, r0.w, r1.z\n    temp0.w = temp0.w + temp1.z;\n    // mul r0.w, r0.w, c18.x\n    temp0.w = temp0.w * float1(0.11111111);\n    // mad r1.z, r0.x, c18.x, -r0.w\n    temp1.z = temp0.x * float1(0.11111111) + -temp0.w;\n    // mul r0.x, r0.x, c18.x\n    temp0.x = temp0.x * float1(0.11111111);\n    // add r2.xy, r0.z, -c17.yzzw\n    temp2.xy = temp0.zz + float2(-1, -2);\n    // add r0.z, -r0.z, r1.y\n    temp0.z = -temp0.z + temp1.y;\n    // cmp r1.yw, -r2_abs.xxzy, c17.y, c17.x\n    temp1.yw = (-abs(temp2).xy >= 0) ? float2(1, 1) : float2(0, 0);\n    // dp2add r1.x, c14, r1.ywzw, -r1.x\n    temp1.x = dot(ref_shadow_slice_depths.xy, temp1.yw) + -temp1.x;\n    // dp2add r1.y, c15, r1.ywzw, r3.x\n    temp1.y = dot(ref_shadow_slice_overlap.xy, temp1.yw) + temp3.x;\n    // rcp r1.y, r1.y\n    temp1.y = 1.0f / temp1.y;\n    // mul r1.x, r1.y, r1.x\n    temp1.x = temp1.y * temp1.x;\n    // mad r0.w, r1.x, r1.z, r0.w\n    temp0.w = temp1.x * temp1.z + temp0.w;\n    // cmp r0.x, -r0_abs.z, r0.x, r0.w\n    temp0.x = (-abs(temp0).z >= 0) ? temp0.x : temp0.w;\n    // rcp r0.z, c15.z\n    temp0.z = 1.0f / ref_shadow_slice_overlap.z;\n    // mul_sat r0.y, r0.z, r0.y\n    temp0.y = saturate(temp0.z * temp0.y);\n    // add_sat r0.y, r0.y, r0.x\n    temp0.y = saturate(temp0.y + temp0.x);\n    // cmp oC0, r2.z, r0.x, r0.y\n    out_color = (temp2.z >= 0) ? temp0.x : temp0.y;\n    // \n\n    return out_color;\n}\n")),(0,m.kt)("p",null,"Decompiled by DXDecompiler."))}_.isMDXComponent=!0}}]);