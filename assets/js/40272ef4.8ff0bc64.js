"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[75508],{3905:(e,n,r)=>{r.d(n,{Zo:()=>i,kt:()=>s});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function m(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var d=t.createContext({}),p=function(e){var n=t.useContext(d),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},i=function(e){var n=p(e.components);return t.createElement(d.Provider,{value:n},e.children)},c="mdxType",x={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},_=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,i=m(e,["components","mdxType","originalType","parentName"]),c=p(r),_=o,s=c["".concat(d,".").concat(_)]||c[_]||x[_]||a;return r?t.createElement(s,l(l({ref:n},i),{},{components:r})):t.createElement(s,l({ref:n},i))}));function s(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=_;var m={};for(var d in n)hasOwnProperty.call(n,d)&&(m[d]=n[d]);m.originalType=e,m[c]="string"==typeof e?e:o,l[1]=m;for(var p=2;p<a;p++)l[p]=r[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}_.displayName="MDXCreateElement"},58491:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>x,frontMatter:()=>a,metadata:()=>m,toc:()=>p});var t=r(87462),o=(r(67294),r(3905));const a={id:0x12068c8c58617f00,title:"Generic Default Blend Diffuse Blend Mask Control Blend Normal Diffuse Texture Normalmap Rl Environment World Up Blend"},l="Generic Default Blend Diffuse Blend Mask Control Blend Normal Diffuse Texture Normalmap Rl Environment World Up Blend",m={unversionedId:"Generated/Shaders/Base/[300-400]/1298880076949061400",id:"Generated/Shaders/Base/[300-400]/1298880076949061400",title:"Generic Default Blend Diffuse Blend Mask Control Blend Normal Diffuse Texture Normalmap Rl Environment World Up Blend",description:"(genericBLENDDIFFUSEBLENDNORMALNORMALMAPWORLDUPBLEND, 0x12068c8c58617f69)",source:"@site/docs/Generated/Shaders/Base/[300-400]/0x12068c8c58617f69.mdx",sourceDirName:"Generated/Shaders/Base/[300-400]",slug:"/Generated/Shaders/Base/[300-400]/1298880076949061400",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[300-400]/1298880076949061400",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/docs/Generated/Shaders/Base/[300-400]/0x12068c8c58617f69.mdx",tags:[],version:"current",frontMatter:{id:"1298880076949061400",title:"Generic Default Blend Diffuse Blend Mask Control Blend Normal Diffuse Texture Normalmap Rl Environment World Up Blend"},sidebar:"docsSidebar",previous:{title:"Generic Shadow Caster Blend Diffuse Blend Mask Control Diffuse Texture Global Environment Mapping Gsma Texture Normalmap Vertex Color",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[300-400]/1298157861766642700"},next:{title:"Generic Shadow Caster Diffuse Texture Gsma Texture Normalmap Normalmap Depth Texture Normalmap Uv1 Nvidia Parallax Parallax Relief",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[300-400]/1300523497434826500"}},d={},p=[{value:"Technique <code>deferred_environment</code>",id:"technique-deferred_environment",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Sampler 1",id:"sampler-1",level:4},{value:"Sampler 2",id:"sampler-2",level:4},{value:"Sampler 3",id:"sampler-3",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],i={toc:p},c="wrapper";function x(e){let{components:n,...r}=e;return(0,o.kt)(c,(0,t.Z)({},i,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"generic-default-blend-diffuse-blend-mask-control-blend-normal-diffuse-texture-normalmap-rl-environment-world-up-blend"},"Generic Default Blend Diffuse Blend Mask Control Blend Normal Diffuse Texture Normalmap Rl Environment World Up Blend"),(0,o.kt)("p",null,"(",(0,o.kt)("inlineCode",{parentName:"p"},"generic:default:BLEND_DIFFUSE:BLEND_MASK_CONTROL:BLEND_NORMAL:DIFFUSE_TEXTURE:NORMALMAP:RL_ENVIRONMENT:WORLD_UP_BLEND"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"0x12068c8c58617f69"),")"),(0,o.kt)("h3",{id:"technique-deferred_environment"},"Technique ",(0,o.kt)("inlineCode",{parentName:"h3"},"deferred_environment")),(0,o.kt)("h3",{id:"render-states"},"Render States"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 1,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 2,\n    D3DRS_COLORWRITEENABLE = 15,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,o.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,o.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h4",{id:"sampler-1"},"Sampler 1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h4",{id:"sampler-2"},"Sampler 2"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h4",{id:"sampler-3"},"Sampler 3"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h3",{id:"shaders"},"Shaders"),(0,o.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"float camera_near_range : register(vs_3_0, c7);\nfloat ref_world_up_blend_bias : register(vs_3_0, c8);\ncolumn_major float4x4 view_proj_matrix : register(vs_3_0, c0);\ncolumn_major float4x4 world_matrix : register(vs_3_0, c4);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 normal : NORMAL;\n    float4 texcoord1 : TEXCOORD1;\n    float4 texcoord : TEXCOORD;\n    float4 tangent : TANGENT;\n    float4 binormal : BINORMAL;\n    float4 color : COLOR;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float texcoord1 : TEXCOORD1;\n    float texcoord7 : TEXCOORD7;\n    float4 texcoord : TEXCOORD;\n    float3 texcoord2 : TEXCOORD2;\n    float3 texcoord3 : TEXCOORD3;\n    float3 texcoord4 : TEXCOORD4;\n    float4 color : COLOR;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0;\n    float3 temp1;\n    // def c9, 2, -1, 1, 0\n    // dcl_position v0\n    // dcl_normal v1\n    // dcl_texcoord1 v2\n    // dcl_texcoord v3\n    // dcl_tangent v4\n    // dcl_binormal v5\n    // dcl_color v6\n    // dcl_position o0\n    // dcl_texcoord1 o1.x\n    // dcl_texcoord7 o2.x\n    // dcl_texcoord o3\n    // dcl_texcoord2 o4.xyz\n    // dcl_texcoord3 o5.xyz\n    // dcl_texcoord4 o6.xyz\n    // dcl_color o7\n    // dp4 o0.x, v0, c0\n    o.position.x = dot(i.position, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, v0, c1\n    o.position.y = dot(i.position, (view_proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.w, v0, c3\n    o.position.w = dot(i.position, (view_proj_matrix._m03_m13_m23_m33));\n    // dp4 r0.x, v0, c2\n    temp0.x = dot(i.position, (view_proj_matrix._m02_m12_m22_m32));\n    // add o1.x, r0.x, c7.x\n    o.texcoord1 = temp0.x + camera_near_range.x;\n    // mov o0.z, r0.x\n    o.position.z = temp0.x;\n    // mad r0.xyz, v4, c9.x, c9.y\n    temp0.xyz = i.tangent.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 o4.x, r0, c4\n    o.texcoord2.x = dot(temp0.xyz, (world_matrix._m00_m10_m20_m30).xyz);\n    // dp3 o5.x, r0, c5\n    o.texcoord3.x = dot(temp0.xyz, (world_matrix._m01_m11_m21_m31).xyz);\n    // dp3 r0.x, r0, c6\n    temp0.x = dot(temp0.xyz, (world_matrix._m02_m12_m22_m32).xyz);\n    // mad r1.xyz, v5, c9.x, c9.y\n    temp1.xyz = i.binormal.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 o4.y, -r1, c4\n    o.texcoord2.y = dot(-temp1.xyz, (world_matrix._m00_m10_m20_m30).xyz);\n    // dp3 o5.y, -r1, c5\n    o.texcoord3.y = dot(-temp1.xyz, (world_matrix._m01_m11_m21_m31).xyz);\n    // dp3 r0.y, -r1, c6\n    temp0.y = dot(-temp1.xyz, (world_matrix._m02_m12_m22_m32).xyz);\n    // mad r1.xyz, v1, c9.x, c9.y\n    temp1.xyz = i.normal.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 o4.z, r1, c4\n    o.texcoord2.z = dot(temp1.xyz, (world_matrix._m00_m10_m20_m30).xyz);\n    // dp3 o5.z, r1, c5\n    o.texcoord3.z = dot(temp1.xyz, (world_matrix._m01_m11_m21_m31).xyz);\n    // dp3 r0.z, r1, c6\n    temp0.z = dot(temp1.xyz, (world_matrix._m02_m12_m22_m32).xyz);\n    // dp3 r0.w, r0, r0\n    temp0.w = dot(temp0.xyz, temp0.xyz);\n    // mov o6.xyz, r0\n    o.texcoord4 = temp0;\n    // rsq r0.x, r0.w\n    temp0.x = 1 / sqrt(temp0.w);\n    // mad r0.x, r0.z, -r0.x, c9.z\n    temp0.x = temp0.z * -temp0.x + float1(1);\n    // pow r1.x, r0.x, c8.x\n    temp1.x = pow(temp0.x, ref_world_up_blend_bias.x);\n    // min o2.x, r1.x, c9.z\n    o.texcoord7 = min(temp1.x, float4(1, 1, 1, 1));\n    // mov o3.xy, v3\n    o.texcoord.xy = i.texcoord.xy;\n    // mov o3.zw, v2.xyxy\n    o.texcoord.zw = i.texcoord1.xy;\n    // mul o7, c9.xxxz, v6\n    o.color = float4(2, 2, 2, 1) * i.color;\n    // \n\n    return o;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."),(0,o.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D bump_normal_texture : register(ps_3_0, s2);\nsampler2D diffuse_layer0_texture : register(ps_3_0, s1);\nsampler2D diffuse_texture : register(ps_3_0, s0);\nsampler2D normal_layer0_texture : register(ps_3_0, s3);\nfloat2 ref_blend_control : register(ps_3_0, c0);\nstruct PixelMain_Input\n{\n    float texcoord1 : TEXCOORD1;\n    float texcoord7 : TEXCOORD7;\n    float2 texcoord : TEXCOORD;\n    float3 texcoord2 : TEXCOORD2;\n    float3 texcoord3 : TEXCOORD3;\n    float3 texcoord4 : TEXCOORD4;\n};\n\nstruct PixelMain_Output\n{\n    float4 color1 : COLOR1;\n    float4 color : COLOR;\n    float4 color2 : COLOR2;\n};\n\nPixelMain_Output PixelMain(PixelMain_Input i)\n{\n    PixelMain_Output o;\n    float4 temp0, temp1, temp2, temp3;\n    // def c1, -0.5, 2, 1, 0.5\n    // def c2, 0.4, 0, 0, 0\n    // dcl_texcoord1 v0.x\n    // dcl_texcoord7_pp v1.x\n    // dcl_texcoord v2.xy\n    // dcl_texcoord2 v3.xyz\n    // dcl_texcoord3 v4.xyz\n    // dcl_texcoord4 v5.xyz\n    // dcl_2d s0\n    // dcl_2d s1\n    // dcl_2d s2\n    // dcl_2d s3\n    // texld r0, v2, s2\n    temp0 = tex2D(bump_normal_texture, i.texcoord.xy);\n    // mov r0.xy, r0.wyzw\n    temp0.xy = temp0.wy;\n    // texld r1, v2, s3\n    temp1 = tex2D(normal_layer0_texture, i.texcoord.xy);\n    // mov r0.zw, r1.xywy\n    temp0.zw = temp1.wy;\n    // add r0, r0, c1.x\n    temp0 = temp0 + float4(-0.5, -0.5, -0.5, -0.5);\n    // add r0.zw, r0, r0\n    temp0.zw = temp0.zw + temp0.zw;\n    // mad r0.xy, r0, c1.y, -r0.zwzw\n    temp0.xy = temp0.xy * float2(2, 2) + -temp0.zw;\n    // rcp r1.x, c0.x\n    temp1.x = 1.0f / ref_blend_control.x;\n    // texld_pp r2, v2, s1\n    temp2 = /* not implemented _pp modifier */ tex2D(diffuse_layer0_texture, i.texcoord.xy);\n    // add_pp r1.y, r2.w, -v1.x\n    temp1.y = /* not implemented _pp modifier */ temp2.w + -i.texcoord7.x;\n    // mul_sat_pp r1.x, r1.x, r1.y\n    ;// error\n    // mad r0.xy, r1.x, r0, r0.zwzw\n    temp0.xy = temp1.xx * temp0.xy + temp0.zw;\n    // mul r0.w, r0.x, r0.x\n    temp0.w = temp0.x * temp0.x;\n    // mad r0.w, r0.y, r0.y, -r0.w\n    temp0.w = temp0.y * temp0.y + -temp0.w;\n    // add r0.w, -r0.w, c1.z\n    temp0.w = -temp0.w + float1(1);\n    // rsq r0.w, r0.w\n    temp0.w = 1 / sqrt(temp0.w);\n    // rcp r0.z, r0.w\n    temp0.z = 1.0f / temp0.w;\n    // dp3 r3.x, r0, v3\n    temp3.x = dot(temp0.xyz, i.texcoord2.xyz);\n    // dp3 r3.y, r0, v4\n    temp3.y = dot(temp0.xyz, i.texcoord3.xyz);\n    // dp3 r3.z, r0, v5\n    temp3.z = dot(temp0.xyz, i.texcoord4.xyz);\n    // nrm_pp r0.xyz, r3\n    temp0.xyz = /* not implemented _pp modifier */ normalize(temp3.xyz).xyz;\n    // mad_pp oC1.xyz, r0, c1.w, c1.w\n    o.color1.xyz = /* not implemented _pp modifier */ temp0.xyz * float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5);\n    // texld_pp r0, v2, s0\n    temp0 = /* not implemented _pp modifier */ tex2D(diffuse_texture, i.texcoord.xy);\n    // lrp_pp r3, r1.x, r0, r2\n    temp3 = /* not implemented _pp modifier */ lerp(temp2, temp0, temp1.x);\n    // mov_pp oC0.xyz, r3\n    o.color.xyz = /* not implemented _pp modifier */ temp3.xyz;\n    // mov_pp oC1.w, r3.w\n    o.color1.w = /* not implemented _pp modifier */ temp3.w;\n    // mov oC0.w, c2.x\n    o.color.w = float1(0.4);\n    // mov oC2, v0.x\n    o.color2 = i.texcoord1.x;\n    // \n\n    return o;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."))}x.isMDXComponent=!0}}]);