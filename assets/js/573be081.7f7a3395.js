"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[52787],{603905:(e,t,r)=>{r.d(t,{Zo:()=>x,kt:()=>s});var n=r(667294);function m(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){m(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,m=function(e,t){if(null==e)return{};var r,n,m={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(m[r]=e[r]);return m}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(m[r]=e[r])}return m}var _=n.createContext({}),d=function(e){var t=n.useContext(_),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},x=function(e){var t=d(e.components);return n.createElement(_.Provider,{value:t},e.children)},i="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},l=n.forwardRef((function(e,t){var r=e.components,m=e.mdxType,o=e.originalType,_=e.parentName,x=a(e,["components","mdxType","originalType","parentName"]),i=d(r),l=m,s=i["".concat(_,".").concat(l)]||i[l]||c[l]||o;return r?n.createElement(s,p(p({ref:t},x),{},{components:r})):n.createElement(s,p({ref:t},x))}));function s(e,t){var r=arguments,m=t&&t.mdxType;if("string"==typeof e||m){var o=r.length,p=new Array(o);p[0]=l;var a={};for(var _ in t)hasOwnProperty.call(t,_)&&(a[_]=t[_]);a.originalType=e,a[i]="string"==typeof e?e:m,p[1]=a;for(var d=2;d<o;d++)p[d]=r[d];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}l.displayName="MDXCreateElement"},458195:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>_,contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var n=r(487462),m=(r(667294),r(603905));const o={id:0xa14f1d7ee3745000,title:"Effect Default Scope"},p="Effect Default Scope",a={unversionedId:"Generated/Shaders/Base/[3000-3100]/11623541594085675000",id:"Generated/Shaders/Base/[3000-3100]/11623541594085675000",title:"Effect Default Scope",description:"(effectSCOPE, 0xa14f1d7ee3745377)",source:"@site/docs/Generated/Shaders/Base/[3000-3100]/0xa14f1d7ee3745377.mdx",sourceDirName:"Generated/Shaders/Base/[3000-3100]",slug:"/Generated/Shaders/Base/[3000-3100]/11623541594085675000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3000-3100]/11623541594085675000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Base/[3000-3100]/0xa14f1d7ee3745377.mdx",tags:[],version:"current",frontMatter:{id:"11623541594085675000",title:"Effect Default Scope"},sidebar:"docsSidebar",previous:{title:"Generic Shadow Caster Cube Environment Mapping Cube Environment Mapping Water Diffuse Texture Nvidia Water Big",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3000-3100]/11617845507056646000"},next:{title:"Generic Default Diffuse Texture Normalmap Self Illumination Skinned 1weight",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3000-3100]/11625442801797036000"}},_={},d=[{value:"Technique <code>transparent</code>",id:"technique-transparent",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Sampler 1",id:"sampler-1",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4},{value:"Technique <code>contours</code>",id:"technique-contours",level:3},{value:"Render States",id:"render-states-1",level:3},{value:"Sampler States",id:"sampler-states-1",level:3},{value:"Shaders",id:"shaders-1",level:3},{value:"Vertex Shader",id:"vertex-shader-1",level:4},{value:"Pixel Shader",id:"pixel-shader-1",level:4}],x={toc:d},i="wrapper";function c(e){let{components:t,...r}=e;return(0,m.kt)(i,(0,n.Z)({},x,r,{components:t,mdxType:"MDXLayout"}),(0,m.kt)("h1",{id:"effect-default-scope"},"Effect Default Scope"),(0,m.kt)("p",null,"(",(0,m.kt)("inlineCode",{parentName:"p"},"effect:default:SCOPE"),", ",(0,m.kt)("inlineCode",{parentName:"p"},"0xa14f1d7ee3745377"),")"),(0,m.kt)("p",null,"This template is referenced 1 time by ",(0,m.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/base.render_template_database#effect-scope"},"effect:SCOPE"),".\nThis template uses the following inputs:\n|Name|UI Name|Type|\n|---|---|---|\n|diffuse_texture|Reticle0 Texture|texture|\n|macrodetail_diffuse_texture|Background Texture|texture|\n|scope_zoom|Scope zoom|scalar|\n|scope_params|Distance, Length, Scale|vector3|\n|scope_inner_vignett|Inner vignett (Radius, Edge%)|vector3|\n|scope_outer_vignett|Outer vignett (Max radius, Min Radius, Edge%)|vector3|\n|scope_fadeout_params|Fadeout (Eye distance, Length)|vector3|\n|scope_fadeout|Scope fadeout|scalar|."),(0,m.kt)("h3",{id:"technique-transparent"},"Technique ",(0,m.kt)("inlineCode",{parentName:"h3"},"transparent")),(0,m.kt)("h3",{id:"render-states"},"Render States"),(0,m.kt)("p",null,"More info can be found on the ",(0,m.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 1,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 2,\n    D3DRS_COLORWRITEENABLE = 15,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n    D3DRS_BLENDOP = 1,\n    D3DRS_SRCBLEND = 8,\n    D3DRS_DESTBLEND = 6,\n};\n")),(0,m.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,m.kt)("p",null,"More info can be found on the ",(0,m.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,m.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 2,\n    D3DSAMP_MINFILTER = 2,\n    D3DSAMP_MIPFILTER = 2,\n};\n")),(0,m.kt)("h4",{id:"sampler-1"},"Sampler 1"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 2,\n    D3DSAMP_MINFILTER = 2,\n    D3DSAMP_MIPFILTER = 2,\n};\n")),(0,m.kt)("h3",{id:"shaders"},"Shaders"),(0,m.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 camera_world_matrix : register(vs_3_0, c12);\ncolumn_major float4x4 proj_matrix : register(vs_3_0, c8);\nfloat3 ref_scope_fadeout_params : register(vs_3_0, c17);\nfloat3 ref_scope_params : register(vs_3_0, c16);\nfloat ref_scope_zoom : register(vs_3_0, c15);\ncolumn_major float4x4 view_matrix : register(vs_3_0, c4);\ncolumn_major float4x4 world_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float2 texcoord : TEXCOORD;\n    float4 texcoord1 : TEXCOORD1;\n    float4 texcoord2 : TEXCOORD2;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0, temp1, temp4;\n    float3 temp2, temp3, temp5, temp6, temp7;\n    // def c18, 2, -1, 1, 0.5\n    // def c19, 0.001, 1, 0, 0\n    // dcl_position v0\n    // dcl_texcoord v1\n    // dcl_position o0\n    // dcl_texcoord o1.xy\n    // dcl_texcoord1 o2\n    // dcl_texcoord2 o3\n    // dp4 r0.x, v0, c0\n    temp0.x = dot(i.position, (world_matrix._m00_m10_m20_m30));\n    // dp4 r0.y, v0, c1\n    temp0.y = dot(i.position, (world_matrix._m01_m11_m21_m31));\n    // dp4 r0.z, v0, c2\n    temp0.z = dot(i.position, (world_matrix._m02_m12_m22_m32));\n    // dp4 r0.w, v0, c3\n    temp0.w = dot(i.position, (world_matrix._m03_m13_m23_m33));\n    // dp4 r1.x, r0, c4\n    temp1.x = dot(temp0, (view_matrix._m00_m10_m20_m30));\n    // dp4 r1.y, r0, c5\n    temp1.y = dot(temp0, (view_matrix._m01_m11_m21_m31));\n    // dp4 r1.z, r0, c6\n    temp1.z = dot(temp0, (view_matrix._m02_m12_m22_m32));\n    // dp4 r1.w, r0, c7\n    temp1.w = dot(temp0, (view_matrix._m03_m13_m23_m33));\n    // dp4 o0.x, r1, c8\n    o.position.x = dot(temp1, (proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, r1, c9\n    o.position.y = dot(temp1, (proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.z, r1, c10\n    o.position.z = dot(temp1, (proj_matrix._m02_m12_m22_m32));\n    // dp4 o0.w, r1, c11\n    o.position.w = dot(temp1, (proj_matrix._m03_m13_m23_m33));\n    // rcp r0.x, c15.x\n    temp0.x = 1.0f / ref_scope_zoom.x;\n    // rcp r0.y, c16.z\n    temp0.y = 1.0f / ref_scope_params.z;\n    // mad r0.zw, v1.xyxy, c18.x, c18.xyyz\n    temp0.zw = i.texcoord.xy * float2(2, 2) + float2(-1, 1);\n    // mov r1.x, c12.w\n    temp1.x = (camera_world_matrix._m00_m10_m20_m30).w;\n    // mov r1.y, c13.w\n    temp1.y = (camera_world_matrix._m01_m11_m21_m31).w;\n    // mov r1.z, c14.w\n    temp1.z = (camera_world_matrix._m02_m12_m22_m32).w;\n    // mov r2.x, c0.w\n    temp2.x = (world_matrix._m00_m10_m20_m30).w;\n    // mov r2.y, c1.w\n    temp2.y = (world_matrix._m01_m11_m21_m31).w;\n    // mov r2.z, c2.w\n    temp2.z = (world_matrix._m02_m12_m22_m32).w;\n    // mov r3.x, c0.y\n    temp3.x = (world_matrix._m00_m10_m20_m30).y;\n    // mov r3.y, c1.y\n    temp3.y = (world_matrix._m01_m11_m21_m31).y;\n    // mov r3.z, c2.y\n    temp3.z = (world_matrix._m02_m12_m22_m32).y;\n    // mad r4.xyz, r3, c16.x, r2\n    temp4.xyz = temp3.xyz * ref_scope_params.xxx + temp2.xyz;\n    // add r4.xyz, r1, -r4\n    temp4.xyz = temp1.xyz + -temp4.xyz;\n    // nrm r5.xyz, r4\n    temp5.xyz = normalize(temp4.xyz).xyz;\n    // mul r4.xyz, r3, c16.x\n    temp4.xyz = temp3.xyz * ref_scope_params.xxx;\n    // dp3 r1.w, r5, -r4\n    temp1.w = dot(temp5.xyz, -temp4.xyz);\n    // mad r4.xyz, r5, r1.w, r4\n    temp4.xyz = temp5.xyz * temp1.www + temp4.xyz;\n    // mov r5.y, c1.z\n    temp5.y = (world_matrix._m01_m11_m21_m31).z;\n    // mov r5.z, c2.z\n    temp5.z = (world_matrix._m02_m12_m22_m32).z;\n    // mov r5.x, c0.z\n    temp5.x = (world_matrix._m00_m10_m20_m30).z;\n    // mul r6.xyz, -r3.yzxw, r5.zxyw\n    temp6.xyz = -temp3.yzx * temp5.zxy;\n    // mad r6.xyz, r5.yzxw, -r3.zxyw, -r6\n    temp6.xyz = temp5.yzx * -temp3.zxy + -temp6.xyz;\n    // dp3 r7.x, r6, r4\n    temp7.x = dot(temp6.xyz, temp4.xyz);\n    // dp3 r7.y, r5, r4\n    temp7.y = dot(temp5.xyz, temp4.xyz);\n    // mad r4.xy, r7, -r0.y, r0.zwzw\n    temp4.xy = temp7.xy * -temp0.yy + temp0.zw;\n    // mul r7.xy, r0.x, r4\n    temp7.xy = temp0.xx * temp4.xy;\n    // mov r7.z, -r7.y\n    temp7.z = -temp7.y;\n    // add r7.xy, r7.xzzw, c18.z\n    temp7.xy = temp7.xz + float2(1, 1);\n    // mul o1.xy, r7, c18.w\n    o.texcoord = temp7 * float4(0.5, 0.5, 0.5, 0.5);\n    // mov r4.z, -r4.y\n    temp4.z = -temp4.y;\n    // add r4.zw, r4.xyxz, c18.z\n    temp4.zw = temp4.xz + float2(1, 1);\n    // mul o3.xyw, r4.xyzx, c19.yyzz\n    o.texcoord2.xyw = temp4.xyx * float3(1, 1, 0);\n    // mul o2.zw, r4, c18.w\n    o.texcoord1.zw = temp4.zw * float2(0.5, 0.5);\n    // mad r4.xyz, r3, c16.y, r2\n    temp4.xyz = temp3.xyz * ref_scope_params.yyy + temp2.xyz;\n    // mul r3.xyz, r3, c16.y\n    temp3.xyz = temp3.xyz * ref_scope_params.yyy;\n    // add r2.xyz, r1, -r2\n    temp2.xyz = temp1.xyz + -temp2.xyz;\n    // add r1.xyz, r1, -r4\n    temp1.xyz = temp1.xyz + -temp4.xyz;\n    // nrm r4.xyz, r1\n    temp4.xyz = normalize(temp1.xyz).xyz;\n    // dp3 r0.x, r2, r2\n    temp0.x = dot(temp2.xyz, temp2.xyz);\n    // rsq r0.x, r0.x\n    temp0.x = 1 / sqrt(temp0.x);\n    // rcp r0.x, r0.x\n    temp0.x = 1.0f / temp0.x;\n    // add r0.x, r0.x, -c17.x\n    temp0.x = temp0.x + -ref_scope_fadeout_params.x;\n    // dp3 r1.x, r4, -r3\n    temp1.x = dot(temp4.xyz, -temp3.xyz);\n    // mad r1.xyz, r4, r1.x, r3\n    temp1.xyz = temp4.xyz * temp1.xxx + temp3.xyz;\n    // dp3 r2.y, r5, r1\n    temp2.y = dot(temp5.xyz, temp1.xyz);\n    // dp3 r2.x, r6, r1\n    temp2.x = dot(temp6.xyz, temp1.xyz);\n    // mad o2.xy, r2, r0.y, r0.zwzw\n    o.texcoord1.xy = temp2.xy * temp0.yy + temp0.zw;\n    // mov r1.x, c19.x\n    temp1.x = float1(0.001);\n    // add r0.y, r1.x, c17.y\n    temp0.y = temp1.x + ref_scope_fadeout_params.y;\n    // rcp r0.y, r0.y\n    temp0.y = 1.0f / temp0.y;\n    // mul_sat o3.z, r0.y, r0.x\n    o.texcoord2.z = saturate(temp0.y * temp0.x);\n    // \n\n    return o;\n}\n")),(0,m.kt)("p",null,"Decompiled by DXDecompiler."),(0,m.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D diffuse_texture : register(ps_3_0, s0);\nsampler2D macrodetail_diffuse_texture : register(ps_3_0, s1);\nfloat ref_scope_fadeout : register(ps_3_0, c2);\nfloat3 ref_scope_inner_vignett : register(ps_3_0, c0);\nfloat3 ref_scope_outer_vignett : register(ps_3_0, c1);\nstruct PixelMain_Input\n{\n    float2 texcoord : TEXCOORD;\n    float4 texcoord1 : TEXCOORD1;\n    float3 texcoord2 : TEXCOORD2;\n};\n\nfloat4 PixelMain(PixelMain_Input i) : COLOR\n{\n    float4 out_color;\n    float4 temp0, temp1;\n    float3 temp2;\n    // def c3, 1, 0, -2, 3\n    // def c4, -0.01, 0.01, 0, 0\n    // dcl_texcoord v0.xy\n    // dcl_texcoord1 v1\n    // dcl_texcoord2 v2.xyz\n    // dcl_2d s0\n    // dcl_2d s1\n    // dp2add r0.x, v2, v2, c3.y\n    temp0.x = dot(i.texcoord2.xy, i.texcoord2.xy) + float1(0);\n    // rsq r0.x, r0.x\n    temp0.x = 1 / sqrt(temp0.x);\n    // rcp r0.x, r0.x\n    temp0.x = 1.0f / temp0.x;\n    // add r0.y, c0.y, c0.x\n    temp0.y = ref_scope_inner_vignett.y + ref_scope_inner_vignett.x;\n    // add r0.x, -r0.y, r0.x\n    temp0.x = -temp0.y + temp0.x;\n    // add r0.y, -r0.y, c0.x\n    temp0.y = -temp0.y + ref_scope_inner_vignett.x;\n    // rcp r0.y, r0.y\n    temp0.y = 1.0f / temp0.y;\n    // mul_sat r0.x, r0.y, r0.x\n    temp0.x = saturate(temp0.y * temp0.x);\n    // mad r0.y, r0.x, c3.z, c3.w\n    temp0.y = temp0.x * float1(-2) + float1(3);\n    // mul r0.x, r0.x, r0.x\n    temp0.x = temp0.x * temp0.x;\n    // mul r0.x, r0.x, r0.y\n    temp0.x = temp0.x * temp0.y;\n    // texld r1, v0, s1\n    temp1 = tex2D(macrodetail_diffuse_texture, i.texcoord.xy);\n    // mov r2.x, c3.x\n    temp2.x = float1(1);\n    // add r0.y, r2.x, -c2.x\n    temp0.y = temp2.x + -ref_scope_fadeout.x;\n    // mul_pp r0.yzw, r0.y, r1.xxyz\n    temp0.yzw = /* not implemented _pp modifier */ temp0.yyy * temp1.xyz;\n    // texld_pp r1, v1.zwzw, s0\n    temp1 = /* not implemented _pp modifier */ tex2D(diffuse_texture, i.texcoord1.zw);\n    // lrp_pp r2.xyz, r1.w, r1, r0.yzww\n    temp2.xyz = /* not implemented _pp modifier */ lerp(temp0.yzw, temp1.xyz, temp1.www);\n    // mad r0.xyz, r2, r0.x, c4.x\n    temp0.xyz = temp2.xyz * temp0.xxx + float3(-0.01, -0.01, -0.01);\n    // lrp r0.w, v2.z, c1.y, c1.x\n    temp0.w = lerp(ref_scope_outer_vignett.x, ref_scope_outer_vignett.y, i.texcoord2.z);\n    // add r1.x, r0.w, c1.z\n    temp1.x = temp0.w + ref_scope_outer_vignett.z;\n    // add r0.w, r0.w, -r1.x\n    temp0.w = temp0.w + -temp1.x;\n    // rcp r0.w, r0.w\n    temp0.w = 1.0f / temp0.w;\n    // dp2add r1.y, v1, v1, c3.y\n    temp1.y = dot(i.texcoord1.xy, i.texcoord1.xy) + float1(0);\n    // rsq r1.y, r1.y\n    temp1.y = 1 / sqrt(temp1.y);\n    // rcp r1.y, r1.y\n    temp1.y = 1.0f / temp1.y;\n    // add r1.x, -r1.x, r1.y\n    temp1.x = -temp1.x + temp1.y;\n    // mul_sat r0.w, r0.w, r1.x\n    temp0.w = saturate(temp0.w * temp1.x);\n    // mad r1.x, r0.w, c3.z, c3.w\n    temp1.x = temp0.w * float1(-2) + float1(3);\n    // mul r0.w, r0.w, r0.w\n    temp0.w = temp0.w * temp0.w;\n    // mul r0.w, r0.w, r1.x\n    temp0.w = temp0.w * temp1.x;\n    // mad_pp oC0.xyz, r0.w, r0, c4.y\n    out_color.xyz = /* not implemented _pp modifier */ temp0.www * temp0.xyz + float3(0.01, 0.01, 0.01);\n    // mov oC0.w, c3.y\n    out_color.w = float1(0);\n    // \n\n    return out_color;\n}\n")),(0,m.kt)("p",null,"Decompiled by DXDecompiler."),(0,m.kt)("h3",{id:"technique-contours"},"Technique ",(0,m.kt)("inlineCode",{parentName:"h3"},"contours")),(0,m.kt)("h3",{id:"render-states-1"},"Render States"),(0,m.kt)("p",null,"More info can be found on the ",(0,m.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 0,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 2,\n    D3DRS_COLORWRITEENABLE = 15,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n    D3DRS_BLENDOP = 1,\n    D3DRS_SRCBLEND = 8,\n    D3DRS_DESTBLEND = 6,\n};\n")),(0,m.kt)("h3",{id:"sampler-states-1"},"Sampler States"),(0,m.kt)("p",null,"More info can be found on the ",(0,m.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,m.kt)("h3",{id:"shaders-1"},"Shaders"),(0,m.kt)("h4",{id:"vertex-shader-1"},"Vertex Shader"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nfloat4 VertexMain(float4 position : POSITION) : POSITION\n{\n    float4 out_position;\n    // dcl_position v0\n    // dcl_position o0\n    // dp4 o0.x, v0, c0\n    out_position.x = dot(position, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, v0, c1\n    out_position.y = dot(position, (view_proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.z, v0, c2\n    out_position.z = dot(position, (view_proj_matrix._m02_m12_m22_m32));\n    // dp4 o0.w, v0, c3\n    out_position.w = dot(position, (view_proj_matrix._m03_m13_m23_m33));\n    // \n\n    return out_position;\n}\n")),(0,m.kt)("p",null,"Decompiled by DXDecompiler."),(0,m.kt)("h4",{id:"pixel-shader-1"},"Pixel Shader"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-hlsl"},"float4 PixelMain() : COLOR\n{\n    float4 out_color;\n    // def c0, 0, 0, 0, 0\n    // mov oC0, c0.x\n    out_color = float4(0, 0, 0, 0);\n    // \n\n    return out_color;\n}\n")),(0,m.kt)("p",null,"Decompiled by DXDecompiler."))}c.isMDXComponent=!0}}]);