"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[7294],{3905:(e,r,a)=>{a.d(r,{Zo:()=>d,kt:()=>S});var t=a(67294);function n(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function o(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?o(Object(a),!0).forEach((function(r){n(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function i(e,r){if(null==e)return{};var a,t,n=function(e,r){if(null==e)return{};var a,t,n={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||(n[a]=e[a]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=t.createContext({}),s=function(e){var r=t.useContext(p),a=r;return e&&(a="function"==typeof e?e(r):l(l({},r),e)),a},d=function(e){var r=s(e.components);return t.createElement(p.Provider,{value:r},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var a=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=s(a),u=n,S=c["".concat(p,".").concat(u)]||c[u]||m[u]||o;return a?t.createElement(S,l(l({ref:r},d),{},{components:a})):t.createElement(S,l({ref:r},d))}));function S(e,r){var a=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=u;var i={};for(var p in r)hasOwnProperty.call(r,p)&&(i[p]=r[p]);i.originalType=e,i[c]="string"==typeof e?e:n,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},39661:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var t=a(87462),n=(a(67294),a(3905));const o={id:0x3dc7b745bb984c0,title:"Generic Shadow Caster Cube Environment Mapping Diffuse Texture Gsma Texture Normalmap Normalmap Depth Texture Normalmap Uv1 Parallax Parallax Relief Parallax Shadows"},l="Generic Shadow Caster Cube Environment Mapping Diffuse Texture Gsma Texture Normalmap Normalmap Depth Texture Normalmap Uv1 Parallax Parallax Relief Parallax Shadows",i={unversionedId:"Generated/Shaders/Base/[0-100]/278233016675435700",id:"Generated/Shaders/Base/[0-100]/278233016675435700",title:"Generic Shadow Caster Cube Environment Mapping Diffuse Texture Gsma Texture Normalmap Normalmap Depth Texture Normalmap Uv1 Parallax Parallax Relief Parallax Shadows",description:"(genericCUBEENVIRONMENTMAPPINGGSMATEXTURENORMALMAPDEPTHTEXTUREPARALLAXPARALLAXSHADOWS, 0x3dc7b745bb984c3)",source:"@site/docs/Generated/Shaders/Base/[0-100]/0x3dc7b745bb984c3.mdx",sourceDirName:"Generated/Shaders/Base/[0-100]",slug:"/Generated/Shaders/Base/[0-100]/278233016675435700",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[0-100]/278233016675435700",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/docs/Generated/Shaders/Base/[0-100]/0x3dc7b745bb984c3.mdx",tags:[],version:"current",frontMatter:{id:"278233016675435700",title:"Generic Shadow Caster Cube Environment Mapping Diffuse Texture Gsma Texture Normalmap Normalmap Depth Texture Normalmap Uv1 Parallax Parallax Relief Parallax Shadows"},sidebar:"docsSidebar",previous:{title:"Generic Shadow Caster Contour Depth Scaling Diffuse Texture Global Environment Mapping Gsma Texture Normalmap",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[0-100]/278224157156693700"},next:{title:"Generic Shadow Caster Alpha Masked Diffuse Texture Double Sided Gsma Alpha Masking Gsma Texture Nvidia",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[0-100]/17460267185421986"}},p={},s=[{value:"Technique <code>ambient</code>",id:"technique-ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],d={toc:s},c="wrapper";function m(e){let{components:r,...a}=e;return(0,n.kt)(c,(0,t.Z)({},d,a,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"generic-shadow-caster-cube-environment-mapping-diffuse-texture-gsma-texture-normalmap-normalmap-depth-texture-normalmap-uv1-parallax-parallax-relief-parallax-shadows"},"Generic Shadow Caster Cube Environment Mapping Diffuse Texture Gsma Texture Normalmap Normalmap Depth Texture Normalmap Uv1 Parallax Parallax Relief Parallax Shadows"),(0,n.kt)("p",null,"(",(0,n.kt)("inlineCode",{parentName:"p"},"generic:shadow_caster:CUBE_ENVIRONMENT_MAPPING:DIFFUSE_TEXTURE:GSMA_TEXTURE:NORMALMAP:NORMALMAP_DEPTH_TEXTURE:NORMALMAP_UV1:PARALLAX:PARALLAX_RELIEF:PARALLAX_SHADOWS"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"0x3dc7b745bb984c3"),")"),(0,n.kt)("h3",{id:"technique-ambient"},"Technique ",(0,n.kt)("inlineCode",{parentName:"h3"},"ambient")),(0,n.kt)("h3",{id:"render-states"},"Render States"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 1,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 2,\n    D3DRS_COLORWRITEENABLE = 15,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 961656599,\n    D3DRS_SLOPESCALEDEPTHBIAS = 1075838976,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,n.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,n.kt)("h3",{id:"shaders"},"Shaders"),(0,n.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float texcoord1 : TEXCOORD1;\n};\n\nVertexMain_Output VertexMain(float4 position : POSITION)\n{\n    VertexMain_Output o;\n    float temp0;\n    // dcl_position v0\n    // dcl_position o0\n    // dcl_texcoord1 o1.x\n    // dp4 o0.x, v0, c0\n    o.position.x = dot(position, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, v0, c1\n    o.position.y = dot(position, (view_proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.w, v0, c3\n    o.position.w = dot(position, (view_proj_matrix._m03_m13_m23_m33));\n    // dp4 r0.x, v0, c2\n    temp0.x = dot(position, (view_proj_matrix._m02_m12_m22_m32));\n    // mov o0.z, r0.x\n    o.position.z = temp0.x;\n    // mov o1.x, r0.x\n    o.texcoord1 = temp0.x;\n    // \n\n    return o;\n}\n")),(0,n.kt)("p",null,"Decompiled by DXDecompiler."),(0,n.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-hlsl"},"float4 PixelMain(float texcoord1 : TEXCOORD1) : COLOR\n{\n    float4 out_color;\n    // def c0, 1, 0, 0, 0\n    // dcl_texcoord1 v0.x\n    // mul oC0, c0.xyyy, v0.x\n    out_color = float4(1, 0, 0, 0) * texcoord1.x;\n    // \n\n    return out_color;\n}\n")),(0,n.kt)("p",null,"Decompiled by DXDecompiler."))}m.isMDXComponent=!0}}]);