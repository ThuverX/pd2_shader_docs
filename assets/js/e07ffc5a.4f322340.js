"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[4450],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},p=Object.keys(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},_=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,p=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=d(r),_=o,f=c["".concat(l,".").concat(_)]||c[_]||m[_]||p;return r?n.createElement(f,a(a({ref:t},s),{},{components:r})):n.createElement(f,a({ref:t},s))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var p=r.length,a=new Array(p);a[0]=_;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:o,a[1]=i;for(var d=2;d<p;d++)a[d]=r[d];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}_.displayName="MDXCreateElement"},6387:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>p,metadata:()=>i,toc:()=>d});var n=r(7462),o=(r(7294),r(3905));const p={id:0x67022302697e5400,title:"Depth Fog Lookup Default"},a="Depth Fog Lookup Default",i={unversionedId:"Generated/Shaders/Filters/7422533629126792000",id:"Generated/Shaders/Filters/7422533629126792000",title:"Depth Fog Lookup Default",description:"(depthfoglookup:default, 0x67022302697e5402)",source:"@site/docs/Generated/Shaders/Filters/0x67022302697e5402.mdx",sourceDirName:"Generated/Shaders/Filters",slug:"/Generated/Shaders/Filters/7422533629126792000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Filters/7422533629126792000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Filters/0x67022302697e5402.mdx",tags:[],version:"current",frontMatter:{id:"7422533629126792000",title:"Depth Fog Lookup Default"},sidebar:"docsSidebar",previous:{title:"Soften Default",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Filters/7176750492264074000"},next:{title:"Bink Frame Default",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Filters/7568423737117508000"}},l={},d=[{value:"Technique <code>ambient</code>",id:"technique-ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],s={toc:d},c="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(c,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"depth-fog-lookup-default"},"Depth Fog Lookup Default"),(0,o.kt)("p",null,"(",(0,o.kt)("inlineCode",{parentName:"p"},"depth_fog_lookup:default"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"0x67022302697e5402"),")"),(0,o.kt)("p",null,"This template is referenced 1 time by ",(0,o.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/filters.render_template_database#depth-fog-lookup"},"depth_fog_lookup"),"."),(0,o.kt)("h3",{id:"technique-ambient"},"Technique ",(0,o.kt)("inlineCode",{parentName:"h3"},"ambient")),(0,o.kt)("h3",{id:"render-states"},"Render States"),(0,o.kt)("p",null,"More info can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 0,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 1,\n    D3DRS_COLORWRITEENABLE = 15,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,o.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,o.kt)("p",null,"More info can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,o.kt)("h3",{id:"shaders"},"Shaders"),(0,o.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float2 texcoord : TEXCOORD;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    // def c4, 1, 0, 0, 0\n    // dcl_position v0\n    // dcl_texcoord v1\n    // dcl_position o0\n    // dcl_texcoord o1.xy\n    // dp4 o0.x, v0, c0\n    o.position.x = dot(i.position, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, v0, c1\n    o.position.y = dot(i.position, (view_proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.w, v0, c3\n    o.position.w = dot(i.position, (view_proj_matrix._m03_m13_m23_m33));\n    // mov o0.z, c4.x\n    o.position.z = float1(1);\n    // mov o1.xy, v1\n    o.texcoord = i.texcoord;\n    // \n\n    return o;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."),(0,o.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"float ref_alpha0 : register(ps_3_0, c1);\nfloat ref_alpha1 : register(ps_3_0, c2);\nfloat ref_end0 : register(ps_3_0, c4);\nfloat ref_end1 : register(ps_3_0, c5);\nfloat ref_start : register(ps_3_0, c3);\nfloat3 ref_start_color : register(ps_3_0, c0);\nfloat4 PixelMain(float texcoord : TEXCOORD) : COLOR\n{\n    float4 out_color;\n    float2 temp0;\n    float temp1;\n    // def c6, 1, 0, 0, 0\n    // dcl_texcoord_pp v0.x\n    // rcp r0.x, c4.x\n    temp0.x = 1.0f / ref_end0.x;\n    // mad_sat_pp r0.x, v0.x, r0.x, -c3.x\n    ;// error\n    // mov_pp r1.x, c3.x\n    temp1.x = /* not implemented _pp modifier */ ref_start.x;\n    // add_pp r0.y, -r1.x, c6.x\n    temp0.y = /* not implemented _pp modifier */ -temp1.x + float1(1);\n    // rcp r0.y, r0.y\n    temp0.y = 1.0f / temp0.y;\n    // mul_pp r0.x, r0.y, r0.x\n    temp0.x = /* not implemented _pp modifier */ temp0.y * temp0.x;\n    // pow_pp r1.x, r0.x, c5.x\n    temp1.x = /* not implemented _pp modifier */ pow(temp0.x, ref_end1.x);\n    // mov r0.x, c1.x\n    temp0.x = ref_alpha0.x;\n    // add r0.x, -r0.x, c2.x\n    temp0.x = -temp0.x + ref_alpha1.x;\n    // mad_pp oC0.w, r1.x, r0.x, c1.x\n    out_color.w = /* not implemented _pp modifier */ temp1.x * temp0.x + ref_alpha0.x;\n    // rsq_pp r0.x, c0.x\n    temp0.x = /* not implemented _pp modifier */ 1 / sqrt(ref_start_color.x);\n    // rcp_pp oC0.x, r0.x\n    out_color.x = /* not implemented _pp modifier */ 1.0f / temp0.x;\n    // rsq_pp r0.x, c0.y\n    temp0.x = /* not implemented _pp modifier */ 1 / sqrt(ref_start_color.y);\n    // rcp_pp oC0.y, r0.x\n    out_color.y = /* not implemented _pp modifier */ 1.0f / temp0.x;\n    // rsq_pp r0.x, c0.z\n    temp0.x = /* not implemented _pp modifier */ 1 / sqrt(ref_start_color.z);\n    // rcp_pp oC0.z, r0.x\n    out_color.z = /* not implemented _pp modifier */ 1.0f / temp0.x;\n    // \n\n    return out_color;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."))}m.isMDXComponent=!0}}]);