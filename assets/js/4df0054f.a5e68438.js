"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[48868],{3905:(e,t,r)=>{r.d(t,{Zo:()=>_,kt:()=>s});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function m(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):m(m({},t),e)),r},_=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",i={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},x=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,_=d(e,["components","mdxType","originalType","parentName"]),c=p(r),x=o,s=c["".concat(l,".").concat(x)]||c[x]||i[x]||a;return r?n.createElement(s,m(m({ref:t},_),{},{components:r})):n.createElement(s,m({ref:t},_))}));function s(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,m=new Array(a);m[0]=x;var d={};for(var l in t)hasOwnProperty.call(t,l)&&(d[l]=t[l]);d.originalType=e,d[c]="string"==typeof e?e:o,m[1]=d;for(var p=2;p<a;p++)m[p]=r[p];return n.createElement.apply(null,m)}return n.createElement.apply(null,r)}x.displayName="MDXCreateElement"},98742:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>m,default:()=>i,frontMatter:()=>a,metadata:()=>d,toc:()=>p});var n=r(87462),o=(r(67294),r(3905));const a={id:0xcfc3d4ada6def000,title:"Generic Default Align Normal World Z Alpha Masked Diffuse Texture Double Sided External Alpha Ref Instanced Normalmap Vegetation Bending"},m="Generic Default Align Normal World Z Alpha Masked Diffuse Texture Double Sided External Alpha Ref Instanced Normalmap Vegetation Bending",d={unversionedId:"Generated/Shaders/Base/[3800-3900]/14971043428603720000",id:"Generated/Shaders/Base/[3800-3900]/14971043428603720000",title:"Generic Default Align Normal World Z Alpha Masked Diffuse Texture Double Sided External Alpha Ref Instanced Normalmap Vegetation Bending",description:"(genericALIGNNORMALWORLDZDIFFUSETEXTUREEXTERNALALPHAREFNORMALMAP:VEGETATION_BENDING, 0xcfc3d4ada6deef9d)",source:"@site/docs/Generated/Shaders/Base/[3800-3900]/0xcfc3d4ada6deef9d.mdx",sourceDirName:"Generated/Shaders/Base/[3800-3900]",slug:"/Generated/Shaders/Base/[3800-3900]/14971043428603720000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3800-3900]/14971043428603720000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/docs/Generated/Shaders/Base/[3800-3900]/0xcfc3d4ada6deef9d.mdx",tags:[],version:"current",frontMatter:{id:"14971043428603720000",title:"Generic Default Align Normal World Z Alpha Masked Diffuse Texture Double Sided External Alpha Ref Instanced Normalmap Vegetation Bending"},sidebar:"docsSidebar",previous:{title:"Generic Shadow Caster Diffuse Texture Normalmap Nvidia Rl Backdrop",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3800-3900]/14966929871098626000"},next:{title:"Generic Shadow Caster Ati Cube Environment Mapping Diffuse Texture Rl Backdrop",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3800-3900]/14982140608432353000"}},l={},p=[{value:"Technique <code>deferred_ambient_alpha_masked</code>",id:"technique-deferred_ambient_alpha_masked",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],_={toc:p},c="wrapper";function i(e){let{components:t,...r}=e;return(0,o.kt)(c,(0,n.Z)({},_,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"generic-default-align-normal-world-z-alpha-masked-diffuse-texture-double-sided-external-alpha-ref-instanced-normalmap-vegetation-bending"},"Generic Default Align Normal World Z Alpha Masked Diffuse Texture Double Sided External Alpha Ref Instanced Normalmap Vegetation Bending"),(0,o.kt)("p",null,"(",(0,o.kt)("inlineCode",{parentName:"p"},"generic:default:ALIGN_NORMAL_WORLD_Z:ALPHA_MASKED:DIFFUSE_TEXTURE:DOUBLE_SIDED:EXTERNAL_ALPHA_REF:INSTANCED:NORMALMAP:VEGETATION_BENDING"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"0xcfc3d4ada6deef9d"),")"),(0,o.kt)("h3",{id:"technique-deferred_ambient_alpha_masked"},"Technique ",(0,o.kt)("inlineCode",{parentName:"h3"},"deferred_ambient_alpha_masked")),(0,o.kt)("h3",{id:"render-states"},"Render States"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 1,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 1,\n    D3DRS_COLORWRITEENABLE = 15,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,o.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,o.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h3",{id:"shaders"},"Shaders"),(0,o.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"float camera_near_range : register(vs_3_0, c208);\ncolumn_major float4x4 proj_matrix : register(vs_3_0, c204);\nfloat3 ref_branch_settings : register(vs_3_0, c212);\nfloat3 ref_detail_settings : register(vs_3_0, c211);\nfloat ref_speed : register(vs_3_0, c210);\nfloat ref_time : register(vs_3_0, c209);\ncolumn_major float4x4 ref_world_tm[50] : register(vs_3_0, c0);\ncolumn_major float4x4 view_matrix : register(vs_3_0, c200);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 normal : NORMAL;\n    float4 texcoord1 : TEXCOORD1;\n    float4 texcoord : TEXCOORD;\n    float4 tangent : TANGENT;\n    float4 binormal : BINORMAL;\n    float4 position1 : POSITION1;\n    float4 color : COLOR;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float texcoord1 : TEXCOORD1;\n    float4 texcoord : TEXCOORD;\n    float3 texcoord2 : TEXCOORD2;\n    float3 texcoord3 : TEXCOORD3;\n    float3 texcoord4 : TEXCOORD4;\n    float3 texcoord5 : TEXCOORD5;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0, temp1, temp2, temp3;\n    float addr0;\n    float3 temp4;\n    // def c213, 2, -1, 4, -0\n    // def c214, 1.975, 0.793, 0.375, 0.193\n    // def c215, 2, -0.5, 3, 0\n    // dcl_position v0\n    // dcl_normal v1\n    // dcl_texcoord1 v2\n    // dcl_texcoord v3\n    // dcl_tangent v4\n    // dcl_binormal v5\n    // dcl_position1 v6\n    // dcl_color v7\n    // dcl_position o0\n    // dcl_texcoord1 o1.x\n    // dcl_texcoord o2\n    // dcl_texcoord2 o3.xyz\n    // dcl_texcoord3 o4.xyz\n    // dcl_texcoord4 o5.xyz\n    // dcl_texcoord5 o6.xyz\n    // mul r0.z, c212.x, v7.z\n    temp0.z = ref_branch_settings.x * i.color.z;\n    // add r0.w, c209.x, v7.y\n    temp0.w = ref_time.x + i.color.y;\n    // mul r1.xy, r0.w, c211.y\n    temp1.xy = temp0.w * ref_detail_settings.y;\n    // frc r0.w, v6.x\n    temp0.w = frac(i.position1.x);\n    // add r0.w, -r0.w, v6.x\n    temp0.w = -temp0.w + i.position1.x;\n    // mul r0.w, r0.w, c213.z\n    temp0.w = temp0.w * float1(4);\n    // mova a0.x, r0.w\n    addr0.x = temp0.w;\n    // mov r2.x, c0[a0.x].w\n    temp2.x = (ref_world_tm[0 + (addr0.x / 4)]._m00_m10_m20_m30).w;\n    // mov r2.y, c1[a0.x].w\n    temp2.y = (ref_world_tm[0 + (addr0.x / 4)]._m01_m11_m21_m31).w;\n    // mov r2.z, c2[a0.x].w\n    temp2.z = (ref_world_tm[0 + (addr0.x / 4)]._m02_m12_m22_m32).w;\n    // dp3 r0.w, r2, -c213.y\n    temp0.w = dot(temp2.xyz, float3(1, 1, 1));\n    // add r0.w, r0.w, v7.y\n    temp0.w = temp0.w + i.color.y;\n    // add r0.w, r0.w, c209.x\n    temp0.w = temp0.w + ref_time.x;\n    // mul r1.zw, r0.w, c212.y\n    temp1.zw = temp0.w * ref_branch_settings.y;\n    // mul r1, r1, c210.x\n    temp1 = temp1 * ref_speed.x;\n    // mul r1, r1, c214\n    temp1 = temp1 * float4(1.975, 0.793, 0.375, 0.193);\n    // frc r1, r1\n    temp1 = frac(temp1);\n    // mad r1, r1, c215.x, c215.y\n    temp1 = temp1 * float4(2, 2, 2, 2) + float4(-0.5, -0.5, -0.5, -0.5);\n    // frc r1, r1\n    temp1 = frac(temp1);\n    // mad r1, r1, c213.x, c213.y\n    temp1 = temp1 * float4(2, 2, 2, 2) + float4(-1, -1, -1, -1);\n    // mul r2, r1_abs, r1_abs\n    temp2 = abs(temp1) * abs(temp1);\n    // mad r1, r1_abs, -c215.x, c215.z\n    temp1 = abs(temp1) * float4(-2, -2, -2, -2) + float4(3, 3, 3, 3);\n    // mul r1, r1, r2\n    temp1 = temp1 * temp2;\n    // add r1.xyz, r1.yyww, r1.xxzw\n    temp1.xyz = temp1.yyw + temp1.xxz;\n    // mul r0.w, v7.z, v7.x\n    temp0.w = i.color.z * i.color.x;\n    // mul r0.w, r0.w, c211.x\n    temp0.w = temp0.w * ref_detail_settings.x;\n    // mad r2.xyz, v1, c213.x, c213.y\n    temp2.xyz = i.normal.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 r3.z, r2, c0[a0.x]\n    temp3.z = dot(temp2.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m00_m10_m20_m30).xyz);\n    // dp3 r3.w, r2, c1[a0.x]\n    temp3.w = dot(temp2.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m01_m11_m21_m31).xyz);\n    // dp3 o5.z, r2, c2[a0.x]\n    o.texcoord4.z = dot(temp2.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m02_m12_m22_m32).xyz);\n    // mul r0.xy, r0.w, r3.zwzw\n    temp0.xy = temp0.ww * temp3.zw;\n    // mov o4.z, r3.w\n    o.texcoord3.z = temp3.w;\n    // mad r2, v0.xyzx, -c213.yyyw, -c213.wwwy\n    temp2 = i.position.xyzx * float4(1, 1, 1, 0) + float4(0, 0, 0, 1);\n    // dp4 r4.x, r2, c0[a0.x]\n    temp4.x = dot(temp2, (ref_world_tm[0 + (addr0.x / 4)]._m00_m10_m20_m30));\n    // dp4 r4.y, r2, c1[a0.x]\n    temp4.y = dot(temp2, (ref_world_tm[0 + (addr0.x / 4)]._m01_m11_m21_m31));\n    // dp4 r4.z, r2, c2[a0.x]\n    temp4.z = dot(temp2, (ref_world_tm[0 + (addr0.x / 4)]._m02_m12_m22_m32));\n    // dp4 r2.w, r2, c3[a0.x]\n    temp2.w = dot(temp2, (ref_world_tm[0 + (addr0.x / 4)]._m03_m13_m23_m33));\n    // mad r2.xyz, r1, r0, r4\n    temp2.xyz = temp1.xyz * temp0.xyz + temp4.xyz;\n    // dp4 r0.x, r2, c200\n    temp0.x = dot(temp2, (view_matrix._m00_m10_m20_m30));\n    // dp4 r0.y, r2, c201\n    temp0.y = dot(temp2, (view_matrix._m01_m11_m21_m31));\n    // dp4 r0.z, r2, c202\n    temp0.z = dot(temp2, (view_matrix._m02_m12_m22_m32));\n    // dp4 r0.w, r2, c203\n    temp0.w = dot(temp2, (view_matrix._m03_m13_m23_m33));\n    // mov o6.xyz, r2\n    o.texcoord5 = temp2;\n    // dp4 o0.x, r0, c204\n    o.position.x = dot(temp0, (proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, r0, c205\n    o.position.y = dot(temp0, (proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.w, r0, c207\n    o.position.w = dot(temp0, (proj_matrix._m03_m13_m23_m33));\n    // dp4 r0.x, r0, c206\n    temp0.x = dot(temp0, (proj_matrix._m02_m12_m22_m32));\n    // add o1.x, r0.x, c208.x\n    o.texcoord1 = temp0.x + camera_near_range.x;\n    // mov o0.z, r0.x\n    o.position.z = temp0.x;\n    // mad r0.xyz, v4, c213.x, c213.y\n    temp0.xyz = i.tangent.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 o4.x, r0, c1[a0.x]\n    o.texcoord3.x = dot(temp0.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m01_m11_m21_m31).xyz);\n    // dp3 o5.x, r0, c2[a0.x]\n    o.texcoord4.x = dot(temp0.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m02_m12_m22_m32).xyz);\n    // dp3 r3.x, r0, c0[a0.x]\n    temp3.x = dot(temp0.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m00_m10_m20_m30).xyz);\n    // mad r0.xyz, v5, c213.x, c213.y\n    temp0.xyz = i.binormal.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 o4.y, -r0, c1[a0.x]\n    o.texcoord3.y = dot(-temp0.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m01_m11_m21_m31).xyz);\n    // dp3 o5.y, -r0, c2[a0.x]\n    o.texcoord4.y = dot(-temp0.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m02_m12_m22_m32).xyz);\n    // dp3 r3.y, -r0, c0[a0.x]\n    temp3.y = dot(-temp0.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m00_m10_m20_m30).xyz);\n    // mov o3.xyz, r3\n    o.texcoord2 = temp3;\n    // mov o2.xy, v3\n    o.texcoord.xy = i.texcoord.xy;\n    // mov o2.zw, v2.xyxy\n    o.texcoord.zw = i.texcoord1.xy;\n    // \n\n    return o;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."),(0,o.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D diffuse_texture : register(ps_3_0, s0);\nfloat ref_alpha_ref : register(ps_3_0, c0);\nstruct PixelMain_Input\n{\n    float texcoord1 : TEXCOORD1;\n    float2 texcoord : TEXCOORD;\n};\n\nstruct PixelMain_Output\n{\n    float4 color : COLOR;\n    float4 color1 : COLOR1;\n    float4 color2 : COLOR2;\n};\n\nPixelMain_Output PixelMain(PixelMain_Input i)\n{\n    PixelMain_Output o;\n    float4 temp0, temp1;\n    // def c1, 1, -1, 0.4, 0\n    // def c2, 0, 1, 0.5, 0\n    // dcl_texcoord1 v0.x\n    // dcl_texcoord v1.xy\n    // dcl_2d s0\n    // texld_pp r0, v1, s0\n    temp0 = /* not implemented _pp modifier */ tex2D(diffuse_texture, i.texcoord.xy);\n    // add r1.x, r0.w, -c0.x\n    temp1.x = temp0.w + -ref_alpha_ref.x;\n    // cmp r1, r1.x, c1.x, c1.y\n    temp1 = (temp1.x >= 0) ? float4(1, 1, 1, 1) : float4(-1, -1, -1, -1);\n    // texkill r1\n    clip(temp1);\n    // mov_pp oC0.xyz, r0\n    o.color.xyz = /* not implemented _pp modifier */ temp0.xyz;\n    // mad_pp oC1, r0.w, c2.xxxy, c2.zzyx\n    o.color1 = /* not implemented _pp modifier */ temp0.w * float4(0, 0, 0, 1) + float4(0.5, 0.5, 1, 0);\n    // mov oC0.w, c1.z\n    o.color.w = float1(0.4);\n    // mov oC2, v0.x\n    o.color2 = i.texcoord1.x;\n    // \n\n    return o;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."))}i.isMDXComponent=!0}}]);