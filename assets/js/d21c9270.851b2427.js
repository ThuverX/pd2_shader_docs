"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[6072],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>_});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},m=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},x="mdxType",i={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),x=d(r),s=o,_=x["".concat(l,".").concat(s)]||x[s]||i[s]||a;return r?n.createElement(_,p(p({ref:t},m),{},{components:r})):n.createElement(_,p({ref:t},m))}));function _(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,p=new Array(a);p[0]=s;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[x]="string"==typeof e?e:o,p[1]=c;for(var d=2;d<a;d++)p[d]=r[d];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},9565:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>i,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var n=r(7462),o=(r(7294),r(3905));const a={id:0xba9c096529781800,title:"Depth Blur Default"},p="Depth Blur Default",c={unversionedId:"Generated/Shaders/Filters/13446632917513542000",id:"Generated/Shaders/Filters/13446632917513542000",title:"Depth Blur Default",description:"(depth_blur:default, 0xba9c096529781a95)",source:"@site/docs/Generated/Shaders/Filters/0xba9c096529781a95.mdx",sourceDirName:"Generated/Shaders/Filters",slug:"/Generated/Shaders/Filters/13446632917513542000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Filters/13446632917513542000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Filters/0xba9c096529781a95.mdx",tags:[],version:"current",frontMatter:{id:"13446632917513542000",title:"Depth Blur Default"},sidebar:"docsSidebar",previous:{title:"4 Tap Filter R Default",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Filters/13388089457263204000"},next:{title:"Radial Blur Apply Default",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Filters/13694823978367693000"}},l={},d=[{value:"Technique <code>ambient</code>",id:"technique-ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Sampler 1",id:"sampler-1",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],m={toc:d},x="wrapper";function i(e){let{components:t,...r}=e;return(0,o.kt)(x,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"depth-blur-default"},"Depth Blur Default"),(0,o.kt)("p",null,"(",(0,o.kt)("inlineCode",{parentName:"p"},"depth_blur:default"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"0xba9c096529781a95"),")"),(0,o.kt)("p",null,"This template is referenced 1 time by ",(0,o.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/filters.render_template_database#depth-blur"},"depth_blur"),"."),(0,o.kt)("h3",{id:"technique-ambient"},"Technique ",(0,o.kt)("inlineCode",{parentName:"h3"},"ambient")),(0,o.kt)("h3",{id:"render-states"},"Render States"),(0,o.kt)("p",null,"More info can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 0,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 1,\n    D3DRS_COLORWRITEENABLE = 15,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,o.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,o.kt)("p",null,"More info can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,o.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 2,\n    D3DSAMP_MINFILTER = 2,\n    D3DSAMP_MIPFILTER = 2,\n};\n")),(0,o.kt)("h4",{id:"sampler-1"},"Sampler 1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 1,\n    D3DSAMP_MINFILTER = 1,\n    D3DSAMP_MIPFILTER = 1,\n};\n")),(0,o.kt)("h3",{id:"shaders"},"Shaders"),(0,o.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"float ref_far_focus_distance_max : register(vs_3_0, c10);\nfloat ref_far_focus_distance_min : register(vs_3_0, c9);\nfloat ref_near_focus_distance_max : register(vs_3_0, c7);\nfloat ref_near_focus_distance_min : register(vs_3_0, c8);\nfloat3 render_target_texel_offset : register(vs_3_0, c4);\ncolumn_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nfloat3 vp_offset : register(vs_3_0, c6);\nfloat3 vp_size : register(vs_3_0, c5);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float2 texcoord : TEXCOORD;\n    float4 texcoord1 : TEXCOORD1;\n    float3 texcoord2 : TEXCOORD2;\n    float3 texcoord3 : TEXCOORD3;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0, temp1;\n    float2 temp2;\n    // def c11, 2, -1, 0.5, 1\n    // dcl_position v0\n    // dcl_texcoord v1\n    // dcl_position o0\n    // dcl_texcoord o1.xy\n    // dcl_texcoord1 o2\n    // dcl_texcoord2 o3.xyz\n    // dcl_texcoord3 o4.xyz\n    // dp4 r0.x, v0, c0\n    temp0.x = dot(i.position, (view_proj_matrix._m00_m10_m20_m30));\n    // mov r1.xz, c11\n    temp1.xz = float2(2, 0.5);\n    // mov r2.xy, c5\n    temp2.xy = vp_size.xy;\n    // mad r1.xy, c6, r1.x, r2\n    temp1.xy = vp_offset.xy * temp1.xx + temp2.xy;\n    // add r1.xy, r1, c11.y\n    temp1.xy = temp1.xy + float2(-1, -1);\n    // dp4 r0.w, v0, c3\n    temp0.w = dot(i.position, (view_proj_matrix._m03_m13_m23_m33));\n    // mul r1.xy, r1, r0.w\n    temp1.xy = temp1.xy * temp0.ww;\n    // mad r1.x, r0.x, c5.x, r1.x\n    temp1.x = temp0.x * vp_size.x + temp1.x;\n    // add r1.zw, r1.z, c4.xyxy\n    temp1.zw = temp1.zz + render_target_texel_offset.xy;\n    // add r2.x, r0.w, r0.w\n    temp2.x = temp0.w + temp0.w;\n    // mad o2.x, r2.x, r1.z, r1.x\n    o.texcoord1.x = temp2.x * temp1.z + temp1.x;\n    // dp4 r0.y, v0, c1\n    temp0.y = dot(i.position, (view_proj_matrix._m01_m11_m21_m31));\n    // mad r1.x, r0.y, -c5.y, r1.y\n    temp1.x = temp0.y * -vp_size.y + temp1.y;\n    // mad o2.y, r2.x, r1.w, r1.x\n    o.texcoord1.y = temp2.x * temp1.w + temp1.x;\n    // mov r1.x, c8.x\n    temp1.x = ref_near_focus_distance_min.x;\n    // add r1.x, r1.x, -c7.x\n    temp1.x = temp1.x + -ref_near_focus_distance_max.x;\n    // rcp o3.z, r1.x\n    o.texcoord2.z = 1.0f / temp1.x;\n    // mov r1.x, c9.x\n    temp1.x = ref_far_focus_distance_min.x;\n    // add r1.x, r1.x, -c10.x\n    temp1.x = temp1.x + -ref_far_focus_distance_max.x;\n    // rcp o4.z, r1.x\n    o.texcoord3.z = 1.0f / temp1.x;\n    // mov r0.z, c11.w\n    temp0.z = float1(1);\n    // mov o0, r0\n    o.position = temp0;\n    // mul o2.zw, r0, c11.xywx\n    o.texcoord1.zw = temp0.zw * float2(1, 2);\n    // mov o1.xy, v1\n    o.texcoord = i.texcoord;\n    // mov o3.x, c8.x\n    o.texcoord2.x = ref_near_focus_distance_min.x;\n    // mov o3.y, c7.x\n    o.texcoord2.y = ref_near_focus_distance_max.x;\n    // mov o4.x, c9.x\n    o.texcoord3.x = ref_far_focus_distance_min.x;\n    // mov o4.y, c10.x\n    o.texcoord3.y = ref_far_focus_distance_max.x;\n    // \n\n    return o;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."),(0,o.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"float camera_far_range : register(ps_3_0, c1);\nsampler2D depth : register(ps_3_0, s1);\nfloat ref_clamp : register(ps_3_0, c0);\nsampler2D ref_src_texture : register(ps_3_0, s0);\nstruct PixelMain_Input\n{\n    float2 texcoord : TEXCOORD;\n    float4 texcoord1 : TEXCOORD1;\n    float3 texcoord2 : TEXCOORD2;\n    float3 texcoord3 : TEXCOORD3;\n};\n\nfloat4 PixelMain(PixelMain_Input i) : COLOR\n{\n    float4 out_color;\n    float4 temp0;\n    float2 temp1;\n    // def c2, -0.001, 1, 0, 0\n    // dcl_texcoord v0.xy\n    // dcl_texcoord1 v1\n    // dcl_texcoord2 v2.xyz\n    // dcl_texcoord3 v3.xyz\n    // dcl_2d s0\n    // dcl_2d s1\n    // texld r0, v1, s1\n    temp0 = tex2D(depth, i.texcoord1.xy);\n    // add r0.y, r0.x, c2.x\n    temp0.y = temp0.x + float1(-0.001);\n    // cmp r0.x, r0.y, r0.x, c1.x\n    temp0.x = (temp0.y >= 0) ? temp0.x : camera_far_range.x;\n    // add r0.y, r0.x, -v3.y\n    temp0.y = temp0.x + -i.texcoord3.y;\n    // mad r0.y, r0.y, -v3.z, c2.y\n    temp0.y = temp0.y * -i.texcoord3.z + float1(1);\n    // add r0.zw, -r0.x, v3.xyyx\n    temp0.zw = -temp0.xx + i.texcoord3.yx;\n    // add r1.xy, r0.x, -v2.yxzw\n    temp1.xy = temp0.xx + -i.texcoord2.yx;\n    // cmp r0.x, r0.w, c2.z, r0.y\n    temp0.x = (temp0.w >= 0) ? float1(0) : temp0.y;\n    // mad r0.y, r1.x, -v2.z, c2.y\n    temp0.y = temp1.x * -i.texcoord2.z + float1(1);\n    // cmp r0.x, r1.y, r0.x, r0.y\n    temp0.x = (temp1.y >= 0) ? temp0.x : temp0.y;\n    // cmp r0.x, r1.x, r0.x, c2.y\n    temp0.x = (temp1.x >= 0) ? temp0.x : float1(1);\n    // cmp r0.x, r0.z, r0.x, c2.y\n    temp0.x = (temp0.z >= 0) ? temp0.x : float1(1);\n    // max r1.x, r0.x, c2.z\n    temp1.x = max(temp0.x, float1(0));\n    // min oC0.w, c0.x, r1.x\n    out_color.w = min(ref_clamp.x, temp1.x);\n    // texld_pp r0, v0, s0\n    temp0 = /* not implemented _pp modifier */ tex2D(ref_src_texture, i.texcoord.xy);\n    // mov_pp oC0.xyz, r0\n    out_color.xyz = /* not implemented _pp modifier */ temp0.xyz;\n    // \n\n    return out_color;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."))}i.isMDXComponent=!0}}]);