"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[57109],{3905:(e,r,t)=>{t.d(r,{Zo:()=>_,kt:()=>s});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function m(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=n.createContext({}),l=function(e){var r=n.useContext(d),t=r;return e&&(t="function"==typeof e?e(r):m(m({},r),e)),t},_=function(e){var r=l(e.components);return n.createElement(d.Provider,{value:r},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},x=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,_=i(e,["components","mdxType","originalType","parentName"]),c=l(t),x=a,s=c["".concat(d,".").concat(x)]||c[x]||p[x]||o;return t?n.createElement(s,m(m({ref:r},_),{},{components:t})):n.createElement(s,m({ref:r},_))}));function s(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,m=new Array(o);m[0]=x;var i={};for(var d in r)hasOwnProperty.call(r,d)&&(i[d]=r[d]);i.originalType=e,i[c]="string"==typeof e?e:a,m[1]=i;for(var l=2;l<o;l++)m[l]=t[l];return n.createElement.apply(null,m)}return n.createElement.apply(null,t)}x.displayName="MDXCreateElement"},14362:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>m,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=t(87462),a=(t(67294),t(3905));const o={id:0xe800ed5e7f3ea800,title:"Generic Shadow Caster Billboard Center Offset Billboard Up Axis Camera Facing Billboard Diffuse Texture Double Sided"},m="Generic Shadow Caster Billboard Center Offset Billboard Up Axis Camera Facing Billboard Diffuse Texture Double Sided",i={unversionedId:"Generated/Shaders/Base/[4300-4400]/16717622806916803000",id:"Generated/Shaders/Base/[4300-4400]/16717622806916803000",title:"Generic Shadow Caster Billboard Center Offset Billboard Up Axis Camera Facing Billboard Diffuse Texture Double Sided",description:"(genericBILLBOARDCENTEROFFSETCAMERAFACINGBILLBOARDDOUBLE_SIDED, 0xe800ed5e7f3ea80c)",source:"@site/docs/Generated/Shaders/Base/[4300-4400]/0xe800ed5e7f3ea80c.mdx",sourceDirName:"Generated/Shaders/Base/[4300-4400]",slug:"/Generated/Shaders/Base/[4300-4400]/16717622806916803000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[4300-4400]/16717622806916803000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/docs/Generated/Shaders/Base/[4300-4400]/0xe800ed5e7f3ea80c.mdx",tags:[],version:"current",frontMatter:{id:"16717622806916803000",title:"Generic Shadow Caster Billboard Center Offset Billboard Up Axis Camera Facing Billboard Diffuse Texture Double Sided"},sidebar:"docsSidebar",previous:{title:"Generic Default Cube Environment Mapping Diffuse Texture Rl Core Environment Vertex Color",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[4300-4400]/16706657465430893000"},next:{title:"Generic Shadow Caster Cube Environment Mapping Diffuse Texture Gloss Blurs Cubemap Gsma Texture Normalmap Skinned 1weight",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[4300-4400]/16718009358019707000"}},d={},l=[{value:"Technique <code>ambient</code>",id:"technique-ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],_={toc:l},c="wrapper";function p(e){let{components:r,...t}=e;return(0,a.kt)(c,(0,n.Z)({},_,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"generic-shadow-caster-billboard-center-offset-billboard-up-axis-camera-facing-billboard-diffuse-texture-double-sided"},"Generic Shadow Caster Billboard Center Offset Billboard Up Axis Camera Facing Billboard Diffuse Texture Double Sided"),(0,a.kt)("p",null,"(",(0,a.kt)("inlineCode",{parentName:"p"},"generic:shadow_caster:BILLBOARD_CENTER_OFFSET:BILLBOARD_UP_AXIS:CAMERA_FACING_BILLBOARD:DIFFUSE_TEXTURE:DOUBLE_SIDED"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0xe800ed5e7f3ea80c"),")"),(0,a.kt)("h3",{id:"technique-ambient"},"Technique ",(0,a.kt)("inlineCode",{parentName:"h3"},"ambient")),(0,a.kt)("h3",{id:"render-states"},"Render States"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 1,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 1,\n    D3DRS_COLORWRITEENABLE = 15,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 961656599,\n    D3DRS_SLOPESCALEDEPTHBIAS = 1075838976,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,a.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,a.kt)("h3",{id:"shaders"},"Shaders"),(0,a.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 camera_proj_matrix : register(vs_3_0, c4);\ncolumn_major float4x4 camera_view_matrix : register(vs_3_0, c0);\ncolumn_major float4x4 camera_world_matrix : register(vs_3_0, c8);\nfloat3 ref_billboard_center_offset : register(vs_3_0, c15);\nfloat3 ref_billboard_up_axis : register(vs_3_0, c14) = { 0, 1, 0 };\ncolumn_major float4x4 world_matrix : register(vs_3_0, c11);\nstruct VertexMain_Input\n{\n    float4 texcoord6 : TEXCOORD6;\n    float4 texcoord7 : TEXCOORD7;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float texcoord1 : TEXCOORD1;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0, temp1, temp2;\n    float3 temp3;\n    // def c16, 1, 0, 0, 0\n    // dcl_texcoord6 v0\n    // dcl_texcoord7 v1\n    // dcl_position o0\n    // dcl_texcoord1 o1.x\n    // mul r0.xy, c14, c14\n    temp0.xy = ref_billboard_up_axis.xy * ref_billboard_up_axis.xy;\n    // add r0.x, r0.y, r0.x\n    temp0.x = temp0.y + temp0.x;\n    // rsq r0.x, r0.x\n    temp0.x = 1 / sqrt(temp0.x);\n    // mul r0.xyz, r0.x, c14.yxyw\n    temp0.xyz = temp0.xxx * ref_billboard_up_axis.yxy;\n    // add r1.xyz, c15.xxyw, v1.xxyw\n    temp1.xyz = ref_billboard_center_offset.xxy + i.texcoord7.xxy;\n    // mul r0.xzw, r0.xyyz, r1.xyyz\n    temp0.xzw = temp0.xyz * temp1.xyz;\n    // mad r0.x, r1.z, -r0.y, r0.x\n    temp0.x = temp1.z * -temp0.y + temp0.x;\n    // add r0.y, r0.w, r0.z\n    temp0.y = temp0.w + temp0.z;\n    // mul r1.x, r0.x, c8.x\n    temp1.x = temp0.x * (camera_world_matrix._m00_m10_m20_m30).x;\n    // mul r1.y, r0.x, c9.x\n    temp1.y = temp0.x * (camera_world_matrix._m01_m11_m21_m31).x;\n    // mul r1.z, r0.x, c10.x\n    temp1.z = temp0.x * (camera_world_matrix._m02_m12_m22_m32).x;\n    // mad r2, v0.xyzx, c16.xxxy, c16.yyyx\n    temp2 = i.texcoord6.xyzx * float4(1, 1, 1, 0) + float4(0, 0, 0, 1);\n    // dp4 r3.x, r2, c11\n    temp3.x = dot(temp2, (world_matrix._m00_m10_m20_m30));\n    // dp4 r3.y, r2, c12\n    temp3.y = dot(temp2, (world_matrix._m01_m11_m21_m31));\n    // dp4 r3.z, r2, c13\n    temp3.z = dot(temp2, (world_matrix._m02_m12_m22_m32));\n    // add r0.xzw, r1.xyyz, r3.xyyz\n    temp0.xzw = temp1.xyz + temp3.xyz;\n    // mul r1.x, r0.y, c8.z\n    temp1.x = temp0.y * (camera_world_matrix._m00_m10_m20_m30).z;\n    // mul r1.y, r0.y, c9.z\n    temp1.y = temp0.y * (camera_world_matrix._m01_m11_m21_m31).z;\n    // mul r1.z, r0.y, c10.z\n    temp1.z = temp0.y * (camera_world_matrix._m02_m12_m22_m32).z;\n    // add r0.xyz, r0.xzww, r1\n    temp0.xyz = temp0.xzw + temp1.xyz;\n    // mov r0.w, c16.x\n    temp0.w = float1(1);\n    // dp4 r1.x, r0, c0\n    temp1.x = dot(temp0, (camera_view_matrix._m00_m10_m20_m30));\n    // dp4 r1.y, r0, c1\n    temp1.y = dot(temp0, (camera_view_matrix._m01_m11_m21_m31));\n    // dp4 r1.z, r0, c2\n    temp1.z = dot(temp0, (camera_view_matrix._m02_m12_m22_m32));\n    // dp4 r1.w, r0, c3\n    temp1.w = dot(temp0, (camera_view_matrix._m03_m13_m23_m33));\n    // dp4 o0.x, r1, c4\n    o.position.x = dot(temp1, (camera_proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, r1, c5\n    o.position.y = dot(temp1, (camera_proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.w, r1, c7\n    o.position.w = dot(temp1, (camera_proj_matrix._m03_m13_m23_m33));\n    // dp4 r0.x, r1, c6\n    temp0.x = dot(temp1, (camera_proj_matrix._m02_m12_m22_m32));\n    // mov o0.z, r0.x\n    o.position.z = temp0.x;\n    // mov o1.x, r0.x\n    o.texcoord1 = temp0.x;\n    // \n\n    return o;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."),(0,a.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"float4 PixelMain(float texcoord1 : TEXCOORD1) : COLOR\n{\n    float4 out_color;\n    // def c0, 1, 0, 0, 0\n    // dcl_texcoord1 v0.x\n    // mul oC0, c0.xyyy, v0.x\n    out_color = float4(1, 0, 0, 0) * texcoord1.x;\n    // \n\n    return out_color;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."))}p.isMDXComponent=!0}}]);