"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[32187],{603905:(e,t,r)=>{r.d(t,{Zo:()=>x,kt:()=>s});var n=r(667294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var m=n.createContext({}),p=function(e){var t=n.useContext(m),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},x=function(e){var t=p(e.components);return n.createElement(m.Provider,{value:t},e.children)},_="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},i=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,m=e.parentName,x=d(e,["components","mdxType","originalType","parentName"]),_=p(r),i=o,s=_["".concat(m,".").concat(i)]||_[i]||c[i]||a;return r?n.createElement(s,l(l({ref:t},x),{},{components:r})):n.createElement(s,l({ref:t},x))}));function s(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=i;var d={};for(var m in t)hasOwnProperty.call(t,m)&&(d[m]=t[m]);d.originalType=e,d[_]="string"==typeof e?e:o,l[1]=d;for(var p=2;p<a;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}i.displayName="MDXCreateElement"},281563:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>d,toc:()=>p});var n=r(487462),o=(r(667294),r(603905));const a={id:0x7c6cb7eb01875000,title:"Generic Default Blend Diffuse Blend Gsma Blend Mask Control Blend Mask Crossblend Blend Normal Diffuse Texture Gsma Texture Instanced Normalmap Vertex Color World Up Blend"},l="Generic Default Blend Diffuse Blend Gsma Blend Mask Control Blend Mask Crossblend Blend Normal Diffuse Texture Gsma Texture Instanced Normalmap Vertex Color World Up Blend",d={unversionedId:"Generated/Shaders/Base/[2300-2400]/8965743178158658000",id:"Generated/Shaders/Base/[2300-2400]/8965743178158658000",title:"Generic Default Blend Diffuse Blend Gsma Blend Mask Control Blend Mask Crossblend Blend Normal Diffuse Texture Gsma Texture Instanced Normalmap Vertex Color World Up Blend",description:"(genericBLENDDIFFUSEBLENDMASKCONTROLBLENDNORMALGSMATEXTURENORMALMAPWORLDUPBLEND, 0x7c6cb7eb01874ef3)",source:"@site/docs/Generated/Shaders/Base/[2300-2400]/0x7c6cb7eb01874ef3.mdx",sourceDirName:"Generated/Shaders/Base/[2300-2400]",slug:"/Generated/Shaders/Base/[2300-2400]/8965743178158658000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[2300-2400]/8965743178158658000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Base/[2300-2400]/0x7c6cb7eb01874ef3.mdx",tags:[],version:"current",frontMatter:{id:"8965743178158658000",title:"Generic Default Blend Diffuse Blend Gsma Blend Mask Control Blend Mask Crossblend Blend Normal Diffuse Texture Gsma Texture Instanced Normalmap Vertex Color World Up Blend"},sidebar:"docsSidebar",previous:{title:"Generic Shadow Caster Diffuse Texture Global Environment Mapping Gloss Blurs Cubemap Gsma Texture Normalmap",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[2300-2400]/8964247256319418000"},next:{title:"Generic Shadow Caster Ati Diffuse Texture Normalmap Skinned 1weight",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[2300-2400]/8966495069059451000"}},m={},p=[{value:"Technique <code>deferred_ambient</code>",id:"technique-deferred_ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Sampler 1",id:"sampler-1",level:4},{value:"Sampler 2",id:"sampler-2",level:4},{value:"Sampler 3",id:"sampler-3",level:4},{value:"Sampler 4",id:"sampler-4",level:4},{value:"Sampler 5",id:"sampler-5",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],x={toc:p},_="wrapper";function c(e){let{components:t,...r}=e;return(0,o.kt)(_,(0,n.Z)({},x,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"generic-default-blend-diffuse-blend-gsma-blend-mask-control-blend-mask-crossblend-blend-normal-diffuse-texture-gsma-texture-instanced-normalmap-vertex-color-world-up-blend"},"Generic Default Blend Diffuse Blend Gsma Blend Mask Control Blend Mask Crossblend Blend Normal Diffuse Texture Gsma Texture Instanced Normalmap Vertex Color World Up Blend"),(0,o.kt)("p",null,"(",(0,o.kt)("inlineCode",{parentName:"p"},"generic:default:BLEND_DIFFUSE:BLEND_GSMA:BLEND_MASK_CONTROL:BLEND_MASK_CROSSBLEND:BLEND_NORMAL:DIFFUSE_TEXTURE:GSMA_TEXTURE:INSTANCED:NORMALMAP:VERTEX_COLOR:WORLD_UP_BLEND"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"0x7c6cb7eb01874ef3"),")"),(0,o.kt)("p",null,"This template is referenced 1 time by ",(0,o.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/base.render_template_database#generic-blend-diffuse-blend-gsma-blend-mask-control-blend-mask-crossblend-blend-normal-diffuse-texture-gsma-texture-instanced-normalmap-vertex-color-world-up-blend"},"generic:BLEND_DIFFUSE:BLEND_GSMA:BLEND_MASK_CONTROL:BLEND_MASK_CROSSBLEND:BLEND_NORMAL:DIFFUSE_TEXTURE:GSMA_TEXTURE:INSTANCED:NORMALMAP:VERTEX_COLOR:WORLD_UP_BLEND"),".\nThis template uses the following inputs:\n|Name|UI Name|Type|\n|---|---|---|\n|diffuse_texture|Diffuse Texture (UV1)|texture|\n|diffuse_layer0_texture|Second diffuse (Shifted UV1)|texture|\n|material_texture|Gloss-Spec-Material-Alpha Texture (GSMA)|texture|\n|diffuse_layer2_texture|Second Gloss-Spec-Material-Alpha Texture (GSMA)|texture|\n|bump_normal_texture|Normal map (UV2 else UV1)|texture|\n|normal_layer0_texture|Second normal map (UV1)|texture|\n|blend_control|Blending Smoothing, Blend mask Bias|vector3|\n|world_up_blend_bias|World up blend bias|scalar|."),(0,o.kt)("h3",{id:"technique-deferred_ambient"},"Technique ",(0,o.kt)("inlineCode",{parentName:"h3"},"deferred_ambient")),(0,o.kt)("h3",{id:"render-states"},"Render States"),(0,o.kt)("p",null,"More info can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 1,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 2,\n    D3DRS_COLORWRITEENABLE = 15,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,o.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,o.kt)("p",null,"More info can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,o.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h4",{id:"sampler-1"},"Sampler 1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h4",{id:"sampler-2"},"Sampler 2"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h4",{id:"sampler-3"},"Sampler 3"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h4",{id:"sampler-4"},"Sampler 4"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h4",{id:"sampler-5"},"Sampler 5"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h3",{id:"shaders"},"Shaders"),(0,o.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"float camera_near_range : register(vs_3_0, c204);\ncolumn_major float4x4 ref_world_tm[50] : register(vs_3_0, c0);\nfloat ref_world_up_blend_bias : register(vs_3_0, c205);\ncolumn_major float4x4 view_proj_matrix : register(vs_3_0, c200);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 normal : NORMAL;\n    float4 texcoord1 : TEXCOORD1;\n    float4 texcoord : TEXCOORD;\n    float4 tangent : TANGENT;\n    float4 binormal : BINORMAL;\n    float4 position1 : POSITION1;\n    float4 color : COLOR;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float texcoord1 : TEXCOORD1;\n    float texcoord7 : TEXCOORD7;\n    float4 texcoord : TEXCOORD;\n    float3 texcoord2 : TEXCOORD2;\n    float3 texcoord3 : TEXCOORD3;\n    float3 texcoord4 : TEXCOORD4;\n    float4 color : COLOR;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0, temp1;\n    float addr0;\n    // def c206, 2, -1, 4, -0\n    // dcl_position v0\n    // dcl_normal v1\n    // dcl_texcoord1 v2\n    // dcl_texcoord v3\n    // dcl_tangent v4\n    // dcl_binormal v5\n    // dcl_position1 v6\n    // dcl_color v7\n    // dcl_position o0\n    // dcl_texcoord1 o1.x\n    // dcl_texcoord7 o2.x\n    // dcl_texcoord o3\n    // dcl_texcoord2 o4.xyz\n    // dcl_texcoord3 o5.xyz\n    // dcl_texcoord4 o6.xyz\n    // dcl_color o7\n    // mad r0, v0.xyzx, -c206.yyyw, -c206.wwwy\n    temp0 = i.position.xyzx * float4(1, 1, 1, 0) + float4(0, 0, 0, 1);\n    // frc r1.x, v6.x\n    temp1.x = frac(i.position1.x);\n    // add r1.x, -r1.x, v6.x\n    temp1.x = -temp1.x + i.position1.x;\n    // mul r1.x, r1.x, c206.z\n    temp1.x = temp1.x * float1(4);\n    // mova a0.x, r1.x\n    addr0.x = temp1.x;\n    // dp4 r1.x, r0, c0[a0.x]\n    temp1.x = dot(temp0, (ref_world_tm[0 + (addr0.x / 4)]._m00_m10_m20_m30));\n    // dp4 r1.y, r0, c1[a0.x]\n    temp1.y = dot(temp0, (ref_world_tm[0 + (addr0.x / 4)]._m01_m11_m21_m31));\n    // dp4 r1.z, r0, c2[a0.x]\n    temp1.z = dot(temp0, (ref_world_tm[0 + (addr0.x / 4)]._m02_m12_m22_m32));\n    // dp4 r1.w, r0, c3[a0.x]\n    temp1.w = dot(temp0, (ref_world_tm[0 + (addr0.x / 4)]._m03_m13_m23_m33));\n    // dp4 o0.x, r1, c200\n    o.position.x = dot(temp1, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, r1, c201\n    o.position.y = dot(temp1, (view_proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.w, r1, c203\n    o.position.w = dot(temp1, (view_proj_matrix._m03_m13_m23_m33));\n    // dp4 r0.x, r1, c202\n    temp0.x = dot(temp1, (view_proj_matrix._m02_m12_m22_m32));\n    // add o1.x, r0.x, c204.x\n    o.texcoord1 = temp0.x + camera_near_range.x;\n    // mov o0.z, r0.x\n    o.position.z = temp0.x;\n    // mad r0.xyz, v4, c206.x, c206.y\n    temp0.xyz = i.tangent.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 o4.x, r0, c0[a0.x]\n    o.texcoord2.x = dot(temp0.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m00_m10_m20_m30).xyz);\n    // dp3 o5.x, r0, c1[a0.x]\n    o.texcoord3.x = dot(temp0.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m01_m11_m21_m31).xyz);\n    // dp3 r0.x, r0, c2[a0.x]\n    temp0.x = dot(temp0.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m02_m12_m22_m32).xyz);\n    // mad r1.xyz, v5, c206.x, c206.y\n    temp1.xyz = i.binormal.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 o4.y, -r1, c0[a0.x]\n    o.texcoord2.y = dot(-temp1.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m00_m10_m20_m30).xyz);\n    // dp3 o5.y, -r1, c1[a0.x]\n    o.texcoord3.y = dot(-temp1.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m01_m11_m21_m31).xyz);\n    // dp3 r0.y, -r1, c2[a0.x]\n    temp0.y = dot(-temp1.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m02_m12_m22_m32).xyz);\n    // mad r1.xyz, v1, c206.x, c206.y\n    temp1.xyz = i.normal.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 o4.z, r1, c0[a0.x]\n    o.texcoord2.z = dot(temp1.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m00_m10_m20_m30).xyz);\n    // dp3 o5.z, r1, c1[a0.x]\n    o.texcoord3.z = dot(temp1.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m01_m11_m21_m31).xyz);\n    // dp3 r0.z, r1, c2[a0.x]\n    temp0.z = dot(temp1.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m02_m12_m22_m32).xyz);\n    // dp3 r0.w, r0, r0\n    temp0.w = dot(temp0.xyz, temp0.xyz);\n    // mov o6.xyz, r0\n    o.texcoord4 = temp0;\n    // rsq r0.x, r0.w\n    temp0.x = 1 / sqrt(temp0.w);\n    // mad r0.x, r0.z, -r0.x, -c206.y\n    temp0.x = temp0.z * -temp0.x + float1(1);\n    // pow r1.x, r0.x, c205.x\n    temp1.x = pow(temp0.x, ref_world_up_blend_bias.x);\n    // min o2.x, r1.x, -c206.y\n    o.texcoord7 = min(temp1.x, float4(1, 1, 1, 1));\n    // mov o3.xy, v3\n    o.texcoord.xy = i.texcoord.xy;\n    // mov o3.zw, v2.xyxy\n    o.texcoord.zw = i.texcoord1.xy;\n    // mul o7, c206_abs.xxxy, v7\n    o.color = float4(2, 2, 2, 1) * i.color;\n    // \n\n    return o;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."),(0,o.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D bump_normal_texture : register(ps_3_0, s4);\nsampler2D diffuse_layer0_texture : register(ps_3_0, s1);\nsampler2D diffuse_layer2_texture : register(ps_3_0, s3);\nsampler2D diffuse_texture : register(ps_3_0, s0);\nsampler2D material_texture : register(ps_3_0, s2);\nsampler2D normal_layer0_texture : register(ps_3_0, s5);\nfloat2 ref_blend_control : register(ps_3_0, c0);\nstruct PixelMain_Input\n{\n    float texcoord1 : TEXCOORD1;\n    float texcoord7 : TEXCOORD7;\n    float2 texcoord : TEXCOORD;\n    float3 texcoord2 : TEXCOORD2;\n    float3 texcoord3 : TEXCOORD3;\n    float3 texcoord4 : TEXCOORD4;\n    float3 color : COLOR;\n};\n\nstruct PixelMain_Output\n{\n    float4 color1 : COLOR1;\n    float4 color : COLOR;\n    float4 color2 : COLOR2;\n};\n\nPixelMain_Output PixelMain(PixelMain_Input i)\n{\n    PixelMain_Output o;\n    float4 temp0, temp1, temp2, temp3;\n    // def c1, 1, -0.5, 2, 0.5\n    // dcl_texcoord1 v0.x\n    // dcl_texcoord7_pp v1.x\n    // dcl_texcoord v2.xy\n    // dcl_texcoord2 v3.xyz\n    // dcl_texcoord3 v4.xyz\n    // dcl_texcoord4 v5.xyz\n    // dcl_color v6.xyz\n    // dcl_2d s0\n    // dcl_2d s1\n    // dcl_2d s2\n    // dcl_2d s3\n    // dcl_2d s4\n    // dcl_2d s5\n    // texld_pp r0, v2, s1\n    temp0 = /* not implemented _pp modifier */ tex2D(diffuse_layer0_texture, i.texcoord.xy);\n    // add_pp r0.w, -r0.w, c1.x\n    temp0.w = /* not implemented _pp modifier */ -temp0.w + float1(1);\n    // texld_pp r1, v2, s0\n    temp1 = /* not implemented _pp modifier */ tex2D(diffuse_texture, i.texcoord.xy);\n    // lrp_pp r2.x, c0.y, r0.w, r1.w\n    temp2.x = /* not implemented _pp modifier */ lerp(temp1.w, temp0.w, ref_blend_control.y);\n    // add_pp r0.w, r2.x, -v1.x\n    temp0.w = /* not implemented _pp modifier */ temp2.x + -i.texcoord7.x;\n    // rcp r1.w, c0.x\n    temp1.w = 1.0f / ref_blend_control.x;\n    // mul_sat_pp r0.w, r0.w, r1.w\n    ;// error\n    // texld_pp r2, v2, s2\n    temp2 = /* not implemented _pp modifier */ tex2D(material_texture, i.texcoord.xy);\n    // texld r3, v2, s3\n    temp3 = tex2D(diffuse_layer2_texture, i.texcoord.xy);\n    // add r2.xy, r2.yxzw, -r3.yxzw\n    temp2.xy = temp2.yx + -temp3.yx;\n    // mad_pp oC1.w, r0.w, r2.x, r3.y\n    o.color1.w = /* not implemented _pp modifier */ temp0.w * temp2.x + temp3.y;\n    // mad oC0.w, r0.w, r2.y, r3.x\n    o.color.w = temp0.w * temp2.y + temp3.x;\n    // lrp_pp r2.xyz, r0.w, r1, r0\n    temp2.xyz = /* not implemented _pp modifier */ lerp(temp0.xyz, temp1.xyz, temp0.www);\n    // mul_pp oC0.xyz, r2, v6\n    o.color.xyz = /* not implemented _pp modifier */ temp2.xyz * i.color.xyz;\n    // texld r1, v2, s4\n    temp1 = tex2D(bump_normal_texture, i.texcoord.xy);\n    // mov r1.xy, r1.wyzw\n    temp1.xy = temp1.wy;\n    // texld r2, v2, s5\n    temp2 = tex2D(normal_layer0_texture, i.texcoord.xy);\n    // mov r1.zw, r2.xywy\n    temp1.zw = temp2.wy;\n    // add r1, r1, c1.y\n    temp1 = temp1 + float4(-0.5, -0.5, -0.5, -0.5);\n    // add r0.xy, r1.zwzw, r1.zwzw\n    temp0.xy = temp1.zw + temp1.zw;\n    // mad r1.xy, r1, c1.z, -r0\n    temp1.xy = temp1.xy * float2(2, 2) + -temp0.xy;\n    // mad r0.xy, r0.w, r1, r0\n    temp0.xy = temp0.ww * temp1.xy + temp0.xy;\n    // mul r0.w, r0.x, r0.x\n    temp0.w = temp0.x * temp0.x;\n    // mad r0.w, r0.y, r0.y, -r0.w\n    temp0.w = temp0.y * temp0.y + -temp0.w;\n    // add r0.w, -r0.w, c1.x\n    temp0.w = -temp0.w + float1(1);\n    // rsq r0.w, r0.w\n    temp0.w = 1 / sqrt(temp0.w);\n    // rcp r0.z, r0.w\n    temp0.z = 1.0f / temp0.w;\n    // dp3 r1.x, r0, v3\n    temp1.x = dot(temp0.xyz, i.texcoord2.xyz);\n    // dp3 r1.y, r0, v4\n    temp1.y = dot(temp0.xyz, i.texcoord3.xyz);\n    // dp3 r1.z, r0, v5\n    temp1.z = dot(temp0.xyz, i.texcoord4.xyz);\n    // nrm_pp r0.xyz, r1\n    temp0.xyz = /* not implemented _pp modifier */ normalize(temp1.xyz).xyz;\n    // mad_pp oC1.xyz, r0, c1.w, c1.w\n    o.color1.xyz = /* not implemented _pp modifier */ temp0.xyz * float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5);\n    // mov oC2, v0.x\n    o.color2 = i.texcoord1.x;\n    // \n\n    return o;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."))}c.isMDXComponent=!0}}]);