"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[30618],{603905:(e,t,r)=>{r.d(t,{Zo:()=>_,kt:()=>D});var n=r(667294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function m(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?m(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):m(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},m=Object.keys(e);for(n=0;n<m.length;n++)r=m[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(n=0;n<m.length;n++)r=m[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},_=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},i="mdxType",x={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,m=e.originalType,l=e.parentName,_=p(e,["components","mdxType","originalType","parentName"]),i=d(r),c=o,D=i["".concat(l,".").concat(c)]||i[c]||x[c]||m;return r?n.createElement(D,a(a({ref:t},_),{},{components:r})):n.createElement(D,a({ref:t},_))}));function D(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var m=r.length,a=new Array(m);a[0]=c;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[i]="string"==typeof e?e:o,a[1]=p;for(var d=2;d<m;d++)a[d]=r[d];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},973490:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>x,frontMatter:()=>m,metadata:()=>p,toc:()=>d});var n=r(487462),o=(r(667294),r(603905));const m={id:0xb35286b88cf84000,title:"Generic Default Blend Diffuse Blend Gsma Blend Mask Seperate Blend Normal Blend Smooth Cube Environment Mapping Diffuse Texture Gsma Texture Normalmap Vertex Color"},a="Generic Default Blend Diffuse Blend Gsma Blend Mask Seperate Blend Normal Blend Smooth Cube Environment Mapping Diffuse Texture Gsma Texture Normalmap Vertex Color",p={unversionedId:"Generated/Shaders/Base/[3300-3400]/12921538408076558000",id:"Generated/Shaders/Base/[3300-3400]/12921538408076558000",title:"Generic Default Blend Diffuse Blend Gsma Blend Mask Seperate Blend Normal Blend Smooth Cube Environment Mapping Diffuse Texture Gsma Texture Normalmap Vertex Color",description:"(genericBLENDDIFFUSEBLENDMASKSEPERATEBLENDSMOOTHDIFFUSETEXTURENORMALMAP:VERTEX_COLOR, 0xb35286b88cf83d35)",source:"@site/docs/Generated/Shaders/Base/[3300-3400]/0xb35286b88cf83d35.mdx",sourceDirName:"Generated/Shaders/Base/[3300-3400]",slug:"/Generated/Shaders/Base/[3300-3400]/12921538408076558000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3300-3400]/12921538408076558000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Base/[3300-3400]/0xb35286b88cf83d35.mdx",tags:[],version:"current",frontMatter:{id:"12921538408076558000",title:"Generic Default Blend Diffuse Blend Gsma Blend Mask Seperate Blend Normal Blend Smooth Cube Environment Mapping Diffuse Texture Gsma Texture Normalmap Vertex Color"},sidebar:"docsSidebar",previous:{title:"Generic Shadow Caster Diffuse Texture Normalmap Nvidia Skinned 2weights",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3300-3400]/12921387042822992000"},next:{title:"Generic Shadow Caster Depth Scaling Diffuse Texture Normalmap Nvidia Vertex Color Vertex Color Alpha",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3300-3400]/12925174882250815000"}},l={},d=[{value:"Technique <code>deferred_ambient</code>",id:"technique-deferred_ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Sampler 1",id:"sampler-1",level:4},{value:"Sampler 2",id:"sampler-2",level:4},{value:"Sampler 3",id:"sampler-3",level:4},{value:"Sampler 4",id:"sampler-4",level:4},{value:"Sampler 5",id:"sampler-5",level:4},{value:"Sampler 6",id:"sampler-6",level:4},{value:"Sampler 7",id:"sampler-7",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],_={toc:d},i="wrapper";function x(e){let{components:t,...r}=e;return(0,o.kt)(i,(0,n.Z)({},_,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"generic-default-blend-diffuse-blend-gsma-blend-mask-seperate-blend-normal-blend-smooth-cube-environment-mapping-diffuse-texture-gsma-texture-normalmap-vertex-color"},"Generic Default Blend Diffuse Blend Gsma Blend Mask Seperate Blend Normal Blend Smooth Cube Environment Mapping Diffuse Texture Gsma Texture Normalmap Vertex Color"),(0,o.kt)("p",null,"(",(0,o.kt)("inlineCode",{parentName:"p"},"generic:default:BLEND_DIFFUSE:BLEND_GSMA:BLEND_MASK_SEPERATE:BLEND_NORMAL:BLEND_SMOOTH:CUBE_ENVIRONMENT_MAPPING:DIFFUSE_TEXTURE:GSMA_TEXTURE:NORMALMAP:VERTEX_COLOR"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"0xb35286b88cf83d35"),")"),(0,o.kt)("p",null,"This template is referenced 1 time by ",(0,o.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/base.render_template_database#generic-blend-diffuse-blend-gsma-blend-mask-seperate-blend-normal-blend-smooth-cube-environment-mapping-diffuse-texture-gsma-texture-normalmap-vertex-color"},"generic:BLEND_DIFFUSE:BLEND_GSMA:BLEND_MASK_SEPERATE:BLEND_NORMAL:BLEND_SMOOTH:CUBE_ENVIRONMENT_MAPPING:DIFFUSE_TEXTURE:GSMA_TEXTURE:NORMALMAP:VERTEX_COLOR"),".\nThis template uses the following inputs:\n|Name|UI Name|Type|\n|---|---|---|\n|diffuse_texture|Diffuse Texture (UV1)|texture|\n|diffuse_layer0_texture|Second diffuse (Shifted UV1)|texture|\n|diffuse_layer1_texture|Seperate blend mask (UV1)|texture|\n|material_texture|Gloss-Spec-Material-Alpha Texture (GSMA)|texture|\n|diffuse_layer2_texture|Second Gloss-Spec-Material-Alpha Texture (GSMA)|texture|\n|bump_normal_texture|Normal map (UV2 else UV1)|texture|\n|normal_layer0_texture|Second normal map (UV1)|texture|\n|reflection_texture|Reflection Cube|texture|."),(0,o.kt)("h3",{id:"technique-deferred_ambient"},"Technique ",(0,o.kt)("inlineCode",{parentName:"h3"},"deferred_ambient")),(0,o.kt)("h3",{id:"render-states"},"Render States"),(0,o.kt)("p",null,"More info can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 1,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 2,\n    D3DRS_COLORWRITEENABLE = 15,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,o.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,o.kt)("p",null,"More info can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,o.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h4",{id:"sampler-1"},"Sampler 1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h4",{id:"sampler-2"},"Sampler 2"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h4",{id:"sampler-3"},"Sampler 3"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h4",{id:"sampler-4"},"Sampler 4"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h4",{id:"sampler-5"},"Sampler 5"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h4",{id:"sampler-6"},"Sampler 6"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h4",{id:"sampler-7"},"Sampler 7"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h3",{id:"shaders"},"Shaders"),(0,o.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"float camera_near_range : register(vs_3_0, c12);\ncolumn_major float4x4 proj_matrix : register(vs_3_0, c8);\ncolumn_major float4x4 view_matrix : register(vs_3_0, c4);\ncolumn_major float4x4 world_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 normal : NORMAL;\n    float4 texcoord1 : TEXCOORD1;\n    float4 texcoord : TEXCOORD;\n    float4 tangent : TANGENT;\n    float4 binormal : BINORMAL;\n    float4 color : COLOR;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float texcoord1 : TEXCOORD1;\n    float4 texcoord : TEXCOORD;\n    float3 texcoord2 : TEXCOORD2;\n    float3 texcoord3 : TEXCOORD3;\n    float3 texcoord4 : TEXCOORD4;\n    float3 texcoord5 : TEXCOORD5;\n    float4 color : COLOR;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0, temp1;\n    // def c13, 2, -1, 1, 0\n    // dcl_position v0\n    // dcl_normal v1\n    // dcl_texcoord1 v2\n    // dcl_texcoord v3\n    // dcl_tangent v4\n    // dcl_binormal v5\n    // dcl_color v6\n    // dcl_position o0\n    // dcl_texcoord1 o1.x\n    // dcl_texcoord o2\n    // dcl_texcoord2 o3.xyz\n    // dcl_texcoord3 o4.xyz\n    // dcl_texcoord4 o5.xyz\n    // dcl_texcoord5 o6.xyz\n    // dcl_color o7\n    // dp4 r0.w, v0, c3\n    temp0.w = dot(i.position, (world_matrix._m03_m13_m23_m33));\n    // dp4 r0.x, v0, c0\n    temp0.x = dot(i.position, (world_matrix._m00_m10_m20_m30));\n    // dp4 r0.y, v0, c1\n    temp0.y = dot(i.position, (world_matrix._m01_m11_m21_m31));\n    // dp4 r0.z, v0, c2\n    temp0.z = dot(i.position, (world_matrix._m02_m12_m22_m32));\n    // dp4 r1.x, r0, c4\n    temp1.x = dot(temp0, (view_matrix._m00_m10_m20_m30));\n    // dp4 r1.y, r0, c5\n    temp1.y = dot(temp0, (view_matrix._m01_m11_m21_m31));\n    // dp4 r1.z, r0, c6\n    temp1.z = dot(temp0, (view_matrix._m02_m12_m22_m32));\n    // dp4 r1.w, r0, c7\n    temp1.w = dot(temp0, (view_matrix._m03_m13_m23_m33));\n    // mov o6.xyz, r0\n    o.texcoord5 = temp0;\n    // dp4 o0.x, r1, c8\n    o.position.x = dot(temp1, (proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, r1, c9\n    o.position.y = dot(temp1, (proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.w, r1, c11\n    o.position.w = dot(temp1, (proj_matrix._m03_m13_m23_m33));\n    // dp4 r0.x, r1, c10\n    temp0.x = dot(temp1, (proj_matrix._m02_m12_m22_m32));\n    // add o1.x, r0.x, c12.x\n    o.texcoord1 = temp0.x + camera_near_range.x;\n    // mov o0.z, r0.x\n    o.position.z = temp0.x;\n    // mad r0.xyz, v4, c13.x, c13.y\n    temp0.xyz = i.tangent.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 o3.x, r0, c0\n    o.texcoord2.x = dot(temp0.xyz, (world_matrix._m00_m10_m20_m30).xyz);\n    // dp3 o4.x, r0, c1\n    o.texcoord3.x = dot(temp0.xyz, (world_matrix._m01_m11_m21_m31).xyz);\n    // dp3 o5.x, r0, c2\n    o.texcoord4.x = dot(temp0.xyz, (world_matrix._m02_m12_m22_m32).xyz);\n    // mad r0.xyz, v5, c13.x, c13.y\n    temp0.xyz = i.binormal.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 o3.y, -r0, c0\n    o.texcoord2.y = dot(-temp0.xyz, (world_matrix._m00_m10_m20_m30).xyz);\n    // dp3 o4.y, -r0, c1\n    o.texcoord3.y = dot(-temp0.xyz, (world_matrix._m01_m11_m21_m31).xyz);\n    // dp3 o5.y, -r0, c2\n    o.texcoord4.y = dot(-temp0.xyz, (world_matrix._m02_m12_m22_m32).xyz);\n    // mad r0.xyz, v1, c13.x, c13.y\n    temp0.xyz = i.normal.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 o3.z, r0, c0\n    o.texcoord2.z = dot(temp0.xyz, (world_matrix._m00_m10_m20_m30).xyz);\n    // dp3 o4.z, r0, c1\n    o.texcoord3.z = dot(temp0.xyz, (world_matrix._m01_m11_m21_m31).xyz);\n    // dp3 o5.z, r0, c2\n    o.texcoord4.z = dot(temp0.xyz, (world_matrix._m02_m12_m22_m32).xyz);\n    // mov o2.xy, v3\n    o.texcoord.xy = i.texcoord.xy;\n    // mov o2.zw, v2.xyxy\n    o.texcoord.zw = i.texcoord1.xy;\n    // mul o7, c13.xxxz, v6\n    o.color = float4(2, 2, 2, 1) * i.color;\n    // \n\n    return o;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."),(0,o.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D bump_normal_texture : register(ps_3_0, s5);\ncolumn_major float4x4 camera_world_matrix : register(ps_3_0, c0);\nsampler2D diffuse_layer0_texture : register(ps_3_0, s1);\nsampler2D diffuse_layer1_texture : register(ps_3_0, s2);\nsampler2D diffuse_layer2_texture : register(ps_3_0, s4);\nsampler2D diffuse_texture : register(ps_3_0, s0);\nsampler2D material_texture : register(ps_3_0, s3);\nsampler2D normal_layer0_texture : register(ps_3_0, s6);\nsamplerCUBE reflection_texture : register(ps_3_0, s7);\nstruct PixelMain_Input\n{\n    float texcoord1 : TEXCOORD1;\n    float2 texcoord : TEXCOORD;\n    float3 texcoord2 : TEXCOORD2;\n    float3 texcoord3 : TEXCOORD3;\n    float3 texcoord4 : TEXCOORD4;\n    float3 texcoord5 : TEXCOORD5;\n    float4 color : COLOR;\n};\n\nstruct PixelMain_Output\n{\n    float4 color : COLOR;\n    float4 color1 : COLOR1;\n    float4 color2 : COLOR2;\n};\n\nPixelMain_Output PixelMain(PixelMain_Input i)\n{\n    PixelMain_Output o;\n    float4 temp0, temp1, temp2;\n    float3 temp3, temp4;\n    // def c3, 5, -0.5, 2, 1\n    // def c4, 0.25, 0, 0, 0\n    // dcl_texcoord1 v0.x\n    // dcl_texcoord v1.xy\n    // dcl_texcoord2 v2.xyz\n    // dcl_texcoord3 v3.xyz\n    // dcl_texcoord4 v4.xyz\n    // dcl_texcoord5 v5.xyz\n    // dcl_color_pp v6\n    // dcl_2d s0\n    // dcl_2d s1\n    // dcl_2d s2\n    // dcl_2d s3\n    // dcl_2d s4\n    // dcl_2d s5\n    // dcl_2d s6\n    // dcl_cube s7\n    // texld_pp r0, v1, s2\n    temp0 = /* not implemented _pp modifier */ tex2D(diffuse_layer1_texture, i.texcoord.xy);\n    // add_pp r0.x, r0.y, -v6.w\n    temp0.x = /* not implemented _pp modifier */ temp0.y + -i.color.w;\n    // mul_sat_pp r0.x, r0.x, c3.x\n    ;// error\n    // texld_pp r1, v1, s3\n    temp1 = /* not implemented _pp modifier */ tex2D(material_texture, i.texcoord.xy);\n    // texld r2, v1, s4\n    temp2 = tex2D(diffuse_layer2_texture, i.texcoord.xy);\n    // add r0.y, r1.x, -r2.x\n    temp0.y = temp1.x + -temp2.x;\n    // lrp_pp r3.x, r0.x, r1.y, r2.y\n    temp3.x = /* not implemented _pp modifier */ lerp(temp2.y, temp1.y, temp0.x);\n    // mad oC0.w, r0.x, r0.y, r2.x\n    o.color.w = temp0.x * temp0.y + temp2.x;\n    // texld r1, v1, s5\n    temp1 = tex2D(bump_normal_texture, i.texcoord.xy);\n    // mov r1.xy, r1.wyzw\n    temp1.xy = temp1.wy;\n    // texld r2, v1, s6\n    temp2 = tex2D(normal_layer0_texture, i.texcoord.xy);\n    // mov r1.zw, r2.xywy\n    temp1.zw = temp2.wy;\n    // add r1, r1, c3.y\n    temp1 = temp1 + float4(-0.5, -0.5, -0.5, -0.5);\n    // add r0.yz, r1.xzww, r1.xzww\n    temp0.yz = temp1.zw + temp1.zw;\n    // mad r1.xy, r1, c3.z, -r0.yzzw\n    temp1.xy = temp1.xy * float2(2, 2) + -temp0.yz;\n    // mad r1.xy, r0.x, r1, r0.yzzw\n    temp1.xy = temp0.xx * temp1.xy + temp0.yz;\n    // mul r0.y, r1.x, r1.x\n    temp0.y = temp1.x * temp1.x;\n    // mad r0.y, r1.y, r1.y, -r0.y\n    temp0.y = temp1.y * temp1.y + -temp0.y;\n    // add r0.y, -r0.y, c3.w\n    temp0.y = -temp0.y + float1(1);\n    // rsq r0.y, r0.y\n    temp0.y = 1 / sqrt(temp0.y);\n    // rcp r1.z, r0.y\n    temp1.z = 1.0f / temp0.y;\n    // dp3 r2.x, r1, v2\n    temp2.x = dot(temp1.xyz, i.texcoord2.xyz);\n    // dp3 r2.y, r1, v3\n    temp2.y = dot(temp1.xyz, i.texcoord3.xyz);\n    // dp3 r2.z, r1, v4\n    temp2.z = dot(temp1.xyz, i.texcoord4.xyz);\n    // nrm_pp r1.xyz, r2\n    temp1.xyz = /* not implemented _pp modifier */ normalize(temp2.xyz).xyz;\n    // add r2.x, c0.w, -v5.x\n    temp2.x = (camera_world_matrix._m00_m10_m20_m30).w + -i.texcoord5.x;\n    // add r2.y, c1.w, -v5.y\n    temp2.y = (camera_world_matrix._m01_m11_m21_m31).w + -i.texcoord5.y;\n    // add r2.z, c2.w, -v5.z\n    temp2.z = (camera_world_matrix._m02_m12_m22_m32).w + -i.texcoord5.z;\n    // nrm r4.xyz, r2\n    temp4.xyz = normalize(temp2.xyz).xyz;\n    // dp3 r0.y, r1, r4\n    temp0.y = dot(temp1.xyz, temp4.xyz);\n    // add r0.z, r0.y, r0.y\n    temp0.z = temp0.y + temp0.y;\n    // mov_sat r0.y, r0.y\n    temp0.y = saturate(temp0.y);\n    // add r0.y, -r0.y, c3.w\n    temp0.y = -temp0.y + float1(1);\n    // dp2add r0.y, r0.y, r0.y, c4.x\n    temp0.y = dot(temp0.yy, temp0.yy) + float1(0.25);\n    // mul r0.y, r3.x, r0.y\n    temp0.y = temp3.x * temp0.y;\n    // mov_pp oC1.w, r3.x\n    o.color1.w = /* not implemented _pp modifier */ temp3.x;\n    // mad r2.xyz, r0.z, -r1, r4\n    temp2.xyz = temp0.zzz * -temp1.xyz + temp4.xyz;\n    // mad_pp oC1.xyz, r1, -c3.y, -c3.y\n    o.color1.xyz = /* not implemented _pp modifier */ temp1.xyz * float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5);\n    // texld r1, r2, s7\n    temp1 = texCUBE(reflection_texture, temp2.xyz);\n    // mul r0.yzw, r0.y, r1.xxyz\n    temp0.yzw = temp0.yyy * temp1.xyz;\n    // texld_pp r1, v1, s0\n    temp1 = /* not implemented _pp modifier */ tex2D(diffuse_texture, i.texcoord.xy);\n    // texld_pp r2, v1, s1\n    temp2 = /* not implemented _pp modifier */ tex2D(diffuse_layer0_texture, i.texcoord.xy);\n    // lrp_pp r3.xyz, r0.x, r1, r2\n    temp3.xyz = /* not implemented _pp modifier */ lerp(temp2.xyz, temp1.xyz, temp0.xxx);\n    // mad_pp oC0.xyz, r3, v6, r0.yzww\n    o.color.xyz = /* not implemented _pp modifier */ temp3.xyz * i.color.xyz + temp0.yzw;\n    // mov oC2, v0.x\n    o.color2 = i.texcoord1.x;\n    // \n\n    return o;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."))}x.isMDXComponent=!0}}]);