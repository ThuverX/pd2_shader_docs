"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[1011],{3905:(e,r,t)=>{t.d(r,{Zo:()=>m,kt:()=>_});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=n.createContext({}),d=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):p(p({},r),e)),t},m=function(e){var r=d(e.components);return n.createElement(i.Provider,{value:r},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},x=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),s=d(t),x=a,_=s["".concat(i,".").concat(x)]||s[x]||c[x]||o;return t?n.createElement(_,p(p({ref:r},m),{},{components:t})):n.createElement(_,p({ref:r},m))}));function _(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,p=new Array(o);p[0]=x;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l[s]="string"==typeof e?e:a,p[1]=l;for(var d=2;d<o;d++)p[d]=t[d];return n.createElement.apply(null,p)}return n.createElement.apply(null,t)}x.displayName="MDXCreateElement"},4613:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var n=t(7462),a=(t(7294),t(3905));const o={id:0xa5d17a17d208e000,title:"Exposure Default"},p="Exposure Default",l={unversionedId:"Generated/Shaders/Filters/11948465529117270000",id:"Generated/Shaders/Filters/11948465529117270000",title:"Exposure Default",description:"(exposure:default, 0xa5d17a17d208ddf6)",source:"@site/docs/Generated/Shaders/Filters/0xa5d17a17d208ddf6.mdx",sourceDirName:"Generated/Shaders/Filters",slug:"/Generated/Shaders/Filters/11948465529117270000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Filters/11948465529117270000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Filters/0xa5d17a17d208ddf6.mdx",tags:[],version:"current",frontMatter:{id:"11948465529117270000",title:"Exposure Default"},sidebar:"docsSidebar",previous:{title:"Scene Exposure No Msaa Default",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Filters/11517965074364576000"},next:{title:"Initial Luminance Default",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Filters/12004690034815130000"}},i={},d=[{value:"Technique <code>ambient</code>",id:"technique-ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Sampler 1",id:"sampler-1",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],m={toc:d},s="wrapper";function c(e){let{components:r,...t}=e;return(0,a.kt)(s,(0,n.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"exposure-default"},"Exposure Default"),(0,a.kt)("p",null,"(",(0,a.kt)("inlineCode",{parentName:"p"},"exposure:default"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0xa5d17a17d208ddf6"),")"),(0,a.kt)("p",null,"This template is referenced 1 time by ",(0,a.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/filters.render_template_database#exposure"},"exposure"),"."),(0,a.kt)("h3",{id:"technique-ambient"},"Technique ",(0,a.kt)("inlineCode",{parentName:"h3"},"ambient")),(0,a.kt)("h3",{id:"render-states"},"Render States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 0,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 1,\n    D3DRS_COLORWRITEENABLE = 15,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,a.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,a.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 1,\n    D3DSAMP_MINFILTER = 1,\n    D3DSAMP_MIPFILTER = 1,\n};\n")),(0,a.kt)("h4",{id:"sampler-1"},"Sampler 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 1,\n    D3DSAMP_MINFILTER = 1,\n    D3DSAMP_MIPFILTER = 1,\n};\n")),(0,a.kt)("h3",{id:"shaders"},"Shaders"),(0,a.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float2 texcoord : TEXCOORD;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    // dcl_position v0\n    // dcl_texcoord v1\n    // dcl_position o0\n    // dcl_texcoord o1.xy\n    // dp4 o0.x, v0, c0\n    o.position.x = dot(i.position, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, v0, c1\n    o.position.y = dot(i.position, (view_proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.z, v0, c2\n    o.position.z = dot(i.position, (view_proj_matrix._m02_m12_m22_m32));\n    // dp4 o0.w, v0, c3\n    o.position.w = dot(i.position, (view_proj_matrix._m03_m13_m23_m33));\n    // mov o1.xy, v1\n    o.texcoord = i.texcoord;\n    // \n\n    return o;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."),(0,a.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D diffuse_texture : register(ps_3_0, s0);\nfloat3 ref_blue_hi : register(ps_3_0, c5);\nfloat3 ref_blue_low : register(ps_3_0, c4);\nfloat3 ref_green_hi : register(ps_3_0, c3);\nfloat3 ref_green_low : register(ps_3_0, c2);\nfloat3 ref_red_hi : register(ps_3_0, c1);\nfloat3 ref_red_low : register(ps_3_0, c0);\nsampler2D self_illumination_texture : register(ps_3_0, s1);\nfloat4 PixelMain(float2 texcoord : TEXCOORD) : COLOR\n{\n    float4 out_color;\n    float4 temp0, temp1;\n    float2 temp2;\n    // def c6, 0, 0, 0, 0\n    // dcl_texcoord v0.xy\n    // dcl_2d s0\n    // dcl_2d s1\n    // texld r0, v0, s0\n    temp0 = tex2D(diffuse_texture, texcoord.xy);\n    // texld r1, c6.x, s1\n    temp1 = tex2D(self_illumination_texture, float4(0, 0, 0, 0).xy);\n    // lrp r2.x, r1.x, c0.y, c0.x\n    temp2.x = lerp(ref_red_low.x, ref_red_low.y, temp1.x);\n    // max r1.y, r0.x, r2.x\n    temp1.y = max(temp0.x, temp2.x);\n    // lrp r0.x, r1.x, c1.y, c1.x\n    temp0.x = lerp(ref_red_hi.x, ref_red_hi.y, temp1.x);\n    // min r2.y, r0.x, r1.y\n    temp2.y = min(temp0.x, temp1.y);\n    // add r0.x, -r2.x, r0.x\n    temp0.x = -temp2.x + temp0.x;\n    // add r1.y, -r2.x, r2.y\n    temp1.y = -temp2.x + temp2.y;\n    // rcp r0.x, r0.x\n    temp0.x = 1.0f / temp0.x;\n    // mul oC0.x, r0.x, r1.y\n    out_color.x = temp0.x * temp1.y;\n    // lrp r0.x, r1.x, c2.y, c2.x\n    temp0.x = lerp(ref_green_low.x, ref_green_low.y, temp1.x);\n    // max r1.y, r0.y, r0.x\n    temp1.y = max(temp0.y, temp0.x);\n    // lrp r0.y, r1.x, c3.y, c3.x\n    temp0.y = lerp(ref_green_hi.x, ref_green_hi.y, temp1.x);\n    // min r2.x, r0.y, r1.y\n    temp2.x = min(temp0.y, temp1.y);\n    // add r0.y, -r0.x, r0.y\n    temp0.y = -temp0.x + temp0.y;\n    // add r0.x, -r0.x, r2.x\n    temp0.x = -temp0.x + temp2.x;\n    // rcp r0.y, r0.y\n    temp0.y = 1.0f / temp0.y;\n    // mul oC0.y, r0.y, r0.x\n    out_color.y = temp0.y * temp0.x;\n    // lrp r0.x, r1.x, c4.y, c4.x\n    temp0.x = lerp(ref_blue_low.x, ref_blue_low.y, temp1.x);\n    // lrp r0.y, r1.x, c5.y, c5.x\n    temp0.y = lerp(ref_blue_hi.x, ref_blue_hi.y, temp1.x);\n    // max r1.x, r0.z, r0.x\n    temp1.x = max(temp0.z, temp0.x);\n    // mov oC0.w, r0.w\n    out_color.w = temp0.w;\n    // min r2.x, r0.y, r1.x\n    temp2.x = min(temp0.y, temp1.x);\n    // add r0.y, -r0.x, r0.y\n    temp0.y = -temp0.x + temp0.y;\n    // add r0.x, -r0.x, r2.x\n    temp0.x = -temp0.x + temp2.x;\n    // rcp r0.y, r0.y\n    temp0.y = 1.0f / temp0.y;\n    // mul oC0.z, r0.y, r0.x\n    out_color.z = temp0.y * temp0.x;\n    // \n\n    return out_color;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."))}c.isMDXComponent=!0}}]);