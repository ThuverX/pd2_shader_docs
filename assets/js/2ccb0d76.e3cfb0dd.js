"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[17153],{603905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var a=t(667294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var h=a.createContext({}),o=function(e){var n=a.useContext(h),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=o(e.components);return a.createElement(h.Provider,{value:n},e.children)},b="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,h=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),b=o(t),d=s,f=b["".concat(h,".").concat(d)]||b[d]||c[d]||i;return t?a.createElement(f,r(r({ref:n},u),{},{components:t})):a.createElement(f,r({ref:n},u))}));function f(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=t.length,r=new Array(i);r[0]=d;var l={};for(var h in n)hasOwnProperty.call(n,h)&&(l[h]=n[h]);l.originalType=e,l[b]="string"==typeof e?e:s,r[1]=l;for(var o=2;o<i;o++)r[o]=t[o];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},356211:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var a=t(487462),s=(t(667294),t(603905));const i={title:"Lookup8 hashing algorithm"},r=void 0,l={unversionedId:"lookup8",id:"lookup8",title:"Lookup8 hashing algorithm",description:"Payday 2 uses a hash function called Lookup8 by Bob Jenkins. It is used to hash strings, and is used in the game to hash the names of assets, units, and other things. This is done as looking up numbers is faster than looking up strings. They are represented by 64-bit unsigned integers.",source:"@site/docs/lookup8.mdx",sourceDirName:".",slug:"/lookup8",permalink:"/pd2_shader_docs/docs/lookup8",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/lookup8.mdx",tags:[],version:"current",frontMatter:{title:"Lookup8 hashing algorithm"},sidebar:"docsSidebar",previous:{title:"Shaders for users",permalink:"/pd2_shader_docs/docs/Modding/forusers"}},h={},o=[{value:"Hashlists",id:"hashlists",level:2},{value:"Implementation",id:"implementation",level:2}],u={toc:o},b="wrapper";function c(e){let{components:n,...t}=e;return(0,s.kt)(b,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Payday 2 uses a hash function called Lookup8 by ",(0,s.kt)("a",{parentName:"p",href:"http://burtleburtle.net/bob/"},"Bob Jenkins"),". It is used to hash strings, and is used in the game to hash the names of assets, units, and other things. This is done as looking up numbers is faster than looking up strings. They are represented by 64-bit unsigned integers."),(0,s.kt)("h2",{id:"hashlists"},"Hashlists"),(0,s.kt)("p",null,"Hashlists are files that contain a list of hashes and their corresponding strings. They are used to convert hashes back to strings.\nWe can use these hashlists to, for example, get the name of a shader template from its hash."),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Hash"),(0,s.kt)("th",{parentName:"tr",align:null},"String"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"0xd27572dffb2bf04d"),(0,s.kt)("td",{parentName:"tr",align:null},"ambient"),(0,s.kt)("td",{parentName:"tr",align:null},"The name of a shader technique")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"0xacd7e97e39acda9e"),(0,s.kt)("td",{parentName:"tr",align:null},"amcar"),(0,s.kt)("td",{parentName:"tr",align:null},"The name of a weapon")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"..."),(0,s.kt)("td",{parentName:"tr",align:null},"..."),(0,s.kt)("td",{parentName:"tr",align:null},"...")))),(0,s.kt)("p",null,"One of the most complete hashlists can be found ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/Luffyyy/PAYDAY-2-Hashlist"},"here"),"."),(0,s.kt)("h2",{id:"implementation"},"Implementation"),(0,s.kt)("p",null,"The implementation of the algorithm is as follows (from ",(0,s.kt)("a",{parentName:"p",href:"https://burtleburtle.net/bob/c/lookup8.c"},"Bob's website"),"):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'/*\n--------------------------------------------------------------------\nlookup8.c, by Bob Jenkins, January 4 1997, Public Domain.\nhash(), hash2(), hash3, and mix() are externally useful functions.\nRoutines to test the hash are included if SELF_TEST is defined.\nYou can use this free for any purpose.  It has no warranty.\n\n2009: This is obsolete.  I recently timed lookup3.c as being faster \nat producing 64-bit results.\n--------------------------------------------------------------------\n*/\n#define SELF_TEST\n\n#include <stdio.h>\n#include <stddef.h>\n#include <stdlib.h>\ntypedef  unsigned long  long ub8;   /* unsigned 8-byte quantities */\ntypedef  unsigned long  int  ub4;   /* unsigned 4-byte quantities */\ntypedef  unsigned       char ub1;\n\n#define hashsize(n) ((ub8)1<<(n))\n#define hashmask(n) (hashsize(n)-1)\n\n/*\n--------------------------------------------------------------------\nmix -- mix 3 64-bit values reversibly.\nmix() takes 48 machine instructions, but only 24 cycles on a superscalar\n  machine (like Intel\'s new MMX architecture).  It requires 4 64-bit\n  registers for 4::2 parallelism.\nAll 1-bit deltas, all 2-bit deltas, all deltas composed of top bits of\n  (a,b,c), and all deltas of bottom bits were tested.  All deltas were\n  tested both on random keys and on keys that were nearly all zero.\n  These deltas all cause every bit of c to change between 1/3 and 2/3\n  of the time (well, only 113/400 to 287/400 of the time for some\n  2-bit delta).  These deltas all cause at least 80 bits to change\n  among (a,b,c) when the mix is run either forward or backward (yes it\n  is reversible).\nThis implies that a hash using mix64 has no funnels.  There may be\n  characteristics with 3-bit deltas or bigger, I didn\'t test for\n  those.\n--------------------------------------------------------------------\n*/\n#define mix64(a,b,c) \\\n{ \\\n  a -= b; a -= c; a ^= (c>>43); \\\n  b -= c; b -= a; b ^= (a<<9); \\\n  c -= a; c -= b; c ^= (b>>8); \\\n  a -= b; a -= c; a ^= (c>>38); \\\n  b -= c; b -= a; b ^= (a<<23); \\\n  c -= a; c -= b; c ^= (b>>5); \\\n  a -= b; a -= c; a ^= (c>>35); \\\n  b -= c; b -= a; b ^= (a<<49); \\\n  c -= a; c -= b; c ^= (b>>11); \\\n  a -= b; a -= c; a ^= (c>>12); \\\n  b -= c; b -= a; b ^= (a<<18); \\\n  c -= a; c -= b; c ^= (b>>22); \\\n}\n\n/*\n--------------------------------------------------------------------\nhash() -- hash a variable-length key into a 64-bit value\n  k     : the key (the unaligned variable-length array of bytes)\n  len   : the length of the key, counting by bytes\n  level : can be any 8-byte value\nReturns a 64-bit value.  Every bit of the key affects every bit of\nthe return value.  No funnels.  Every 1-bit and 2-bit delta achieves\navalanche.  About 41+5len instructions.\n\nThe best hash table sizes are powers of 2.  There is no need to do\nmod a prime (mod is sooo slow!).  If you need less than 64 bits,\nuse a bitmask.  For example, if you need only 10 bits, do\n  h = (h & hashmask(10));\nIn which case, the hash table should have hashsize(10) elements.\n\nIf you are hashing n strings (ub1 **)k, do it like this:\n  for (i=0, h=0; i<n; ++i) h = hash( k[i], len[i], h);\n\nBy Bob Jenkins, Jan 4 1997.  bob_jenkins@burtleburtle.net.  You may\nuse this code any way you wish, private, educational, or commercial,\nbut I would appreciate if you give me credit.\n\nSee http://burtleburtle.net/bob/hash/evahash.html\nUse for hash table lookup, or anything where one collision in 2^^64\nis acceptable.  Do NOT use for cryptographic purposes.\n--------------------------------------------------------------------\n*/\n\nub8 hash( k, length, level)\nregister ub1 *k;        /* the key */\nregister ub8  length;   /* the length of the key */\nregister ub8  level;    /* the previous hash, or an arbitrary value */\n{\n  register ub8 a,b,c,len;\n\n  /* Set up the internal state */\n  len = length;\n  a = b = level;                         /* the previous hash value */\n  c = 0x9e3779b97f4a7c13LL; /* the golden ratio; an arbitrary value */\n\n  /*---------------------------------------- handle most of the key */\n  while (len >= 24)\n  {\n    a += (k[0]        +((ub8)k[ 1]<< 8)+((ub8)k[ 2]<<16)+((ub8)k[ 3]<<24)\n     +((ub8)k[4 ]<<32)+((ub8)k[ 5]<<40)+((ub8)k[ 6]<<48)+((ub8)k[ 7]<<56));\n    b += (k[8]        +((ub8)k[ 9]<< 8)+((ub8)k[10]<<16)+((ub8)k[11]<<24)\n     +((ub8)k[12]<<32)+((ub8)k[13]<<40)+((ub8)k[14]<<48)+((ub8)k[15]<<56));\n    c += (k[16]       +((ub8)k[17]<< 8)+((ub8)k[18]<<16)+((ub8)k[19]<<24)\n     +((ub8)k[20]<<32)+((ub8)k[21]<<40)+((ub8)k[22]<<48)+((ub8)k[23]<<56));\n    mix64(a,b,c);\n    k += 24; len -= 24;\n  }\n\n  /*------------------------------------- handle the last 23 bytes */\n  c += length;\n  switch(len)              /* all the case statements fall through */\n  {\n  case 23: c+=((ub8)k[22]<<56);\n  case 22: c+=((ub8)k[21]<<48);\n  case 21: c+=((ub8)k[20]<<40);\n  case 20: c+=((ub8)k[19]<<32);\n  case 19: c+=((ub8)k[18]<<24);\n  case 18: c+=((ub8)k[17]<<16);\n  case 17: c+=((ub8)k[16]<<8);\n    /* the first byte of c is reserved for the length */\n  case 16: b+=((ub8)k[15]<<56);\n  case 15: b+=((ub8)k[14]<<48);\n  case 14: b+=((ub8)k[13]<<40);\n  case 13: b+=((ub8)k[12]<<32);\n  case 12: b+=((ub8)k[11]<<24);\n  case 11: b+=((ub8)k[10]<<16);\n  case 10: b+=((ub8)k[ 9]<<8);\n  case  9: b+=((ub8)k[ 8]);\n  case  8: a+=((ub8)k[ 7]<<56);\n  case  7: a+=((ub8)k[ 6]<<48);\n  case  6: a+=((ub8)k[ 5]<<40);\n  case  5: a+=((ub8)k[ 4]<<32);\n  case  4: a+=((ub8)k[ 3]<<24);\n  case  3: a+=((ub8)k[ 2]<<16);\n  case  2: a+=((ub8)k[ 1]<<8);\n  case  1: a+=((ub8)k[ 0]);\n    /* case 0: nothing left to add */\n  }\n  mix64(a,b,c);\n  /*-------------------------------------------- report the result */\n  return c;\n}\n\n/*\n--------------------------------------------------------------------\n This works on all machines, is identical to hash() on little-endian \n machines, and it is much faster than hash(), but it requires\n -- that the key be an array of ub8\'s, and\n -- that all your machines have the same endianness, and\n -- that the length be the number of ub8\'s in the key\n--------------------------------------------------------------------\n*/\nub8 hash2( k, length, level)\nregister ub8 *k;        /* the key */\nregister ub8  length;   /* the length of the key */\nregister ub8  level;    /* the previous hash, or an arbitrary value */\n{\n  register ub8 a,b,c,len;\n\n  /* Set up the internal state */\n  len = length;\n  a = b = level;                         /* the previous hash value */\n  c = 0x9e3779b97f4a7c13LL; /* the golden ratio; an arbitrary value */\n\n  /*---------------------------------------- handle most of the key */\n  while (len >= 3)\n  {\n    a += k[0];\n    b += k[1];\n    c += k[2];\n    mix64(a,b,c);\n    k += 3; len -= 3;\n  }\n\n  /*-------------------------------------- handle the last 2 ub8\'s */\n  c += (length<<3);\n  switch(len)              /* all the case statements fall through */\n  {\n    /* c is reserved for the length */\n  case  2: b+=k[1];\n  case  1: a+=k[0];\n    /* case 0: nothing left to add */\n  }\n  mix64(a,b,c);\n  /*-------------------------------------------- report the result */\n  return c;\n}\n\n/*\n--------------------------------------------------------------------\n This is identical to hash() on little-endian machines, and it is much\n faster than hash(), but a little slower than hash2(), and it requires\n -- that all your machines be little-endian, for example all Intel x86\n    chips or all VAXen.  It gives wrong results on big-endian machines.\n--------------------------------------------------------------------\n*/\n\nub8 hash3( k, length, level)\nregister ub1 *k;        /* the key */\nregister ub8  length;   /* the length of the key */\nregister ub8  level;    /* the previous hash, or an arbitrary value */\n{\n  register ub8 a,b,c,len;\n\n  /* Set up the internal state */\n  len = length;\n  a = b = level;                         /* the previous hash value */\n  c = 0x9e3779b97f4a7c13LL; /* the golden ratio; an arbitrary value */\n\n  /*---------------------------------------- handle most of the key */\n  if (((size_t)k)&7)\n  {\n    while (len >= 24)\n    {\n      a += (k[0]        +((ub8)k[ 1]<< 8)+((ub8)k[ 2]<<16)+((ub8)k[ 3]<<24)\n       +((ub8)k[4 ]<<32)+((ub8)k[ 5]<<40)+((ub8)k[ 6]<<48)+((ub8)k[ 7]<<56));\n      b += (k[8]        +((ub8)k[ 9]<< 8)+((ub8)k[10]<<16)+((ub8)k[11]<<24)\n       +((ub8)k[12]<<32)+((ub8)k[13]<<40)+((ub8)k[14]<<48)+((ub8)k[15]<<56));\n      c += (k[16]       +((ub8)k[17]<< 8)+((ub8)k[18]<<16)+((ub8)k[19]<<24)\n       +((ub8)k[20]<<32)+((ub8)k[21]<<40)+((ub8)k[22]<<48)+((ub8)k[23]<<56));\n      mix64(a,b,c);\n      k += 24; len -= 24;\n    }\n  }\n  else\n  {\n    while (len >= 24)    /* aligned */\n    {\n      a += *(ub8 *)(k+0);\n      b += *(ub8 *)(k+8);\n      c += *(ub8 *)(k+16);\n      mix64(a,b,c);\n      k += 24; len -= 24;\n    }\n  }\n\n  /*------------------------------------- handle the last 23 bytes */\n  c += length;\n  switch(len)              /* all the case statements fall through */\n  {\n  case 23: c+=((ub8)k[22]<<56);\n  case 22: c+=((ub8)k[21]<<48);\n  case 21: c+=((ub8)k[20]<<40);\n  case 20: c+=((ub8)k[19]<<32);\n  case 19: c+=((ub8)k[18]<<24);\n  case 18: c+=((ub8)k[17]<<16);\n  case 17: c+=((ub8)k[16]<<8);\n    /* the first byte of c is reserved for the length */\n  case 16: b+=((ub8)k[15]<<56);\n  case 15: b+=((ub8)k[14]<<48);\n  case 14: b+=((ub8)k[13]<<40);\n  case 13: b+=((ub8)k[12]<<32);\n  case 12: b+=((ub8)k[11]<<24);\n  case 11: b+=((ub8)k[10]<<16);\n  case 10: b+=((ub8)k[ 9]<<8);\n  case  9: b+=((ub8)k[ 8]);\n  case  8: a+=((ub8)k[ 7]<<56);\n  case  7: a+=((ub8)k[ 6]<<48);\n  case  6: a+=((ub8)k[ 5]<<40);\n  case  5: a+=((ub8)k[ 4]<<32);\n  case  4: a+=((ub8)k[ 3]<<24);\n  case  3: a+=((ub8)k[ 2]<<16);\n  case  2: a+=((ub8)k[ 1]<<8);\n  case  1: a+=((ub8)k[ 0]);\n    /* case 0: nothing left to add */\n  }\n  mix64(a,b,c);\n  /*-------------------------------------------- report the result */\n  return c;\n}\n\n#ifdef SELF_TEST\n\n/* used for timings */\nvoid driver1()\n{\n  ub8 buf[256];\n  ub8 i;\n  ub8 h=0;\n\n  for (i=0; i<256; ++i) \n  {\n    h = hash(buf,i,h);\n  }\n}\n\n/* check that every input bit changes every output bit half the time */\n#define HASHSTATE 1\n#define HASHLEN   1\n#define MAXPAIR 80\n#define MAXLEN 5\nvoid driver2()\n{\n  ub1 qa[MAXLEN+1], qb[MAXLEN+2], *a = &qa[0], *b = &qb[1];\n  ub8 c[HASHSTATE], d[HASHSTATE], i, j=0, k, l, m, z;\n  ub8 e[HASHSTATE],f[HASHSTATE],g[HASHSTATE],h[HASHSTATE];\n  ub8 x[HASHSTATE],y[HASHSTATE];\n  ub8 hlen;\n\n  printf("No more than %d trials should ever be needed \\n",MAXPAIR/2);\n  for (hlen=0; hlen < MAXLEN; ++hlen)\n  {\n    z=0;\n    for (i=0; i<hlen; ++i)  /*----------------------- for each byte, */\n    {\n      for (j=0; j<8; ++j)   /*------------------------ for each bit, */\n      {\n    for (m=0; m<8; ++m) /*-------- for serveral possible levels, */\n    {\n      for (l=0; l<HASHSTATE; ++l) e[l]=f[l]=g[l]=h[l]=x[l]=y[l]=~((ub8)0);\n\n          /*---- check that every input bit affects every output bit */\n      for (k=0; k<MAXPAIR; k+=2)\n      { \n        ub8 finished=1;\n        /* keys have one bit different */\n        for (l=0; l<hlen+1; ++l) {a[l] = b[l] = (ub1)0;}\n        /* have a and b be two keys differing in only one bit */\n        a[i] ^= (k<<j);\n        a[i] ^= (k>>(8-j));\n         c[0] = hash(a, hlen, m);\n        b[i] ^= ((k+1)<<j);\n        b[i] ^= ((k+1)>>(8-j));\n         d[0] = hash(b, hlen, m);\n        /* check every bit is 1, 0, set, and not set at least once */\n        for (l=0; l<HASHSTATE; ++l)\n        {\n          e[l] &= (c[l]^d[l]);\n          f[l] &= ~(c[l]^d[l]);\n          g[l] &= c[l];\n          h[l] &= ~c[l];\n          x[l] &= d[l];\n          y[l] &= ~d[l];\n          if (e[l]|f[l]|g[l]|h[l]|x[l]|y[l]) finished=0;\n        }\n        if (finished) break;\n      }\n      if (k>z) z=k;\n      if (k==MAXPAIR) \n      {\n         printf("Some bit didn\'t change: ");\n         printf("%.8lx %.8lx %.8lx %.8lx %.8lx %.8lx  ",\n                e[0],f[0],g[0],h[0],x[0],y[0]);\n         printf("i %ld j %ld m %ld len %ld\\n",\n                (ub4)i,(ub4)j,(ub4)m,(ub4)hlen);\n      }\n      if (z==MAXPAIR) goto done;\n    }\n      }\n    }\n   done:\n    if (z < MAXPAIR)\n    {\n      printf("Mix success  %2ld bytes  %2ld levels  ",(ub4)i,(ub4)m);\n      printf("required  %ld  trials\\n",(ub4)(z/2));\n    }\n  }\n  printf("\\n");\n}\n\n/* Check for reading beyond the end of the buffer and alignment problems */\nvoid driver3()\n{\n  ub1 buf[MAXLEN+20], *b;\n  ub8 len;\n  ub1 q[] = "This is the time for all good men to come to the aid of their country";\n  ub1 qq[] = "xThis is the time for all good men to come to the aid of their country";\n  ub1 qqq[] = "xxThis is the time for all good men to come to the aid of their country";\n  ub1 qqqq[] = "xxxThis is the time for all good men to come to the aid of their country";\n  ub1 o[] = "xxxxThis is the time for all good men to come to the aid of their country";\n  ub1 oo[] = "xxxxxThis is the time for all good men to come to the aid of their country";\n  ub1 ooo[] = "xxxxxxThis is the time for all good men to come to the aid of their country";\n  ub1 oooo[] = "xxxxxxxThis is the time for all good men to come to the aid of their country";\n  ub8 h,i,j,ref,x,y;\n\n  printf("Endianness.  These should all be the same:\\n");\n  h = hash(q+0, (ub8)(sizeof(q)-1), (ub8)0);\n  printf("%.8lx%.8lx\\n", (ub4)h, (ub4)(h>>32));\n  h = hash(qq+1, (ub8)(sizeof(q)-1), (ub8)0);\n  printf("%.8lx%.8lx\\n", (ub4)h, (ub4)(h>>32));\n  h = hash(qqq+2, (ub8)(sizeof(q)-1), (ub8)0);\n  printf("%.8lx%.8lx\\n", (ub4)h, (ub4)(h>>32));\n  h = hash(qqqq+3, (ub8)(sizeof(q)-1), (ub8)0);\n  printf("%.8lx%.8lx\\n", (ub4)h, (ub4)(h>>32));\n  h = hash(o+4, (ub8)(sizeof(q)-1), (ub8)0);\n  printf("%.8lx%.8lx\\n", (ub4)h, (ub4)(h>>32));\n  h = hash(oo+5, (ub8)(sizeof(q)-1), (ub8)0);\n  printf("%.8lx%.8lx\\n", (ub4)h, (ub4)(h>>32));\n  h = hash(ooo+6, (ub8)(sizeof(q)-1), (ub8)0);\n  printf("%.8lx%.8lx\\n", (ub4)h, (ub4)(h>>32));\n  h = hash(oooo+7, (ub8)(sizeof(q)-1), (ub8)0);\n  printf("%.8lx%.8lx\\n", (ub4)h, (ub4)(h>>32));\n  printf("\\n");\n  for (h=0, b=buf+1; h<8; ++h, ++b)\n  {\n    for (i=0; i<MAXLEN; ++i)\n    {\n      len = i;\n      for (j=0; j<i; ++j) *(b+j)=0;\n\n      /* these should all be equal */\n      ref = hash(b, len, (ub8)1);\n      *(b+i)=(ub1)~0;\n      *(b-1)=(ub1)~0;\n      x = hash(b, len, (ub8)1);\n      y = hash(b, len, (ub8)1);\n      if ((ref != x) || (ref != y)) \n      {\n    printf("alignment error: %.8lx %.8lx %.8lx %ld %ld\\n",ref,x,y,h,i);\n      }\n    }\n  }\n}\n\n/* check for problems with nulls */\n void driver4()\n{\n  ub1 buf[1];\n  ub8 h,i,state[HASHSTATE];\n\n\n  buf[0] = ~0;\n  for (i=0; i<HASHSTATE; ++i) state[i] = 1;\n  printf("These should all be different\\n");\n  for (i=0, h=0; i<8; ++i)\n  {\n    h = hash(buf, (ub8)0, h);\n    printf("%2ld  0-byte strings, hash is  %.8lx%.8lx\\n", (ub4)i,\n      (ub4)h,(ub4)(h>>32));\n  }\n}\n\n\nint main()\n{\n  driver1();   /* test that the key is hashed: used for timings */\n  driver2();   /* test that whole key is hashed thoroughly */\n  driver3();   /* test that nothing but the key is hashed */\n  driver4();   /* test hashing multiple buffers (all buffers are null) */\n  return 1;\n}\n\n#endif  /* SELF_TEST */\n')))}c.isMDXComponent=!0}}]);