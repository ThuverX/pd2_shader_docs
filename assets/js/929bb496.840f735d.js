"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[99255],{603905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>_});var n=t(667294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function d(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),m=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},p=function(e){var r=m(e.components);return n.createElement(l.Provider,{value:r},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},x=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),s=m(t),x=a,_=s["".concat(l,".").concat(x)]||s[x]||c[x]||o;return t?n.createElement(_,i(i({ref:r},p),{},{components:t})):n.createElement(_,i({ref:r},p))}));function _(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=x;var d={};for(var l in r)hasOwnProperty.call(r,l)&&(d[l]=r[l]);d.originalType=e,d[s]="string"==typeof e?e:a,i[1]=d;for(var m=2;m<o;m++)i[m]=t[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}x.displayName="MDXCreateElement"},737190:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>d,toc:()=>m});var n=t(487462),a=(t(667294),t(603905));const o={id:0xaf4dde069738e000,title:"Generic Shadow Caster Axis Aligned Billboard Billboard Center Offset Billboard Up Axis Diffuse Texture Double Sided Nvidia"},i="Generic Shadow Caster Axis Aligned Billboard Billboard Center Offset Billboard Up Axis Diffuse Texture Double Sided Nvidia",d={unversionedId:"Generated/Shaders/Base/[3200-3300]/12631996649732366000",id:"Generated/Shaders/Base/[3200-3300]/12631996649732366000",title:"Generic Shadow Caster Axis Aligned Billboard Billboard Center Offset Billboard Up Axis Diffuse Texture Double Sided Nvidia",description:"(genericAXISALIGNEDBILLBOARDBILLBOARDUPAXISDOUBLE_SIDED:NVIDIA, 0xaf4dde069738e038)",source:"@site/docs/Generated/Shaders/Base/[3200-3300]/0xaf4dde069738e038.mdx",sourceDirName:"Generated/Shaders/Base/[3200-3300]",slug:"/Generated/Shaders/Base/[3200-3300]/12631996649732366000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3200-3300]/12631996649732366000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Base/[3200-3300]/0xaf4dde069738e038.mdx",tags:[],version:"current",frontMatter:{id:"12631996649732366000",title:"Generic Shadow Caster Axis Aligned Billboard Billboard Center Offset Billboard Up Axis Diffuse Texture Double Sided Nvidia"},sidebar:"docsSidebar",previous:{title:"Generic Shadow Caster Alpha Masked Ati Diffuse Texture External Alpha Ref Gsma Texture Normalmap Self Illumination Self Illumination Bloom",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3200-3300]/12626386023451138000"},next:{title:"Generic Shadow Caster Alpha Masked Ati Diffuse Texture External Alpha Ref Normalmap Opacity Texture Simple Tint Skinned 3weights",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3200-3300]/12633624660833430000"}},l={},m=[{value:"Technique <code>ambient</code>",id:"technique-ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],p={toc:m},s="wrapper";function c(e){let{components:r,...t}=e;return(0,a.kt)(s,(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"generic-shadow-caster-axis-aligned-billboard-billboard-center-offset-billboard-up-axis-diffuse-texture-double-sided-nvidia"},"Generic Shadow Caster Axis Aligned Billboard Billboard Center Offset Billboard Up Axis Diffuse Texture Double Sided Nvidia"),(0,a.kt)("p",null,"(",(0,a.kt)("inlineCode",{parentName:"p"},"generic:shadow_caster:AXIS_ALIGNED_BILLBOARD:BILLBOARD_CENTER_OFFSET:BILLBOARD_UP_AXIS:DIFFUSE_TEXTURE:DOUBLE_SIDED:NVIDIA"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0xaf4dde069738e038"),")"),(0,a.kt)("p",null,"This template is referenced 1 time by ",(0,a.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/base.render_template_database#generic-axis-aligned-billboard-billboard-center-offset-billboard-up-axis-diffuse-texture-double-sided"},"generic:AXIS_ALIGNED_BILLBOARD:BILLBOARD_CENTER_OFFSET:BILLBOARD_UP_AXIS:DIFFUSE_TEXTURE:DOUBLE_SIDED"),".\nThis template uses the following inputs:\n|Name|UI Name|Type|\n|---|---|---|\n|diffuse_texture|Diffuse Texture (UV1)|texture|\n|billboard_up_axis|Billboard up axis|vector3|\n|billboard_center_offset|Billboard center offset|vector3|\n|global_axis|World Space fixed axis|vector3|."),(0,a.kt)("h3",{id:"technique-ambient"},"Technique ",(0,a.kt)("inlineCode",{parentName:"h3"},"ambient")),(0,a.kt)("h3",{id:"render-states"},"Render States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 1,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 1,\n    D3DRS_COLORWRITEENABLE = 0,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 961656599,\n    D3DRS_SLOPESCALEDEPTHBIAS = 1075838976,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,a.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,a.kt)("h3",{id:"shaders"},"Shaders"),(0,a.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 camera_proj_matrix : register(vs_3_0, c4);\ncolumn_major float4x4 camera_view_matrix : register(vs_3_0, c0);\ncolumn_major float4x4 camera_world_matrix : register(vs_3_0, c8);\nfloat3 ref_billboard_center_offset : register(vs_3_0, c15);\nfloat3 ref_billboard_up_axis : register(vs_3_0, c14) = { 0, 1, 0 };\nfloat3 ref_global_axis : register(vs_3_0, c16) = { 0, 0, 1 };\ncolumn_major float4x4 world_matrix : register(vs_3_0, c11);\nstruct VertexMain_Input\n{\n    float4 texcoord6 : TEXCOORD6;\n    float4 texcoord7 : TEXCOORD7;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float texcoord1 : TEXCOORD1;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0, temp1;\n    float3 temp2, temp3, temp4;\n    // def c17, 1, 0, 0, 0\n    // dcl_texcoord6 v0\n    // dcl_texcoord7 v1\n    // dcl_position o0\n    // dcl_texcoord1 o1.x\n    // mul r0.xy, c14, c14\n    temp0.xy = ref_billboard_up_axis.xy * ref_billboard_up_axis.xy;\n    // add r0.x, r0.y, r0.x\n    temp0.x = temp0.y + temp0.x;\n    // rsq r0.x, r0.x\n    temp0.x = 1 / sqrt(temp0.x);\n    // mul r0.xyz, r0.x, c14.yxyw\n    temp0.xyz = temp0.xxx * ref_billboard_up_axis.yxy;\n    // add r1.xyz, c15.xxyw, v1.xxyw\n    temp1.xyz = ref_billboard_center_offset.xxy + i.texcoord7.xxy;\n    // mul r0.xzw, r0.xyyz, r1.xyyz\n    temp0.xzw = temp0.xyz * temp1.xyz;\n    // mad r0.x, r1.z, -r0.y, r0.x\n    temp0.x = temp1.z * -temp0.y + temp0.x;\n    // add r0.y, r0.w, r0.z\n    temp0.y = temp0.w + temp0.z;\n    // mov r1.z, c9.y\n    temp1.z = (camera_world_matrix._m01_m11_m21_m31).y;\n    // mov r1.x, c10.y\n    temp1.x = (camera_world_matrix._m02_m12_m22_m32).y;\n    // mov r1.y, c8.y\n    temp1.y = (camera_world_matrix._m00_m10_m20_m30).y;\n    // nrm r2.xyz, c16\n    temp2.xyz = normalize(ref_global_axis.xyz).xyz;\n    // mul r3.xyz, r1, r2.yzxw\n    temp3.xyz = temp1.xyz * temp2.yzx;\n    // mad r1.xyz, r1.zxyw, r2.zxyw, -r3\n    temp1.xyz = temp1.zxy * temp2.zxy + -temp3.xyz;\n    // nrm r3.xyz, r1\n    temp3.xyz = normalize(temp1.xyz).xyz;\n    // mad r1, v0.xyzx, c17.xxxy, c17.yyyx\n    temp1 = i.texcoord6.xyzx * float4(1, 1, 1, 0) + float4(0, 0, 0, 1);\n    // dp4 r4.x, r1, c11\n    temp4.x = dot(temp1, (world_matrix._m00_m10_m20_m30));\n    // dp4 r4.y, r1, c12\n    temp4.y = dot(temp1, (world_matrix._m01_m11_m21_m31));\n    // dp4 r4.z, r1, c13\n    temp4.z = dot(temp1, (world_matrix._m02_m12_m22_m32));\n    // mad r0.xzw, r3.xyyz, r0.x, r4.xyyz\n    temp0.xzw = temp3.xyz * temp0.xxx + temp4.xyz;\n    // mad r0.xyz, r2, r0.y, r0.xzww\n    temp0.xyz = temp2.xyz * temp0.yyy + temp0.xzw;\n    // mov r0.w, c17.x\n    temp0.w = float1(1);\n    // dp4 r1.x, r0, c0\n    temp1.x = dot(temp0, (camera_view_matrix._m00_m10_m20_m30));\n    // dp4 r1.y, r0, c1\n    temp1.y = dot(temp0, (camera_view_matrix._m01_m11_m21_m31));\n    // dp4 r1.z, r0, c2\n    temp1.z = dot(temp0, (camera_view_matrix._m02_m12_m22_m32));\n    // dp4 r1.w, r0, c3\n    temp1.w = dot(temp0, (camera_view_matrix._m03_m13_m23_m33));\n    // dp4 o0.x, r1, c4\n    o.position.x = dot(temp1, (camera_proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, r1, c5\n    o.position.y = dot(temp1, (camera_proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.w, r1, c7\n    o.position.w = dot(temp1, (camera_proj_matrix._m03_m13_m23_m33));\n    // dp4 r0.x, r1, c6\n    temp0.x = dot(temp1, (camera_proj_matrix._m02_m12_m22_m32));\n    // mov o0.z, r0.x\n    o.position.z = temp0.x;\n    // mov o1.x, r0.x\n    o.texcoord1 = temp0.x;\n    // \n\n    return o;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."),(0,a.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"float4 PixelMain(float texcoord1 : TEXCOORD1) : COLOR\n{\n    float4 out_color;\n    // def c0, 1, 0, 0, 0\n    // dcl_texcoord1 v0.x\n    // mul oC0, c0.xyyy, v0.x\n    out_color = float4(1, 0, 0, 0) * texcoord1.x;\n    // \n\n    return out_color;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."))}c.isMDXComponent=!0}}]);