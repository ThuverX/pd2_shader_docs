"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[77618],{603905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>u});var n=r(667294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},i="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},x=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),i=c(r),x=a,u=i["".concat(p,".").concat(x)]||i[x]||m[x]||o;return r?n.createElement(u,l(l({ref:t},s),{},{components:r})):n.createElement(u,l({ref:t},s))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=x;var d={};for(var p in t)hasOwnProperty.call(t,p)&&(d[p]=t[p]);d.originalType=e,d[i]="string"==typeof e?e:a,l[1]=d;for(var c=2;c<o;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}x.displayName="MDXCreateElement"},989160:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var n=r(487462),a=(r(667294),r(603905));const o={id:0x50ee574a7bea1400,title:"Overlay Vertex Color Textured Patterns"},l="Overlay Vertex Color Textured Patterns",d={unversionedId:"Generated/Shaders/Default Shaders/5831694544909506000",id:"Generated/Shaders/Default Shaders/5831694544909506000",title:"Overlay Vertex Color Textured Patterns",description:"(OverlayVertexColorTexturedPatterns, 0x50ee574a7bea12ce)",source:"@site/docs/Generated/Shaders/Default Shaders/0x50ee574a7bea12ce.mdx",sourceDirName:"Generated/Shaders/Default Shaders",slug:"/Generated/Shaders/Default Shaders/5831694544909506000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Default Shaders/5831694544909506000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Default Shaders/0x50ee574a7bea12ce.mdx",tags:[],version:"current",frontMatter:{id:"5831694544909506000",title:"Overlay Vertex Color Textured Patterns"},sidebar:"docsSidebar",previous:{title:"Background Vertex Color Textured Blur3 D",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Default Shaders/5414034351814038000"},next:{title:"Vertex Color Overlay Background",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Default Shaders/6206003251868625000"}},p={},c=[{value:"Technique <code>overlay</code>",id:"technique-overlay",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],s={toc:c},i="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(i,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"overlay-vertex-color-textured-patterns"},"Overlay Vertex Color Textured Patterns"),(0,a.kt)("p",null,"(",(0,a.kt)("inlineCode",{parentName:"p"},"OverlayVertexColorTexturedPatterns"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0x50ee574a7bea12ce"),")"),(0,a.kt)("p",null,"This template is referenced 1 time by ",(0,a.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/default_render_templates.render_template_database#overlayvertexcolortexturedpatterns"},"OverlayVertexColorTexturedPatterns"),"."),(0,a.kt)("h3",{id:"technique-overlay"},"Technique ",(0,a.kt)("inlineCode",{parentName:"h3"},"overlay")),(0,a.kt)("h3",{id:"render-states"},"Render States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 1,\n    D3DRS_CULLMODE = 1,\n    D3DRS_COLORWRITEENABLE = 7,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n    D3DRS_BLENDOP = 1,\n    D3DRS_DESTBLEND = 6,\n    D3DRS_SRCBLEND = 5,\n};\n")),(0,a.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,a.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,a.kt)("h3",{id:"shaders"},"Shaders"),(0,a.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 color : COLOR;\n    float4 texcoord : TEXCOORD;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float4 color : COLOR;\n    float2 texcoord : TEXCOORD;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    // def c4, 0.9, 0.05, 0, 0\n    // dcl_position v0\n    // dcl_color v1\n    // dcl_texcoord v2\n    // dcl_position o0\n    // dcl_color o1\n    // dcl_texcoord o2.xy\n    // dp4 o0.x, v0, c0\n    o.position.x = dot(i.position, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, v0, c1\n    o.position.y = dot(i.position, (view_proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.z, v0, c2\n    o.position.z = dot(i.position, (view_proj_matrix._m02_m12_m22_m32));\n    // dp4 o0.w, v0, c3\n    o.position.w = dot(i.position, (view_proj_matrix._m03_m13_m23_m33));\n    // mad o2.xy, v2, c4.x, c4.y\n    o.texcoord = i.texcoord * float4(0.9, 0.9, 0.9, 0.9) + float4(0.05, 0.05, 0.05, 0.05);\n    // mov o1, v1\n    o.color = i.color;\n    // \n\n    return o;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."),(0,a.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D diffuse_texture : register(ps_3_0, s0);\nstruct PixelMain_Input\n{\n    float3 color : COLOR;\n    float2 texcoord : TEXCOORD;\n};\n\nfloat4 PixelMain(PixelMain_Input i) : COLOR\n{\n    float4 out_color;\n    float4 temp0, temp1;\n    // def c0, -0.05, 1.11111, -0.5, 0.3\n    // def c1, 2, -0.8, 5.5555553, 0.1\n    // def c2, 5, 1, 0.88, 0.12\n    // def c3, 0, 1, -0, -1\n    // dcl_color v0.xyz\n    // dcl_texcoord v1.xy\n    // dcl_2d s0\n    // add r0.xy, c0.x, v1\n    temp0.xy = float2(-0.05, -0.05) + i.texcoord.xy;\n    // mad r0.xy, r0, c0.y, c0.z\n    temp0.xy = temp0.xy * float2(1.11111, 1.11111) + float2(-0.5, -0.5);\n    // cmp r0.zw, -r0.xyxy, c3.x, c3.y\n    temp0.zw = (-temp0.xy >= 0) ? float2(0, 0) : float2(1, 1);\n    // cmp r1.xy, r0, c3.z, c3.w\n    temp1.xy = (temp0.xy >= 0) ? float2(-0, -0) : float2(-1, -1);\n    // add r0.zw, r0, r1.xyxy\n    temp0.zw = temp0.zw + temp1.xy;\n    // mul r1.xy, r0_abs.yxzw, r0_abs.yxzw\n    temp1.xy = abs(temp0).yx * abs(temp0).yx;\n    // mul r0.zw, r0, r1.xyxy\n    temp0.zw = temp0.zw * temp1.xy;\n    // mad r0.xy, r0.zwzw, c0.w, r0\n    temp0.xy = temp0.zw * float2(0.3, 0.3) + temp0.xy;\n    // mad_sat r0.xy, r0_abs, c1.x, c1.y\n    temp0.xy = saturate(abs(temp0).xy * float2(2, 2) + float2(-0.8, -0.8));\n    // mul r0.xy, r0, c1.z\n    temp0.xy = temp0.xy * float2(5.5555553, 5.5555553);\n    // max r1.x, r0.x, r0.y\n    temp1.x = max(temp0.x, temp0.y);\n    // add r0.x, -r1.x, c3.y\n    temp0.x = -temp1.x + float1(1);\n    // mad r0.y, r1.x, -c2.x, c2.y\n    temp0.y = temp1.x * float1(-5) + float1(1);\n    // texld r1, v1, s0\n    temp1 = tex2D(diffuse_texture, i.texcoord.xy);\n    // max_sat r0.z, r1.x, r1.y\n    temp0.z = saturate(max(temp1.x, temp1.y));\n    // add r0.w, -r0.z, c3.y\n    temp0.w = -temp0.z + float1(1);\n    // mul r0.y, r0.w, r0.y\n    temp0.y = temp0.w * temp0.y;\n    // mul r0.w, r0.y, c1.w\n    temp0.w = temp0.y * float1(0.1);\n    // mad_sat r1.xyz, r1.x, v0, r0.y\n    temp1.xyz = saturate(temp1.xxx * i.color.xyz + temp0.yyy);\n    // mad oC0.xyz, r1, c2.z, c2.w\n    out_color.xyz = temp1.xyz * float3(0.88, 0.88, 0.88) + float3(0.12, 0.12, 0.12);\n    // mad oC0.w, r0.z, r0.x, r0.w\n    out_color.w = temp0.z * temp0.x + temp0.w;\n    // \n\n    return out_color;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."))}m.isMDXComponent=!0}}]);