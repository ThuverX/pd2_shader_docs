"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[7350],{3905:(e,t,r)=>{r.d(t,{Zo:()=>i,kt:()=>s});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),m=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},i=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",x={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},_=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,i=d(e,["components","mdxType","originalType","parentName"]),c=m(r),_=o,s=c["".concat(l,".").concat(_)]||c[_]||x[_]||a;return r?n.createElement(s,p(p({ref:t},i),{},{components:r})):n.createElement(s,p({ref:t},i))}));function s(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,p=new Array(a);p[0]=_;var d={};for(var l in t)hasOwnProperty.call(t,l)&&(d[l]=t[l]);d.originalType=e,d[c]="string"==typeof e?e:o,p[1]=d;for(var m=2;m<a;m++)p[m]=r[m];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}_.displayName="MDXCreateElement"},4442:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>x,frontMatter:()=>a,metadata:()=>d,toc:()=>m});var n=r(7462),o=(r(7294),r(3905));const a={id:0x28871bcaafc3f400,title:"Fog Plane Default"},p="Fog Plane Default",d={unversionedId:"Generated/Shaders/Deferred Lighting/2920333440719254500",id:"Generated/Shaders/Deferred Lighting/2920333440719254500",title:"Fog Plane Default",description:"(fog_plane:default, 0x28871bcaafc3f4f3)",source:"@site/docs/Generated/Shaders/Deferred Lighting/0x28871bcaafc3f4f3.mdx",sourceDirName:"Generated/Shaders/Deferred Lighting",slug:"/Generated/Shaders/Deferred Lighting/2920333440719254500",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Deferred Lighting/2920333440719254500",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Deferred Lighting/0x28871bcaafc3f4f3.mdx",tags:[],version:"current",frontMatter:{id:"2920333440719254500",title:"Fog Plane Default"},sidebar:"docsSidebar",previous:{title:"Global Shadow Mask Default Dx9 Fetch4 Slice0",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Deferred Lighting/2609753369110629000"},next:{title:"Spot Default",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Deferred Lighting/3158471987282499000"}},l={},m=[{value:"Technique <code>fog</code>",id:"technique-fog",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],i={toc:m},c="wrapper";function x(e){let{components:t,...r}=e;return(0,o.kt)(c,(0,n.Z)({},i,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"fog-plane-default"},"Fog Plane Default"),(0,o.kt)("p",null,"(",(0,o.kt)("inlineCode",{parentName:"p"},"fog_plane:default"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"0x28871bcaafc3f4f3"),")"),(0,o.kt)("p",null,"This template is referenced 1 time by ",(0,o.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/deferred_lighting.render_template_database#fog-plane"},"fog_plane"),"."),(0,o.kt)("h3",{id:"technique-fog"},"Technique ",(0,o.kt)("inlineCode",{parentName:"h3"},"fog")),(0,o.kt)("h3",{id:"render-states"},"Render States"),(0,o.kt)("p",null,"More info can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 1,\n    D3DRS_ALPHABLENDENABLE = 1,\n    D3DRS_CULLMODE = 1,\n    D3DRS_COLORWRITEENABLE = 7,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n    D3DRS_BLENDOP = 1,\n    D3DRS_DESTBLEND = 6,\n    D3DRS_SRCBLEND = 5,\n};\n")),(0,o.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,o.kt)("p",null,"More info can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,o.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 1,\n    D3DSAMP_MINFILTER = 1,\n    D3DSAMP_MIPFILTER = 1,\n};\n")),(0,o.kt)("h3",{id:"shaders"},"Shaders"),(0,o.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"float camera_far_range : register(vs_3_0, c7);\nfloat ref_depth_fog_end : register(vs_3_0, c9);\nfloat ref_depth_fog_start : register(vs_3_0, c8);\ncolumn_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nfloat3 vp_offset : register(vs_3_0, c11);\nfloat3 vp_size : register(vs_3_0, c10);\ncolumn_major float4x4 world_view_matrix : register(vs_3_0, c4);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 normal : NORMAL;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n    float4 texcoord1 : TEXCOORD1;\n    float2 texcoord2 : TEXCOORD2;\n    float texcoord3 : TEXCOORD3;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float3 temp0, temp2;\n    float4 temp1;\n    // def c12, 2, -1, 0, 0\n    // dcl_position v0\n    // dcl_normal v1\n    // dcl_position o0\n    // dcl_texcoord o1\n    // dcl_texcoord1 o2\n    // dcl_texcoord2 o3.xy\n    // dcl_texcoord3 o4.x\n    // mov r0.x, c9.x\n    temp0.x = ref_depth_fog_end.x;\n    // add r0.x, r0.x, -c8.x\n    temp0.x = temp0.x + -ref_depth_fog_start.x;\n    // rcp o3.y, r0.x\n    o.texcoord2.y = 1.0f / temp0.x;\n    // mov r0.x, c12.x\n    temp0.x = float1(2);\n    // mov r1.xy, c10\n    temp1.xy = vp_size.xy;\n    // mad r0.xy, c11, r0.x, r1\n    temp0.xy = vp_offset.xy * temp0.xx + temp1.xy;\n    // add r0.xy, r0, c12.y\n    temp0.xy = temp0.xy + float2(-1, -1);\n    // dp4 r1.w, v0, c3\n    temp1.w = dot(i.position, (view_proj_matrix._m03_m13_m23_m33));\n    // mul r0.xy, r0, r1.w\n    temp0.xy = temp0.xy * temp1.ww;\n    // dp4 r1.x, v0, c0\n    temp1.x = dot(i.position, (view_proj_matrix._m00_m10_m20_m30));\n    // mad o1.x, r1.x, c10.x, r0.x\n    o.texcoord.x = temp1.x * vp_size.x + temp0.x;\n    // dp4 r1.y, v0, c1\n    temp1.y = dot(i.position, (view_proj_matrix._m01_m11_m21_m31));\n    // mad o1.y, r1.y, -c10.y, r0.y\n    o.texcoord.y = temp1.y * -vp_size.y + temp0.y;\n    // mad r0.xyz, v1, c12.x, c12.y\n    temp0.xyz = i.normal.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 r2.x, r0, c4\n    temp2.x = dot(temp0.xyz, (world_view_matrix._m00_m10_m20_m30).xyz);\n    // dp3 r2.y, r0, c5\n    temp2.y = dot(temp0.xyz, (world_view_matrix._m01_m11_m21_m31).xyz);\n    // dp3 r2.z, r0, c6\n    temp2.z = dot(temp0.xyz, (world_view_matrix._m02_m12_m22_m32).xyz);\n    // nrm r0.xyz, r2\n    temp0.xyz = normalize(temp2.xyz).xyz;\n    // dp4 r2.x, v0, c4\n    temp2.x = dot(i.position, (world_view_matrix._m00_m10_m20_m30));\n    // dp4 r2.y, v0, c5\n    temp2.y = dot(i.position, (world_view_matrix._m01_m11_m21_m31));\n    // dp4 r2.z, v0, c6\n    temp2.z = dot(i.position, (world_view_matrix._m02_m12_m22_m32));\n    // dp3 o2.w, r2, r0\n    o.texcoord1.w = dot(temp2.xyz, temp0.xyz);\n    // mov o2.xyz, r0\n    o.texcoord1.xyz = temp0.xyz;\n    // dp4 r1.z, v0, c2\n    temp1.z = dot(i.position, (view_proj_matrix._m02_m12_m22_m32));\n    // mov o0, r1\n    o.position = temp1;\n    // mov o1.zw, r1\n    o.texcoord.zw = temp1.zw;\n    // rcp r0.x, c7.x\n    temp0.x = 1.0f / camera_far_range.x;\n    // mul r0.x, r0.x, r1.z\n    temp0.x = temp0.x * temp1.z;\n    // mov o3.x, r0.x\n    o.texcoord2.x = temp0.x;\n    // mov o4.x, r0.x\n    o.texcoord3 = temp0.x;\n    // \n\n    return o;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."),(0,o.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"float3 camera_unprojection : register(ps_3_0, c1);\nsampler2D depth : register(ps_3_0, s0);\nfloat3 ref_depth_fog_color : register(ps_3_0, c3);\nfloat ref_depth_fog_start : register(ps_3_0, c2);\nfloat3 render_target_texel_offset : register(ps_3_0, c0);\nstruct PixelMain_Input\n{\n    float4 texcoord : TEXCOORD;\n    float4 texcoord1 : TEXCOORD1;\n    float2 texcoord2 : TEXCOORD2;\n};\n\nfloat4 PixelMain(PixelMain_Input i) : COLOR\n{\n    float4 out_color;\n    float3 temp0;\n    float4 temp1;\n    // def c4, 0.5, 1, -1, 0\n    // dcl_texcoord v0.xyw\n    // dcl_texcoord1 v1\n    // dcl_texcoord2 v2.y\n    // dcl_2d s0\n    // rcp r0.x, v0.w\n    temp0.x = 1.0f / i.texcoord.w;\n    // mul r0.yz, r0.x, v0.xxyw\n    temp0.yz = temp0.xx * i.texcoord.xy;\n    // mov r1.x, c4.x\n    temp1.x = float1(0.5);\n    // mad r0.yz, r0, r1.x, c0.xxyw\n    temp0.yz = temp0.yz * temp1.xx + render_target_texel_offset.xy;\n    // add r0.yz, r0, c4.x\n    temp0.yz = temp0.yz + float2(0.5, 0.5);\n    // texld r1, r0.yzzw, s0\n    temp1 = tex2D(depth, temp0.yz);\n    // mul r0.yz, c4, v0.xxyw\n    temp0.yz = float2(1, -1) * i.texcoord.xy;\n    // mul r0.yz, r0, c1.xxyw\n    temp0.yz = temp0.yz * camera_unprojection.xy;\n    // mul r0.xy, r0.x, r0.yzzw\n    temp0.xy = temp0.xx * temp0.yz;\n    // mov r0.z, c4.y\n    temp0.z = float1(1);\n    // mul r0.xyz, r1, r0\n    temp0.xyz = temp1.xyz * temp0.xyz;\n    // dp3 r0.x, r0, v1\n    temp0.x = dot(temp0.xyz, i.texcoord1.xyz);\n    // add r0.x, r0.x, -v1.w\n    temp0.x = temp0.x + -i.texcoord1.w;\n    // add r0.x, r0_abs.x, -c2.x\n    temp0.x = abs(temp0).x + -ref_depth_fog_start.x;\n    // mul_sat oC0.w, r0.x, v2.y\n    out_color.w = saturate(temp0.x * i.texcoord2.y);\n    // mov oC0.xyz, c3\n    out_color.xyz = ref_depth_fog_color.xyz;\n    // \n\n    return out_color;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."))}x.isMDXComponent=!0}}]);