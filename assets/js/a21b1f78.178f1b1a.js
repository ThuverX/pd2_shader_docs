"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[49347],{603905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(667294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,f=d["".concat(s,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(f,l(l({ref:t},c),{},{components:n})):a.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},424358:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(487462),r=(n(667294),n(603905));const i={id:0xaa7b6af699398000,title:"Generic Shadow Caster Alpha Masked Ati Diffuse Texture Diffuse Uvanim External Alpha Ref Opacity Texture Opacity Uvanim Self Illumination Self Illumination Bloom Self Illumination Uvanim"},l="Generic Shadow Caster Alpha Masked Ati Diffuse Texture Diffuse Uvanim External Alpha Ref Opacity Texture Opacity Uvanim Self Illumination Self Illumination Bloom Self Illumination Uvanim",o={unversionedId:"Generated/Shaders/Base/[3200-3300]/12284530015948341000",id:"Generated/Shaders/Base/[3200-3300]/12284530015948341000",title:"Generic Shadow Caster Alpha Masked Ati Diffuse Texture Diffuse Uvanim External Alpha Ref Opacity Texture Opacity Uvanim Self Illumination Self Illumination Bloom Self Illumination Uvanim",description:"(genericALPHAMASKEDDIFFUSETEXTUREEXTERNALALPHAREFOPACITYUVANIMSELFILLUMINATIONBLOOM:SELFILLUMINATION_UVANIM, 0xaa7b6af699397c76)",source:"@site/docs/Generated/Shaders/Base/[3200-3300]/0xaa7b6af699397c76.mdx",sourceDirName:"Generated/Shaders/Base/[3200-3300]",slug:"/Generated/Shaders/Base/[3200-3300]/12284530015948341000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3200-3300]/12284530015948341000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Base/[3200-3300]/0xaa7b6af699397c76.mdx",tags:[],version:"current",frontMatter:{id:"12284530015948341000",title:"Generic Shadow Caster Alpha Masked Ati Diffuse Texture Diffuse Uvanim External Alpha Ref Opacity Texture Opacity Uvanim Self Illumination Self Illumination Bloom Self Illumination Uvanim"},sidebar:"docsSidebar",previous:{title:"Generic Default Diffuse Texture Self Illumination Self Illumination Bloom Vertex Color",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3200-3300]/12278856473233330000"},next:{title:"Generic Shadow Caster Diffuse Texture Diffuse Uvanim Normalmap Nvidia Self Illumination Self Illumination Uvanim",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3200-3300]/12288447350649655000"}},s={},p=[{value:"Technique <code>ambient</code>",id:"technique-ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],c={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"generic-shadow-caster-alpha-masked-ati-diffuse-texture-diffuse-uvanim-external-alpha-ref-opacity-texture-opacity-uvanim-self-illumination-self-illumination-bloom-self-illumination-uvanim"},"Generic Shadow Caster Alpha Masked Ati Diffuse Texture Diffuse Uvanim External Alpha Ref Opacity Texture Opacity Uvanim Self Illumination Self Illumination Bloom Self Illumination Uvanim"),(0,r.kt)("p",null,"(",(0,r.kt)("inlineCode",{parentName:"p"},"generic:shadow_caster:ALPHA_MASKED:ATI:DIFFUSE_TEXTURE:DIFFUSE_UVANIM:EXTERNAL_ALPHA_REF:OPACITY_TEXTURE:OPACITY_UVANIM:SELF_ILLUMINATION:SELF_ILLUMINATION_BLOOM:SELF_ILLUMINATION_UVANIM"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"0xaa7b6af699397c76"),")"),(0,r.kt)("p",null,"This template is referenced 1 time by ",(0,r.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/base.render_template_database#generic-alpha-masked-diffuse-texture-diffuse-uvanim-external-alpha-ref-opacity-texture-opacity-uvanim-self-illumination-self-illumination-bloom-self-illumination-uvanim"},"generic:ALPHA_MASKED:DIFFUSE_TEXTURE:DIFFUSE_UVANIM:EXTERNAL_ALPHA_REF:OPACITY_TEXTURE:OPACITY_UVANIM:SELF_ILLUMINATION:SELF_ILLUMINATION_BLOOM:SELF_ILLUMINATION_UVANIM"),".\nThis template uses the following inputs:\n|Name|UI Name|Type|\n|---|---|---|\n|diffuse_texture|Diffuse Texture (UV1)|texture|\n|opacity_texture|Alpha Mask (UV5)|texture|\n|uv_speed|UV Speed|vector3|\n|alpha_ref|Alpha Mask Reference|scalar|\n|self_illumination_texture|Self Illumination Texture (UV4)|texture|\n|il_bloom|Self Illumination Bloom|scalar|\n|il_multiplier|Self Illumination Intensity Multiplier|scalar|."),(0,r.kt)("h3",{id:"technique-ambient"},"Technique ",(0,r.kt)("inlineCode",{parentName:"h3"},"ambient")),(0,r.kt)("h3",{id:"render-states"},"Render States"),(0,r.kt)("p",null,"More info can be found on the ",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 1,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 2,\n    D3DRS_COLORWRITEENABLE = 0,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 961656599,\n    D3DRS_SLOPESCALEDEPTHBIAS = 1075838976,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,r.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,r.kt)("p",null,"More info can be found on the ",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,r.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 2,\n    D3DSAMP_MINFILTER = 2,\n    D3DSAMP_MIPFILTER = 2,\n};\n")),(0,r.kt)("h3",{id:"shaders"},"Shaders"),(0,r.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-hlsl"},"float ref_time : register(vs_3_0, c4);\nfloat3 ref_uv_speed : register(vs_3_0, c5);\ncolumn_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 texcoord4 : TEXCOORD4;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float texcoord1 : TEXCOORD1;\n    float2 texcoord4 : TEXCOORD4;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float temp0;\n    // dcl_position v0\n    // dcl_texcoord4 v1\n    // dcl_position o0\n    // dcl_texcoord1 o1.x\n    // dcl_texcoord4 o2.xy\n    // dp4 o0.x, v0, c0\n    o.position.x = dot(i.position, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, v0, c1\n    o.position.y = dot(i.position, (view_proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.w, v0, c3\n    o.position.w = dot(i.position, (view_proj_matrix._m03_m13_m23_m33));\n    // mov r0.x, c4.x\n    temp0.x = ref_time.x;\n    // mad o2.xy, r0.x, c5, v1\n    o.texcoord4 = temp0.x * ref_uv_speed + i.texcoord4;\n    // dp4 r0.x, v0, c2\n    temp0.x = dot(i.position, (view_proj_matrix._m02_m12_m22_m32));\n    // mov o0.z, r0.x\n    o.position.z = temp0.x;\n    // mov o1.x, r0.x\n    o.texcoord1 = temp0.x;\n    // \n\n    return o;\n}\n")),(0,r.kt)("p",null,"Decompiled by DXDecompiler."),(0,r.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D opacity_texture : register(ps_3_0, s0);\nfloat ref_alpha_ref : register(ps_3_0, c0);\nstruct PixelMain_Input\n{\n    float texcoord1 : TEXCOORD1;\n    float2 texcoord4 : TEXCOORD4;\n};\n\nfloat4 PixelMain(PixelMain_Input i) : COLOR\n{\n    float4 out_color;\n    float4 temp0;\n    // def c1, 1, -1, 0, 0\n    // dcl_texcoord1 v0.x\n    // dcl_texcoord4 v1.xy\n    // dcl_2d s0\n    // texld_pp r0, v1, s0\n    temp0 = /* not implemented _pp modifier */ tex2D(opacity_texture, i.texcoord4.xy);\n    // add r0.x, r0.y, -c0.x\n    temp0.x = temp0.y + -ref_alpha_ref.x;\n    // cmp r0, r0.x, c1.x, c1.y\n    temp0 = (temp0.x >= 0) ? float4(1, 1, 1, 1) : float4(-1, -1, -1, -1);\n    // texkill r0\n    clip(temp0);\n    // mul oC0, c1.xzzz, v0.x\n    out_color = float4(1, 0, 0, 0) * i.texcoord1.x;\n    // \n\n    return out_color;\n}\n")),(0,r.kt)("p",null,"Decompiled by DXDecompiler."))}m.isMDXComponent=!0}}]);