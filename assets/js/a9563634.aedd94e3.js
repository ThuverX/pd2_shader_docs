"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[91783],{3905:(e,a,r)=>{r.d(a,{Zo:()=>s,kt:()=>x});var t=r(67294);function n(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function o(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?o(Object(r),!0).forEach((function(a){n(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function i(e,a){if(null==e)return{};var r,t,n=function(e,a){if(null==e)return{};var r,t,n={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],a.indexOf(r)>=0||(n[r]=e[r]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=t.createContext({}),d=function(e){var a=t.useContext(p),r=a;return e&&(r="function"==typeof e?e(a):l(l({},a),e)),r},s=function(e){var a=d(e.components);return t.createElement(p.Provider,{value:a},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var r=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=d(r),u=n,x=m["".concat(p,".").concat(u)]||m[u]||c[u]||o;return r?t.createElement(x,l(l({ref:a},s),{},{components:r})):t.createElement(x,l({ref:a},s))}));function x(e,a){var r=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=u;var i={};for(var p in a)hasOwnProperty.call(a,p)&&(i[p]=a[p]);i.originalType=e,i[m]="string"==typeof e?e:n,l[1]=i;for(var d=2;d<o;d++)l[d]=r[d];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},47847:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var t=r(87462),n=(r(67294),r(3905));const o={id:0x5e241fb70d948800,title:"Generic Shadow Caster Diffuse Texture Normalmap Normalmap Depth Texture Normalmap Uv1 Nvidia Parallax Parallax Animation Parallax Animation Uv2 Parallax Animation Vertex Alpha Mask Parallax Relief Vertex Color"},l="Generic Shadow Caster Diffuse Texture Normalmap Normalmap Depth Texture Normalmap Uv1 Nvidia Parallax Parallax Animation Parallax Animation Uv2 Parallax Animation Vertex Alpha Mask Parallax Relief Vertex Color",i={unversionedId:"Generated/Shaders/Base/[1700-1800]/6783581809794124000",id:"Generated/Shaders/Base/[1700-1800]/6783581809794124000",title:"Generic Shadow Caster Diffuse Texture Normalmap Normalmap Depth Texture Normalmap Uv1 Nvidia Parallax Parallax Animation Parallax Animation Uv2 Parallax Animation Vertex Alpha Mask Parallax Relief Vertex Color",description:"(genericDIFFUSETEXTURENORMALMAPDEPTHTEXTURENVIDIAPARALLAXANIMATIONPARALLAXANIMATIONVERTEXALPHAMASKVERTEXCOLOR, 0x5e241fb70d9488a6)",source:"@site/docs/Generated/Shaders/Base/[1700-1800]/0x5e241fb70d9488a6.mdx",sourceDirName:"Generated/Shaders/Base/[1700-1800]",slug:"/Generated/Shaders/Base/[1700-1800]/6783581809794124000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[1700-1800]/6783581809794124000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/docs/Generated/Shaders/Base/[1700-1800]/0x5e241fb70d9488a6.mdx",tags:[],version:"current",frontMatter:{id:"6783581809794124000",title:"Generic Shadow Caster Diffuse Texture Normalmap Normalmap Depth Texture Normalmap Uv1 Nvidia Parallax Parallax Animation Parallax Animation Uv2 Parallax Animation Vertex Alpha Mask Parallax Relief Vertex Color"},sidebar:"docsSidebar",previous:{title:"Generic Shadow Caster Alpha Masked Diffuse Texture Opacity Texture Vertex Color",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[1700-1800]/6781433634942890000"},next:{title:"Generic Shadow Caster Ati Contour Diffuse Texture Vertex Color",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[1700-1800]/6787354137421368000"}},p={},d=[{value:"Technique <code>ambient</code>",id:"technique-ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],s={toc:d},m="wrapper";function c(e){let{components:a,...r}=e;return(0,n.kt)(m,(0,t.Z)({},s,r,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"generic-shadow-caster-diffuse-texture-normalmap-normalmap-depth-texture-normalmap-uv1-nvidia-parallax-parallax-animation-parallax-animation-uv2-parallax-animation-vertex-alpha-mask-parallax-relief-vertex-color"},"Generic Shadow Caster Diffuse Texture Normalmap Normalmap Depth Texture Normalmap Uv1 Nvidia Parallax Parallax Animation Parallax Animation Uv2 Parallax Animation Vertex Alpha Mask Parallax Relief Vertex Color"),(0,n.kt)("p",null,"(",(0,n.kt)("inlineCode",{parentName:"p"},"generic:shadow_caster:DIFFUSE_TEXTURE:NORMALMAP:NORMALMAP_DEPTH_TEXTURE:NORMALMAP_UV1:NVIDIA:PARALLAX:PARALLAX_ANIMATION:PARALLAX_ANIMATION_UV2:PARALLAX_ANIMATION_VERTEX_ALPHA_MASK:PARALLAX_RELIEF:VERTEX_COLOR"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"0x5e241fb70d9488a6"),")"),(0,n.kt)("h3",{id:"technique-ambient"},"Technique ",(0,n.kt)("inlineCode",{parentName:"h3"},"ambient")),(0,n.kt)("h3",{id:"render-states"},"Render States"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 1,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 2,\n    D3DRS_COLORWRITEENABLE = 0,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 961656599,\n    D3DRS_SLOPESCALEDEPTHBIAS = 1075838976,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,n.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,n.kt)("h3",{id:"shaders"},"Shaders"),(0,n.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float texcoord1 : TEXCOORD1;\n};\n\nVertexMain_Output VertexMain(float4 position : POSITION)\n{\n    VertexMain_Output o;\n    float temp0;\n    // dcl_position v0\n    // dcl_position o0\n    // dcl_texcoord1 o1.x\n    // dp4 o0.x, v0, c0\n    o.position.x = dot(position, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, v0, c1\n    o.position.y = dot(position, (view_proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.w, v0, c3\n    o.position.w = dot(position, (view_proj_matrix._m03_m13_m23_m33));\n    // dp4 r0.x, v0, c2\n    temp0.x = dot(position, (view_proj_matrix._m02_m12_m22_m32));\n    // mov o0.z, r0.x\n    o.position.z = temp0.x;\n    // mov o1.x, r0.x\n    o.texcoord1 = temp0.x;\n    // \n\n    return o;\n}\n")),(0,n.kt)("p",null,"Decompiled by DXDecompiler."),(0,n.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-hlsl"},"float4 PixelMain(float texcoord1 : TEXCOORD1) : COLOR\n{\n    float4 out_color;\n    // def c0, 1, 0, 0, 0\n    // dcl_texcoord1 v0.x\n    // mul oC0, c0.xyyy, v0.x\n    out_color = float4(1, 0, 0, 0) * texcoord1.x;\n    // \n\n    return out_color;\n}\n")),(0,n.kt)("p",null,"Decompiled by DXDecompiler."))}c.isMDXComponent=!0}}]);