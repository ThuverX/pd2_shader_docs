"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[4316],{603905:(e,n,t)=>{t.d(n,{Zo:()=>i,kt:()=>x});var r=t(667294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):m(m({},n),e)),t},i=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},_="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},s=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,i=d(e,["components","mdxType","originalType","parentName"]),_=l(t),s=o,x=_["".concat(p,".").concat(s)]||_[s]||c[s]||a;return t?r.createElement(x,m(m({ref:n},i),{},{components:t})):r.createElement(x,m({ref:n},i))}));function x(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,m=new Array(a);m[0]=s;var d={};for(var p in n)hasOwnProperty.call(n,p)&&(d[p]=n[p]);d.originalType=e,d[_]="string"==typeof e?e:o,m[1]=d;for(var l=2;l<a;l++)m[l]=t[l];return r.createElement.apply(null,m)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},401683:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>m,default:()=>c,frontMatter:()=>a,metadata:()=>d,toc:()=>l});var r=t(487462),o=(t(667294),t(603905));const a={id:0x58785d412b140c00,title:"Generic Default Blend Diffuse Blend Mask D A Blend Smooth Blend Tint Second Cube Environment Mapping Diffuse Texture Rl Core Environment"},m="Generic Default Blend Diffuse Blend Mask D A Blend Smooth Blend Tint Second Cube Environment Mapping Diffuse Texture Rl Core Environment",d={unversionedId:"Generated/Shaders/Base/[1600-1700]/6374947807019929000",id:"Generated/Shaders/Base/[1600-1700]/6374947807019929000",title:"Generic Default Blend Diffuse Blend Mask D A Blend Smooth Blend Tint Second Cube Environment Mapping Diffuse Texture Rl Core Environment",description:"(genericBLENDDIFFUSEBLENDSMOOTHCUBEENVIRONMENTMAPPINGRLCOREENVIRONMENT, 0x58785d412b140a9b)",source:"@site/docs/Generated/Shaders/Base/[1600-1700]/0x58785d412b140a9b.mdx",sourceDirName:"Generated/Shaders/Base/[1600-1700]",slug:"/Generated/Shaders/Base/[1600-1700]/6374947807019929000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[1600-1700]/6374947807019929000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Base/[1600-1700]/0x58785d412b140a9b.mdx",tags:[],version:"current",frontMatter:{id:"6374947807019929000",title:"Generic Default Blend Diffuse Blend Mask D A Blend Smooth Blend Tint Second Cube Environment Mapping Diffuse Texture Rl Core Environment"},sidebar:"docsSidebar",previous:{title:"Generic Shadow Caster Blue Mask Tint Diffuse Texture Instanced Nvidia Rl Bigprops",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[1600-1700]/6368562508238520000"},next:{title:"Generic Shadow Caster Blend Diffuse Blend Mask D A Blend Smooth Blend Tint Second Diffuse Texture Instanced Normalmap Nvidia Rl Environment",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[1600-1700]/6376035759682382000"}},p={},l=[{value:"Technique <code>deferred_core_environment</code>",id:"technique-deferred_core_environment",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Sampler 1",id:"sampler-1",level:4},{value:"Sampler 2",id:"sampler-2",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],i={toc:l},_="wrapper";function c(e){let{components:n,...t}=e;return(0,o.kt)(_,(0,r.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"generic-default-blend-diffuse-blend-mask-d-a-blend-smooth-blend-tint-second-cube-environment-mapping-diffuse-texture-rl-core-environment"},"Generic Default Blend Diffuse Blend Mask D A Blend Smooth Blend Tint Second Cube Environment Mapping Diffuse Texture Rl Core Environment"),(0,o.kt)("p",null,"(",(0,o.kt)("inlineCode",{parentName:"p"},"generic:default:BLEND_DIFFUSE:BLEND_MASK_D_A:BLEND_SMOOTH:BLEND_TINT_SECOND:CUBE_ENVIRONMENT_MAPPING:DIFFUSE_TEXTURE:RL_CORE_ENVIRONMENT"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"0x58785d412b140a9b"),")"),(0,o.kt)("p",null,"This template is referenced 1 time by ",(0,o.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/base.render_template_database#generic-blend-diffuse-blend-mask-d-a-blend-smooth-blend-tint-second-cube-environment-mapping-diffuse-texture-rl-core-environment"},"generic:BLEND_DIFFUSE:BLEND_MASK_D_A:BLEND_SMOOTH:BLEND_TINT_SECOND:CUBE_ENVIRONMENT_MAPPING:DIFFUSE_TEXTURE:RL_CORE_ENVIRONMENT"),".\nThis template uses the following inputs:\n|Name|UI Name|Type|\n|---|---|---|\n|diffuse_texture|Diffuse Texture (UV1)|texture|\n|diffuse_layer0_texture|Second diffuse (Shifted UV1)|texture|\n|reflection_texture|Reflection Cube|texture|."),(0,o.kt)("h3",{id:"technique-deferred_core_environment"},"Technique ",(0,o.kt)("inlineCode",{parentName:"h3"},"deferred_core_environment")),(0,o.kt)("h3",{id:"render-states"},"Render States"),(0,o.kt)("p",null,"More info can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 1,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 2,\n    D3DRS_COLORWRITEENABLE = 15,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,o.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,o.kt)("p",null,"More info can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,o.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h4",{id:"sampler-1"},"Sampler 1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h4",{id:"sampler-2"},"Sampler 2"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h3",{id:"shaders"},"Shaders"),(0,o.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"float camera_near_range : register(vs_3_0, c12);\ncolumn_major float4x4 proj_matrix : register(vs_3_0, c8);\ncolumn_major float4x4 view_matrix : register(vs_3_0, c4);\ncolumn_major float4x4 world_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 normal : NORMAL;\n    float4 texcoord : TEXCOORD;\n    float4 color : COLOR;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float texcoord1 : TEXCOORD1;\n    float2 texcoord : TEXCOORD;\n    float3 texcoord2 : TEXCOORD2;\n    float3 texcoord5 : TEXCOORD5;\n    float4 color : COLOR;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0, temp1;\n    // def c13, 2, -1, 1, 0\n    // dcl_position v0\n    // dcl_normal v1\n    // dcl_texcoord v2\n    // dcl_color v3\n    // dcl_position o0\n    // dcl_texcoord1 o1.x\n    // dcl_texcoord o2.xy\n    // dcl_texcoord2 o3.xyz\n    // dcl_texcoord5 o4.xyz\n    // dcl_color o5\n    // dp4 r0.w, v0, c3\n    temp0.w = dot(i.position, (world_matrix._m03_m13_m23_m33));\n    // dp4 r0.x, v0, c0\n    temp0.x = dot(i.position, (world_matrix._m00_m10_m20_m30));\n    // dp4 r0.y, v0, c1\n    temp0.y = dot(i.position, (world_matrix._m01_m11_m21_m31));\n    // dp4 r0.z, v0, c2\n    temp0.z = dot(i.position, (world_matrix._m02_m12_m22_m32));\n    // dp4 r1.x, r0, c4\n    temp1.x = dot(temp0, (view_matrix._m00_m10_m20_m30));\n    // dp4 r1.y, r0, c5\n    temp1.y = dot(temp0, (view_matrix._m01_m11_m21_m31));\n    // dp4 r1.z, r0, c6\n    temp1.z = dot(temp0, (view_matrix._m02_m12_m22_m32));\n    // dp4 r1.w, r0, c7\n    temp1.w = dot(temp0, (view_matrix._m03_m13_m23_m33));\n    // mov o4.xyz, r0\n    o.texcoord5 = temp0;\n    // dp4 o0.x, r1, c8\n    o.position.x = dot(temp1, (proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, r1, c9\n    o.position.y = dot(temp1, (proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.w, r1, c11\n    o.position.w = dot(temp1, (proj_matrix._m03_m13_m23_m33));\n    // dp4 r0.x, r1, c10\n    temp0.x = dot(temp1, (proj_matrix._m02_m12_m22_m32));\n    // add o1.x, r0.x, c12.x\n    o.texcoord1 = temp0.x + camera_near_range.x;\n    // mov o0.z, r0.x\n    o.position.z = temp0.x;\n    // mad r0.xyz, v1, c13.x, c13.y\n    temp0.xyz = i.normal.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 o3.x, r0, c0\n    o.texcoord2.x = dot(temp0.xyz, (world_matrix._m00_m10_m20_m30).xyz);\n    // dp3 o3.y, r0, c1\n    o.texcoord2.y = dot(temp0.xyz, (world_matrix._m01_m11_m21_m31).xyz);\n    // dp3 o3.z, r0, c2\n    o.texcoord2.z = dot(temp0.xyz, (world_matrix._m02_m12_m22_m32).xyz);\n    // mov o2.xy, v2\n    o.texcoord = i.texcoord;\n    // mul o5, c13.xxxz, v3\n    o.color = float4(2, 2, 2, 1) * i.color;\n    // \n\n    return o;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."),(0,o.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 camera_world_matrix : register(ps_3_0, c0);\nsampler2D diffuse_layer0_texture : register(ps_3_0, s1);\nsampler2D diffuse_texture : register(ps_3_0, s0);\nsamplerCUBE reflection_texture : register(ps_3_0, s2);\nstruct PixelMain_Input\n{\n    float texcoord1 : TEXCOORD1;\n    float2 texcoord : TEXCOORD;\n    float3 texcoord2 : TEXCOORD2;\n    float3 texcoord5 : TEXCOORD5;\n    float4 color : COLOR;\n};\n\nstruct PixelMain_Output\n{\n    float4 color : COLOR;\n    float4 color1 : COLOR1;\n    float4 color2 : COLOR2;\n};\n\nPixelMain_Output PixelMain(PixelMain_Input i)\n{\n    PixelMain_Output o;\n    float4 temp0, temp1, temp2, temp3, temp4;\n    // def c3, 5, -1, 1, 0.25\n    // def c4, 0.5, 0.4, 0, 0\n    // dcl_texcoord1 v0.x\n    // dcl_texcoord v1.xy\n    // dcl_texcoord2_pp v2.xyz\n    // dcl_texcoord5 v3.xyz\n    // dcl_color_pp v4\n    // dcl_2d s0\n    // dcl_2d s1\n    // dcl_cube s2\n    // add r0.x, c0.w, -v3.x\n    temp0.x = (camera_world_matrix._m00_m10_m20_m30).w + -i.texcoord5.x;\n    // add r0.y, c1.w, -v3.y\n    temp0.y = (camera_world_matrix._m01_m11_m21_m31).w + -i.texcoord5.y;\n    // add r0.z, c2.w, -v3.z\n    temp0.z = (camera_world_matrix._m02_m12_m22_m32).w + -i.texcoord5.z;\n    // nrm r1.xyz, r0\n    temp1.xyz = normalize(temp0.xyz).xyz;\n    // dp3 r0.x, v2, r1\n    temp0.x = dot(i.texcoord2.xyz, temp1.xyz);\n    // add r0.y, r0.x, r0.x\n    temp0.y = temp0.x + temp0.x;\n    // mov_sat r0.x, r0.x\n    temp0.x = saturate(temp0.x);\n    // add r0.x, -r0.x, c3.z\n    temp0.x = -temp0.x + float1(1);\n    // dp2add r0.x, r0.x, r0.x, c3.w\n    temp0.x = dot(temp0.xx, temp0.xx) + float1(0.25);\n    // mad r0.yzw, r0.y, -v2.xxyz, r1.xxyz\n    temp0.yzw = temp0.yyy * -i.texcoord2.xyz + temp1.xyz;\n    // texld r1, r0.yzww, s2\n    temp1 = texCUBE(reflection_texture, temp0.yzw);\n    // texld_pp r2, v1, s0\n    temp2 = /* not implemented _pp modifier */ tex2D(diffuse_texture, i.texcoord.xy);\n    // add r0.yzw, c3.y, v4.xxyz\n    temp0.yzw = float3(-1, -1, -1) + i.color.xyz;\n    // texld_pp r3, v1, s1\n    temp3 = /* not implemented _pp modifier */ tex2D(diffuse_layer0_texture, i.texcoord.xy);\n    // mad r0.yzw, r3.z, r0, c3.z\n    temp0.yzw = temp3.zzz * temp0.yzw + float3(1, 1, 1);\n    // mul_pp r4.xyz, r0.yzww, r3.y\n    temp4.xyz = /* not implemented _pp modifier */ temp0.yzw * temp3.yyy;\n    // add_pp r0.y, r3.w, -v4.w\n    temp0.y = /* not implemented _pp modifier */ temp3.w + -i.color.w;\n    // mov_pp r4.w, r3.x\n    temp4.w = /* not implemented _pp modifier */ temp3.x;\n    // mul_sat_pp r0.y, r0.y, c3.x\n    ;// error\n    // lrp_pp r3, r0.y, r2, r4\n    temp3 = /* not implemented _pp modifier */ lerp(temp4, temp2, temp0.y);\n    // mul r0.x, r0.x, r3.w\n    temp0.x = temp0.x * temp3.w;\n    // mad_pp oC0.xyz, r1, r0.x, r3\n    o.color.xyz = /* not implemented _pp modifier */ temp1.xyz * temp0.xxx + temp3.xyz;\n    // mov_pp oC1.w, r3.w\n    o.color1.w = /* not implemented _pp modifier */ temp3.w;\n    // nrm_pp r0.xyz, v2\n    temp0.xyz = /* not implemented _pp modifier */ normalize(i.texcoord2.xyz).xyz;\n    // mad_pp oC1.xyz, r0, c4.x, c4.x\n    o.color1.xyz = /* not implemented _pp modifier */ temp0.xyz * float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5);\n    // mov oC0.w, c4.y\n    o.color.w = float1(0.4);\n    // mov oC2, v0.x\n    o.color2 = i.texcoord1.x;\n    // \n\n    return o;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."))}c.isMDXComponent=!0}}]);