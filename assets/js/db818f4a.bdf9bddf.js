"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[41390],{603905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>x});var r=n(667294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):m(m({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},_=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),s=l(n),_=a,x=s["".concat(i,".").concat(_)]||s[_]||c[_]||o;return n?r.createElement(x,m(m({ref:t},p),{},{components:n})):r.createElement(x,m({ref:t},p))}));function x(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,m=new Array(o);m[0]=_;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d[s]="string"==typeof e?e:a,m[1]=d;for(var l=2;l<o;l++)m[l]=n[l];return r.createElement.apply(null,m)}return r.createElement.apply(null,n)}_.displayName="MDXCreateElement"},296827:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>m,default:()=>c,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var r=n(487462),a=(n(667294),n(603905));const o={id:0xaf1c73519f46f800,title:"Shadow Caster Only Shadow Caster Double Sided Shadow Caster Only Vegetation Bending"},m="Shadow Caster Only Shadow Caster Double Sided Shadow Caster Only Vegetation Bending",d={unversionedId:"Generated/Shaders/Base/[3200-3300]/12618087050387060000",id:"Generated/Shaders/Base/[3200-3300]/12618087050387060000",title:"Shadow Caster Only Shadow Caster Double Sided Shadow Caster Only Vegetation Bending",description:"(shadowcasteronlyDOUBLESIDEDVEGETATION_BENDING, 0xaf1c73519f46f9e6)",source:"@site/docs/Generated/Shaders/Base/[3200-3300]/0xaf1c73519f46f9e6.mdx",sourceDirName:"Generated/Shaders/Base/[3200-3300]",slug:"/Generated/Shaders/Base/[3200-3300]/12618087050387060000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3200-3300]/12618087050387060000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Base/[3200-3300]/0xaf1c73519f46f9e6.mdx",tags:[],version:"current",frontMatter:{id:"12618087050387060000",title:"Shadow Caster Only Shadow Caster Double Sided Shadow Caster Only Vegetation Bending"},sidebar:"docsSidebar",previous:{title:"Generic Shadow Caster Blend Diffuse Blend Gsma Blend Mask Control Blend Mask Crossblend Blend Normal Cube Environment Mapping Diffuse Texture Gloss Blurs Cubemap Gsma Texture Normalmap Nvidia Skinned 1weight Vertex Color",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3200-3300]/12613145990642910000"},next:{title:"Opacity Default Ati Cube Environment Mapping Cube Fresnel Diffuse Texture Fps Self Illumination",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3200-3300]/12622567210610491000"}},i={},l=[{value:"Technique <code>ambient</code>",id:"technique-ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],p={toc:l},s="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(s,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"shadow-caster-only-shadow-caster-double-sided-shadow-caster-only-vegetation-bending"},"Shadow Caster Only Shadow Caster Double Sided Shadow Caster Only Vegetation Bending"),(0,a.kt)("p",null,"(",(0,a.kt)("inlineCode",{parentName:"p"},"shadow_caster_only:shadow_caster:DOUBLE_SIDED:SHADOW_CASTER_ONLY:VEGETATION_BENDING"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0xaf1c73519f46f9e6"),")"),(0,a.kt)("p",null,"This template is referenced 1 time by ",(0,a.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/base.render_template_database#shadow-caster-only-double-sided-vegetation-bending"},"shadow_caster_only:DOUBLE_SIDED:VEGETATION_BENDING"),".\nThis template uses the following inputs:\n|Name|UI Name|Type|\n|---|---|---|\n|speed|Speed|scalar|\n|detail_settings|Detail Bending Amplitude / Frequency|vector3|\n|branch_settings|Branch Bending Amplitude / Frequency|vector3|."),(0,a.kt)("h3",{id:"technique-ambient"},"Technique ",(0,a.kt)("inlineCode",{parentName:"h3"},"ambient")),(0,a.kt)("h3",{id:"render-states"},"Render States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 1,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 1,\n    D3DRS_COLORWRITEENABLE = 15,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 961656599,\n    D3DRS_SLOPESCALEDEPTHBIAS = 1075838976,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,a.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,a.kt)("h3",{id:"shaders"},"Shaders"),(0,a.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 proj_matrix : register(vs_3_0, c8);\nfloat3 ref_branch_settings : register(vs_3_0, c15);\nfloat3 ref_detail_settings : register(vs_3_0, c14);\nfloat ref_speed : register(vs_3_0, c13);\nfloat ref_time : register(vs_3_0, c12);\ncolumn_major float4x4 view_matrix : register(vs_3_0, c4);\ncolumn_major float4x4 world_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 normal : NORMAL;\n    float4 color : COLOR;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float texcoord1 : TEXCOORD1;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0, temp1;\n    float3 temp2;\n    // def c16, 2, -1, 1, -0.5\n    // def c17, 1.975, 0.793, 0.375, 0.193\n    // def c18, 2, 3, 0, 0\n    // dcl_position v0\n    // dcl_normal v1\n    // dcl_color v2\n    // dcl_position o0\n    // dcl_texcoord1 o1.x\n    // mov r0.x, c0.w\n    temp0.x = (world_matrix._m00_m10_m20_m30).w;\n    // mov r0.y, c1.w\n    temp0.y = (world_matrix._m01_m11_m21_m31).w;\n    // mov r0.z, c2.w\n    temp0.z = (world_matrix._m02_m12_m22_m32).w;\n    // dp3 r0.x, r0, c16.z\n    temp0.x = dot(temp0.xyz, float3(1, 1, 1));\n    // add r0.x, r0.x, v2.y\n    temp0.x = temp0.x + i.color.y;\n    // add r0.x, r0.x, c12.x\n    temp0.x = temp0.x + ref_time.x;\n    // mul r0.zw, r0.x, c15.y\n    temp0.zw = temp0.x * ref_branch_settings.y;\n    // add r1.x, c12.x, v2.y\n    temp1.x = ref_time.x + i.color.y;\n    // mul r0.xy, r1.x, c14.y\n    temp0.xy = temp1.x * ref_detail_settings.y;\n    // mul r0, r0, c13.x\n    temp0 = temp0 * ref_speed.x;\n    // mul r0, r0, c17\n    temp0 = temp0 * float4(1.975, 0.793, 0.375, 0.193);\n    // frc r0, r0\n    temp0 = frac(temp0);\n    // mad r0, r0, c16.x, c16.w\n    temp0 = temp0 * float4(2, 2, 2, 2) + float4(-0.5, -0.5, -0.5, -0.5);\n    // frc r0, r0\n    temp0 = frac(temp0);\n    // mad r0, r0, c16.x, c16.y\n    temp0 = temp0 * float4(2, 2, 2, 2) + float4(-1, -1, -1, -1);\n    // mul r1, r0_abs, r0_abs\n    temp1 = abs(temp0) * abs(temp0);\n    // mad r0, r0_abs, -c18.x, c18.y\n    temp0 = abs(temp0) * float4(-2, -2, -2, -2) + float4(3, 3, 3, 3);\n    // mul r0, r0, r1\n    temp0 = temp0 * temp1;\n    // add r0.xyz, r0.yyww, r0.xxzw\n    temp0.xyz = temp0.yyw + temp0.xxz;\n    // mul r0.w, v2.z, v2.x\n    temp0.w = i.color.z * i.color.x;\n    // mul r0.w, r0.w, c14.x\n    temp0.w = temp0.w * ref_detail_settings.x;\n    // mad r1.xyz, v1, c16.x, c16.y\n    temp1.xyz = i.normal.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 r2.x, r1, c0\n    temp2.x = dot(temp1.xyz, (world_matrix._m00_m10_m20_m30).xyz);\n    // dp3 r2.y, r1, c1\n    temp2.y = dot(temp1.xyz, (world_matrix._m01_m11_m21_m31).xyz);\n    // mul r1.xy, r0.w, r2\n    temp1.xy = temp0.ww * temp2.xy;\n    // dp4 r2.x, v0, c0\n    temp2.x = dot(i.position, (world_matrix._m00_m10_m20_m30));\n    // dp4 r2.y, v0, c1\n    temp2.y = dot(i.position, (world_matrix._m01_m11_m21_m31));\n    // dp4 r2.z, v0, c2\n    temp2.z = dot(i.position, (world_matrix._m02_m12_m22_m32));\n    // mul r1.z, c15.x, v2.z\n    temp1.z = ref_branch_settings.x * i.color.z;\n    // mad r0.xyz, r0, r1, r2\n    temp0.xyz = temp0.xyz * temp1.xyz + temp2.xyz;\n    // dp4 r0.w, v0, c3\n    temp0.w = dot(i.position, (world_matrix._m03_m13_m23_m33));\n    // dp4 r1.x, r0, c4\n    temp1.x = dot(temp0, (view_matrix._m00_m10_m20_m30));\n    // dp4 r1.y, r0, c5\n    temp1.y = dot(temp0, (view_matrix._m01_m11_m21_m31));\n    // dp4 r1.z, r0, c6\n    temp1.z = dot(temp0, (view_matrix._m02_m12_m22_m32));\n    // dp4 r1.w, r0, c7\n    temp1.w = dot(temp0, (view_matrix._m03_m13_m23_m33));\n    // dp4 o0.x, r1, c8\n    o.position.x = dot(temp1, (proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, r1, c9\n    o.position.y = dot(temp1, (proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.w, r1, c11\n    o.position.w = dot(temp1, (proj_matrix._m03_m13_m23_m33));\n    // dp4 r0.x, r1, c10\n    temp0.x = dot(temp1, (proj_matrix._m02_m12_m22_m32));\n    // mov o0.z, r0.x\n    o.position.z = temp0.x;\n    // mov o1.x, r0.x\n    o.texcoord1 = temp0.x;\n    // \n\n    return o;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."),(0,a.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"float4 PixelMain(float texcoord1 : TEXCOORD1) : COLOR\n{\n    float4 out_color;\n    // def c0, 1, 0, 0, 0\n    // dcl_texcoord1 v0.x\n    // mul oC0, c0.xyyy, v0.x\n    out_color = float4(1, 0, 0, 0) * texcoord1.x;\n    // \n\n    return out_color;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."))}c.isMDXComponent=!0}}]);