"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[85233],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),d=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",D={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},_=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=d(n),_=a,m=c["".concat(p,".").concat(_)]||c[_]||D[_]||o;return n?r.createElement(m,l(l({ref:t},s),{},{components:n})):r.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=_;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var d=2;d<o;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}_.displayName="MDXCreateElement"},6695:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>D,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=n(87462),a=(n(67294),n(3905));const o={id:616219872329056e4,title:"Effect Default Blend Mul Diffuse0 Texture Threshold Reveal"},l="Effect Default Blend Mul Diffuse0 Texture Threshold Reveal",i={unversionedId:"Generated/Shaders/Base/[1600-1700]/6162198723290560000",id:"Generated/Shaders/Base/[1600-1700]/6162198723290560000",title:"Effect Default Blend Mul Diffuse0 Texture Threshold Reveal",description:"(effectBLENDMULTHRESHOLD_REVEAL, 0x55848717111979ff)",source:"@site/docs/Generated/Shaders/Base/[1600-1700]/0x55848717111979ff.mdx",sourceDirName:"Generated/Shaders/Base/[1600-1700]",slug:"/Generated/Shaders/Base/[1600-1700]/6162198723290560000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[1600-1700]/6162198723290560000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/docs/Generated/Shaders/Base/[1600-1700]/0x55848717111979ff.mdx",tags:[],version:"current",frontMatter:{id:"6162198723290560000",title:"Effect Default Blend Mul Diffuse0 Texture Threshold Reveal"},sidebar:"docsSidebar",previous:{title:"Generic Default Blend Diffuse Blend Mask D A Blend Smooth Blend Tint Second Diffuse Texture",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[1600-1700]/6160741658834876000"},next:{title:"Opacity Default Cube Environment Mapping Diffuse Texture Normalmap Skinned 1weight Take Global Light",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[1600-1700]/6162552257564997000"}},p={},d=[{value:"Technique <code>transparent</code>",id:"technique-transparent",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Sampler 1",id:"sampler-1",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],s={toc:d},c="wrapper";function D(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"effect-default-blend-mul-diffuse0-texture-threshold-reveal"},"Effect Default Blend Mul Diffuse0 Texture Threshold Reveal"),(0,a.kt)("p",null,"(",(0,a.kt)("inlineCode",{parentName:"p"},"effect:default:BLEND_MUL:DIFFUSE0_TEXTURE:THRESHOLD_REVEAL"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0x55848717111979ff"),")"),(0,a.kt)("h3",{id:"technique-transparent"},"Technique ",(0,a.kt)("inlineCode",{parentName:"h3"},"transparent")),(0,a.kt)("h3",{id:"render-states"},"Render States"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 1,\n    D3DRS_CULLMODE = 2,\n    D3DRS_COLORWRITEENABLE = 7,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n    D3DRS_BLENDOP = 1,\n    D3DRS_DESTBLEND = 0,\n    D3DRS_SRCBLEND = 9,\n};\n")),(0,a.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,a.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,a.kt)("h4",{id:"sampler-1"},"Sampler 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,a.kt)("h3",{id:"shaders"},"Shaders"),(0,a.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float2 texcoord : TEXCOORD;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    // dcl_position v0\n    // dcl_texcoord v1\n    // dcl_position o0\n    // dcl_texcoord o1.xy\n    // dp4 o0.x, v0, c0\n    o.position.x = dot(i.position, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, v0, c1\n    o.position.y = dot(i.position, (view_proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.z, v0, c2\n    o.position.z = dot(i.position, (view_proj_matrix._m02_m12_m22_m32));\n    // dp4 o0.w, v0, c3\n    o.position.w = dot(i.position, (view_proj_matrix._m03_m13_m23_m33));\n    // mov o1.xy, v1\n    o.texcoord = i.texcoord;\n    // \n\n    return o;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."),(0,a.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D detail_diffuse_texture : register(ps_3_0, s1);\nsampler2D diffuse_texture : register(ps_3_0, s0);\nfloat ref_intensity : register(ps_3_0, c4);\nfloat ref_reveal_end : register(ps_3_0, c2);\nfloat ref_reveal_fuzz : register(ps_3_0, c3);\nfloat ref_reveal_start : register(ps_3_0, c1);\nfloat ref_time : register(ps_3_0, c0);\nfloat4 PixelMain(float2 texcoord : TEXCOORD) : COLOR\n{\n    float4 out_color;\n    float2 temp0;\n    float4 temp1;\n    // def c5, 1, 2, 0.5, 0\n    // dcl_texcoord v0.xy\n    // dcl_2d s0\n    // dcl_2d s1\n    // mov_sat r0.x, c0.x\n    temp0.x = saturate(ref_time.x);\n    // add r0.y, -r0.x, c5.x\n    temp0.y = -temp0.x + float1(1);\n    // mul r0.y, r0.y, c1.x\n    temp0.y = temp0.y * ref_reveal_start.x;\n    // mad r0.x, c2.x, r0.x, r0.y\n    temp0.x = ref_reveal_end.x * temp0.x + temp0.y;\n    // mov r1.xy, c5\n    temp1.xy = float2(1, 2);\n    // mad r0.y, c3.x, r1.y, r1.x\n    temp0.y = ref_reveal_fuzz.x * temp1.y + temp1.x;\n    // mad r0.x, r0.x, r0.y, -c3.x\n    temp0.x = temp0.x * temp0.y + -ref_reveal_fuzz.x;\n    // add r0.x, -r0.x, c5.x\n    temp0.x = -temp0.x + float1(1);\n    // texld r1, v0, s1\n    temp1 = tex2D(detail_diffuse_texture, texcoord.xy);\n    // add r0.x, -r0.x, r1.x\n    temp0.x = -temp0.x + temp1.x;\n    // rcp r0.y, c3.x\n    temp0.y = 1.0f / ref_reveal_fuzz.x;\n    // mul r0.x, r0.y, r0.x\n    temp0.x = temp0.y * temp0.x;\n    // mad_sat r0.x, r0.x, c5.z, c5.z\n    temp0.x = saturate(temp0.x * float1(0.5) + float1(0.5));\n    // texld_pp r1, v0, s0\n    temp1 = /* not implemented _pp modifier */ tex2D(diffuse_texture, texcoord.xy);\n    // mul_pp oC0.w, r0.x, r1.w\n    out_color.w = /* not implemented _pp modifier */ temp0.x * temp1.w;\n    // mul oC0.xyz, r1, c4.x\n    out_color.xyz = temp1.xyz * ref_intensity.xxx;\n    // \n\n    return out_color;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."))}D.isMDXComponent=!0}}]);