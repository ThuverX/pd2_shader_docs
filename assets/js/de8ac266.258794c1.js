"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[528],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>D});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=n.createContext({}),s=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(d.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},_=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(r),_=a,D=c["".concat(d,".").concat(_)]||c[_]||m[_]||o;return r?n.createElement(D,i(i({ref:t},p),{},{components:r})):n.createElement(D,i({ref:t},p))}));function D(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=_;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}_.displayName="MDXCreateElement"},7454:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const o={id:940303732435969e4,title:"Decal Default Diffuse Texture Diffuse Uvanim"},i="Decal Default Diffuse Texture Diffuse Uvanim",l={unversionedId:"Generated/Shaders/Base/[2400-2500]/9403037324359690000",id:"Generated/Shaders/Base/[2400-2500]/9403037324359690000",title:"Decal Default Diffuse Texture Diffuse Uvanim",description:"(decalDIFFUSETEXTURE:DIFFUSEUVANIM, 0x827e4ca08832ea62)",source:"@site/docs/Generated/Shaders/Base/[2400-2500]/0x827e4ca08832ea62.mdx",sourceDirName:"Generated/Shaders/Base/[2400-2500]",slug:"/Generated/Shaders/Base/[2400-2500]/9403037324359690000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[2400-2500]/9403037324359690000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/docs/Generated/Shaders/Base/[2400-2500]/0x827e4ca08832ea62.mdx",tags:[],version:"current",frontMatter:{id:"9403037324359690000",title:"Decal Default Diffuse Texture Diffuse Uvanim"},sidebar:"docsSidebar",previous:{title:"Generic Shadow Caster Diffuse Texture Gsma Texture Nvidia Vertex Color",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[2400-2500]/9394985566584500000"},next:{title:"Generic Default Cube Environment Mapping Diffuse Texture Normalmap Rl Bigprops Vertex Color Vertex Color Alpha",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[2400-2500]/9404093231830157000"}},d={},s=[{value:"Technique <code>deferred_semi_transparent_albedo</code>",id:"technique-deferred_semi_transparent_albedo",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],p={toc:s},c="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"decal-default-diffuse-texture-diffuse-uvanim"},"Decal Default Diffuse Texture Diffuse Uvanim"),(0,a.kt)("p",null,"(",(0,a.kt)("inlineCode",{parentName:"p"},"decal:default:DIFFUSE_TEXTURE:DIFFUSE_UVANIM"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0x827e4ca08832ea62"),")"),(0,a.kt)("h3",{id:"technique-deferred_semi_transparent_albedo"},"Technique ",(0,a.kt)("inlineCode",{parentName:"h3"},"deferred_semi_transparent_albedo")),(0,a.kt)("h3",{id:"render-states"},"Render States"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 1,\n    D3DRS_CULLMODE = 2,\n    D3DRS_COLORWRITEENABLE = 7,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n    D3DRS_BLENDOP = 1,\n    D3DRS_DESTBLEND = 6,\n    D3DRS_SRCBLEND = 5,\n};\n")),(0,a.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,a.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,a.kt)("h3",{id:"shaders"},"Shaders"),(0,a.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 proj_matrix : register(vs_3_0, c4);\ncolumn_major float4x4 world_view_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float2 texcoord : TEXCOORD;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0;\n    // def c8, 0.0004, 9.995, 0.005, 0\n    // dcl_position v0\n    // dcl_texcoord v1\n    // dcl_position o0\n    // dcl_texcoord o1.xy\n    // dp4 r0.x, v0, c2\n    temp0.x = dot(i.position, (world_view_matrix._m02_m12_m22_m32));\n    // mul_sat r0.y, r0.x, c8.x\n    temp0.y = saturate(temp0.x * float1(0.0004));\n    // mad r0.y, r0.y, c8.y, c8.z\n    temp0.y = temp0.y * float1(9.995) + float1(0.005);\n    // add r0.z, -r0.y, r0.x\n    temp0.z = -temp0.y + temp0.x;\n    // dp4 r0.x, v0, c0\n    temp0.x = dot(i.position, (world_view_matrix._m00_m10_m20_m30));\n    // dp4 r0.y, v0, c1\n    temp0.y = dot(i.position, (world_view_matrix._m01_m11_m21_m31));\n    // dp4 r0.w, v0, c3\n    temp0.w = dot(i.position, (world_view_matrix._m03_m13_m23_m33));\n    // dp4 o0.x, r0, c4\n    o.position.x = dot(temp0, (proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, r0, c5\n    o.position.y = dot(temp0, (proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.z, r0, c6\n    o.position.z = dot(temp0, (proj_matrix._m02_m12_m22_m32));\n    // dp4 o0.w, r0, c7\n    o.position.w = dot(temp0, (proj_matrix._m03_m13_m23_m33));\n    // mov o1.xy, v1\n    o.texcoord = i.texcoord;\n    // \n\n    return o;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."),(0,a.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D diffuse_texture : register(ps_3_0, s0);\nfloat4 PixelMain(float2 texcoord : TEXCOORD) : COLOR\n{\n    float4 out_color;\n    // dcl_texcoord v0.xy\n    // dcl_2d s0\n    // texld_pp oC0, v0, s0\n    out_color = /* not implemented _pp modifier */ tex2D(diffuse_texture, texcoord.xy);\n    // \n\n    return out_color;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."))}m.isMDXComponent=!0}}]);