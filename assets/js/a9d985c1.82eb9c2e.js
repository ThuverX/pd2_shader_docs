"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[4811],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>y});var m=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);t&&(m=m.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,m)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,m,n=function(e,t){if(null==e)return{};var r,m,n={},p=Object.keys(e);for(m=0;m<p.length;m++)r=p[m],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(m=0;m<p.length;m++)r=p[m],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var _=m.createContext({}),x=function(e){var t=m.useContext(_),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},d=function(e){var t=x(e.components);return m.createElement(_.Provider,{value:t},e.children)},l="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return m.createElement(m.Fragment,{},t)}},s=m.forwardRef((function(e,t){var r=e.components,n=e.mdxType,p=e.originalType,_=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),l=x(r),s=n,y=l["".concat(_,".").concat(s)]||l[s]||c[s]||p;return r?m.createElement(y,a(a({ref:t},d),{},{components:r})):m.createElement(y,a({ref:t},d))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var p=r.length,a=new Array(p);a[0]=s;var o={};for(var _ in t)hasOwnProperty.call(t,_)&&(o[_]=t[_]);o.originalType=e,o[l]="string"==typeof e?e:n,a[1]=o;for(var x=2;x<p;x++)a[x]=r[x];return m.createElement.apply(null,a)}return m.createElement.apply(null,r)}s.displayName="MDXCreateElement"},8614:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>_,contentTitle:()=>a,default:()=>c,frontMatter:()=>p,metadata:()=>o,toc:()=>x});var m=r(7462),n=(r(7294),r(3905));const p={id:0x6022ef61c7bf5800,title:"Global Shadow Mask Default Dx9 Hwsm Nvdbt Slice1"},a="Global Shadow Mask Default Dx9 Hwsm Nvdbt Slice1",o={unversionedId:"Generated/Shaders/Deferred Lighting/6927362380091316000",id:"Generated/Shaders/Deferred Lighting/6927362380091316000",title:"Global Shadow Mask Default Dx9 Hwsm Nvdbt Slice1",description:"(globalshadowmaskDX9_HWSMSLICE1, 0x6022ef61c7bf58bb)",source:"@site/docs/Generated/Shaders/Deferred Lighting/0x6022ef61c7bf58bb.mdx",sourceDirName:"Generated/Shaders/Deferred Lighting",slug:"/Generated/Shaders/Deferred Lighting/6927362380091316000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Deferred Lighting/6927362380091316000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Deferred Lighting/0x6022ef61c7bf58bb.mdx",tags:[],version:"current",frontMatter:{id:"6927362380091316000",title:"Global Shadow Mask Default Dx9 Hwsm Nvdbt Slice1"},sidebar:"docsSidebar",previous:{title:"Global Shadow Mask Default Dx9 Hwsm",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Deferred Lighting/6483130792831095000"},next:{title:"Global Shadow Mask Default Dx9 Hwsm Nvdbt",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Deferred Lighting/6980157077357407000"}},_={},x=[{value:"Technique <code>ambient</code>",id:"technique-ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Sampler 1",id:"sampler-1",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],d={toc:x},l="wrapper";function c(e){let{components:t,...r}=e;return(0,n.kt)(l,(0,m.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"global-shadow-mask-default-dx9-hwsm-nvdbt-slice1"},"Global Shadow Mask Default Dx9 Hwsm Nvdbt Slice1"),(0,n.kt)("p",null,"(",(0,n.kt)("inlineCode",{parentName:"p"},"global_shadow_mask:default:DX9_HWSM:NVDBT:SLICE1"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"0x6022ef61c7bf58bb"),")"),(0,n.kt)("p",null,"This template is referenced 1 time by ",(0,n.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/deferred_lighting.render_template_database#global-shadow-mask-slice1"},"global_shadow_mask:SLICE1"),"."),(0,n.kt)("h3",{id:"technique-ambient"},"Technique ",(0,n.kt)("inlineCode",{parentName:"h3"},"ambient")),(0,n.kt)("h3",{id:"render-states"},"Render States"),(0,n.kt)("p",null,"More info can be found on the ",(0,n.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 0,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 1,\n    D3DRS_COLORWRITEENABLE = 8,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 1111774798,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,n.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,n.kt)("p",null,"More info can be found on the ",(0,n.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,n.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 1,\n    D3DSAMP_MINFILTER = 1,\n    D3DSAMP_MIPFILTER = 1,\n};\n")),(0,n.kt)("h4",{id:"sampler-1"},"Sampler 1"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 2,\n    D3DSAMP_MINFILTER = 2,\n    D3DSAMP_MIPFILTER = 2,\n};\n")),(0,n.kt)("h3",{id:"shaders"},"Shaders"),(0,n.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 camera_inv_view_matrix : register(vs_3_0, c4);\nfloat3 camera_unprojection : register(vs_3_0, c7);\ncolumn_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float2 texcoord : TEXCOORD;\n    float3 texcoord1 : TEXCOORD1;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float2 temp0;\n    float3 temp1;\n    // def c8, 1, 0, 0, 0\n    // dcl_position v0\n    // dcl_texcoord v1\n    // dcl_position o0\n    // dcl_texcoord o1.xy\n    // dcl_texcoord1 o2.xyz\n    // dp4 o0.z, v0, c2\n    o.position.z = dot(i.position, (view_proj_matrix._m02_m12_m22_m32));\n    // dp4 o0.w, v0, c3\n    o.position.w = dot(i.position, (view_proj_matrix._m03_m13_m23_m33));\n    // dp4 r0.x, v0, c0\n    temp0.x = dot(i.position, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 r0.y, v0, c1\n    temp0.y = dot(i.position, (view_proj_matrix._m01_m11_m21_m31));\n    // mul r1.xy, r0, c7\n    temp1.xy = temp0.xy * camera_unprojection.xy;\n    // mov o0.xy, r0\n    o.position.xy = temp0.xy;\n    // mov r1.z, c8.x\n    temp1.z = float1(1);\n    // dp3 o2.x, r1, c4\n    o.texcoord1.x = dot(temp1.xyz, (camera_inv_view_matrix._m00_m10_m20_m30).xyz);\n    // dp3 o2.y, r1, c5\n    o.texcoord1.y = dot(temp1.xyz, (camera_inv_view_matrix._m01_m11_m21_m31).xyz);\n    // dp3 o2.z, r1, c6\n    o.texcoord1.z = dot(temp1.xyz, (camera_inv_view_matrix._m02_m12_m22_m32).xyz);\n    // mov o1.xy, v1\n    o.texcoord = i.texcoord;\n    // \n\n    return o;\n}\n")),(0,n.kt)("p",null,"Decompiled by DXDecompiler."),(0,n.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 camera_world_matrix : register(ps_3_0, c12);\nsampler2D depth : register(ps_3_0, s0);\nsampler2D displacement_texture : register(ps_3_0, s1);\nfloat3 displacement_texture_size : register(ps_3_0, c17);\ncolumn_major float4x4 global_shadow_projection[3] : register(ps_3_0, c0);\nfloat3 ref_shadow_slice_depths : register(ps_3_0, c15);\nfloat3 ref_shadow_slice_overlap : register(ps_3_0, c16);\nstruct PixelMain_Input\n{\n    float2 texcoord : TEXCOORD;\n    float3 texcoord1 : TEXCOORD1;\n};\n\nfloat4 PixelMain(PixelMain_Input i) : COLOR\n{\n    float4 out_color;\n    float4 temp0, temp1, temp2, temp3, temp4, temp5, temp6, temp7, temp8, temp9;\n    // def c18, 0, 1, 2, 0.5\n    // def c19, 0.2, 0, 0, 0\n    // dcl_texcoord v0.xy\n    // dcl_texcoord1 v1.xyz\n    // dcl_2d s0\n    // dcl_2d s1\n    // texld r0, v0, s0\n    temp0 = tex2D(depth, i.texcoord.xy);\n    // add r0.yz, -r0.x, c15.xyxw\n    temp0.yz = -temp0.xx + ref_shadow_slice_depths.yx;\n    // cmp r0.z, r0.z, c18.x, c18.y\n    temp0.z = (temp0.z >= 0) ? float1(0) : float1(1);\n    // cmp r0.y, r0.y, r0.z, c18.z\n    temp0.y = (temp0.y >= 0) ? temp0.z : float1(2);\n    // add r1.xyz, r0.y, -c18\n    temp1.xyz = temp0.yyy + float3(-0, -1, -2);\n    // mov r2.x, c18.x\n    temp2.x = float1(0);\n    // cmp r3, -r1_abs.x, c2, r2.x\n    temp3 = (-abs(temp1).x >= 0) ? (global_shadow_projection[0]._m02_m12_m22_m32) : temp2.x;\n    // cmp r3, -r1_abs.y, c6, r3\n    temp3 = (-abs(temp1).y >= 0) ? (global_shadow_projection[1]._m02_m12_m22_m32) : temp3;\n    // cmp r3, -r1_abs.z, c10, r3\n    temp3 = (-abs(temp1).z >= 0) ? (global_shadow_projection[2]._m02_m12_m22_m32) : temp3;\n    // mov r4.w, c18.y\n    temp4.w = float1(1);\n    // mad r4.x, v1.x, r0.x, c12.w\n    temp4.x = i.texcoord1.x * temp0.x + (camera_world_matrix._m00_m10_m20_m30).w;\n    // mad r4.y, v1.y, r0.x, c13.w\n    temp4.y = i.texcoord1.y * temp0.x + (camera_world_matrix._m01_m11_m21_m31).w;\n    // mad r4.z, v1.z, r0.x, c14.w\n    temp4.z = i.texcoord1.z * temp0.x + (camera_world_matrix._m02_m12_m22_m32).w;\n    // dp4 r3.z, r4, r3\n    temp3.z = dot(temp4, temp3);\n    // cmp r5, -r1_abs.x, c3, r2.x\n    temp5 = (-abs(temp1).x >= 0) ? (global_shadow_projection[0]._m03_m13_m23_m33) : temp2.x;\n    // cmp r5, -r1_abs.y, c7, r5\n    temp5 = (-abs(temp1).y >= 0) ? (global_shadow_projection[1]._m03_m13_m23_m33) : temp5;\n    // cmp r5, -r1_abs.z, c11, r5\n    temp5 = (-abs(temp1).z >= 0) ? (global_shadow_projection[2]._m03_m13_m23_m33) : temp5;\n    // dp4 r0.z, r4, r5\n    temp0.z = dot(temp4, temp5);\n    // rcp r0.z, r0.z\n    temp0.z = 1.0f / temp0.z;\n    // cmp r5, -r1_abs.x, c0, r2.x\n    temp5 = (-abs(temp1).x >= 0) ? (global_shadow_projection[0]._m00_m10_m20_m30) : temp2.x;\n    // cmp r5, -r1_abs.y, c4, r5\n    temp5 = (-abs(temp1).y >= 0) ? (global_shadow_projection[1]._m00_m10_m20_m30) : temp5;\n    // cmp r5, -r1_abs.z, c8, r5\n    temp5 = (-abs(temp1).z >= 0) ? (global_shadow_projection[2]._m00_m10_m20_m30) : temp5;\n    // dp4 r3.x, r4, r5\n    temp3.x = dot(temp4, temp5);\n    // cmp r5, -r1_abs.x, c1, r2.x\n    temp5 = (-abs(temp1).x >= 0) ? (global_shadow_projection[0]._m01_m11_m21_m31) : temp2.x;\n    // cmp r5, -r1_abs.y, c5, r5\n    temp5 = (-abs(temp1).y >= 0) ? (global_shadow_projection[1]._m01_m11_m21_m31) : temp5;\n    // cmp r1, -r1_abs.z, c9, r5\n    temp1 = (-abs(temp1).z >= 0) ? (global_shadow_projection[2]._m01_m11_m21_m31) : temp5;\n    // dp4 r3.y, r4, r1\n    temp3.y = dot(temp4, temp1);\n    // mul r1.xyz, r0.z, r3\n    temp1.xyz = temp0.zzz * temp3.xyz;\n    // mad r5.zw, r1.z, c18.xyyx, c18.xyxy\n    temp5.zw = temp1.zz * float2(1, 0) + float2(0, 1);\n    // rcp r6.x, c17.x\n    temp6.x = 1.0f / displacement_texture_size.x;\n    // rcp r6.y, c17.y\n    temp6.y = 1.0f / displacement_texture_size.y;\n    // mul r2.yz, r6.xxyw, c18.w\n    temp2.yz = temp6.xy * float2(0.5, 0.5);\n    // mad r5.xy, r3, r0.z, -r2.yzzw\n    temp5.xy = temp3.xy * temp0.zz + -temp2.yz;\n    // mov r6.xzw, r5\n    temp6.xzw = temp5.xzw;\n    // mad r7.xy, r3, r0.z, r2.yzzw\n    temp7.xy = temp3.xy * temp0.zz + temp2.yz;\n    // mov r6.y, r7.y\n    temp6.y = temp7.y;\n    // texld r8, r6, s1\n    temp8 = tex2D(displacement_texture, temp6.xy);\n    // mov r7.yzw, r5\n    temp7.yzw = temp5.yzw;\n    // texld r5, r5, s1\n    temp5 = tex2D(displacement_texture, temp5.xy);\n    // texld r9, r7, s1\n    temp9 = tex2D(displacement_texture, temp7.xy);\n    // mov r6.xzw, r7\n    temp6.xzw = temp7.xzw;\n    // add r0.w, r8.x, -r9.x\n    temp0.w = temp8.x + -temp9.x;\n    // texld r7, r6, s1\n    temp7 = tex2D(displacement_texture, temp6.xy);\n    // add r2.w, -r5.x, r7.x\n    temp2.w = -temp5.x + temp7.x;\n    // add r5.x, r0.w, r2.w\n    temp5.x = temp0.w + temp2.w;\n    // add r5.y, r0.w, -r2.w\n    temp5.y = temp0.w + -temp2.w;\n    // mul r3.zw, r2.xyyz, r5.xyxy\n    temp3.zw = temp2.yz * temp5.xy;\n    // add r3.zw, r3, r3\n    temp3.zw = temp3.zw + temp3.zw;\n    // mad r6.xy, r3, r0.z, -r3.zwzw\n    temp6.xy = temp3.xy * temp0.zz + -temp3.zw;\n    // mad r3.xy, r3, r0.z, r3.zwzw\n    temp3.xy = temp3.xy * temp0.zz + temp3.zw;\n    // texld r5, r6, s1\n    temp5 = tex2D(displacement_texture, temp6.xy);\n    // mov r3.zw, r6\n    temp3.zw = temp6.zw;\n    // texld r3, r3, s1\n    temp3 = tex2D(displacement_texture, temp3.xy);\n    // mov r1.w, c18.y\n    temp1.w = float1(1);\n    // texld r1, r1, s1\n    temp1 = tex2D(displacement_texture, temp1.xy);\n    // mad r0.z, r5.x, c18.z, r1.x\n    temp0.z = temp5.x * float1(2) + temp1.x;\n    // mad r0.z, r3.x, c18.z, r0.z\n    temp0.z = temp3.x * float1(2) + temp0.z;\n    // mov r1.xyz, c15\n    temp1.xyz = ref_shadow_slice_depths.xyz;\n    // add r1.xyz, r1.yxzw, -c16.yxzw\n    temp1.xyz = temp1.yxz + -ref_shadow_slice_overlap.yxz;\n    // add r1.xyw, -r0.x, r1.xyzz\n    temp1.xyw = -temp0.xxx + temp1.xyz;\n    // add r0.w, r0.x, -r1.z\n    temp0.w = temp0.x + -temp1.z;\n    // cmp r1.y, r1.y, c18.x, c18.y\n    temp1.y = (temp1.y >= 0) ? float1(0) : float1(1);\n    // cmp r1.x, r1.x, r1.y, c18.z\n    temp1.x = (temp1.x >= 0) ? temp1.y : float1(2);\n    // add r3.xyz, r1.x, -c18\n    temp3.xyz = temp1.xxx + float3(-0, -1, -2);\n    // cmp r5, -r3_abs.x, c2, r2.x\n    temp5 = (-abs(temp3).x >= 0) ? (global_shadow_projection[0]._m02_m12_m22_m32) : temp2.x;\n    // cmp r5, -r3_abs.y, c6, r5\n    temp5 = (-abs(temp3).y >= 0) ? (global_shadow_projection[1]._m02_m12_m22_m32) : temp5;\n    // cmp r5, -r3_abs.z, c10, r5\n    temp5 = (-abs(temp3).z >= 0) ? (global_shadow_projection[2]._m02_m12_m22_m32) : temp5;\n    // dp4 r5.z, r4, r5\n    temp5.z = dot(temp4, temp5);\n    // cmp r6, -r3_abs.x, c3, r2.x\n    temp6 = (-abs(temp3).x >= 0) ? (global_shadow_projection[0]._m03_m13_m23_m33) : temp2.x;\n    // cmp r6, -r3_abs.y, c7, r6\n    temp6 = (-abs(temp3).y >= 0) ? (global_shadow_projection[1]._m03_m13_m23_m33) : temp6;\n    // cmp r6, -r3_abs.z, c11, r6\n    temp6 = (-abs(temp3).z >= 0) ? (global_shadow_projection[2]._m03_m13_m23_m33) : temp6;\n    // dp4 r1.y, r4, r6\n    temp1.y = dot(temp4, temp6);\n    // rcp r1.y, r1.y\n    temp1.y = 1.0f / temp1.y;\n    // cmp r6, -r3_abs.x, c0, r2.x\n    temp6 = (-abs(temp3).x >= 0) ? (global_shadow_projection[0]._m00_m10_m20_m30) : temp2.x;\n    // cmp r6, -r3_abs.y, c4, r6\n    temp6 = (-abs(temp3).y >= 0) ? (global_shadow_projection[1]._m00_m10_m20_m30) : temp6;\n    // cmp r6, -r3_abs.z, c8, r6\n    temp6 = (-abs(temp3).z >= 0) ? (global_shadow_projection[2]._m00_m10_m20_m30) : temp6;\n    // dp4 r5.x, r4, r6\n    temp5.x = dot(temp4, temp6);\n    // cmp r6, -r3_abs.x, c1, r2.x\n    temp6 = (-abs(temp3).x >= 0) ? (global_shadow_projection[0]._m01_m11_m21_m31) : temp2.x;\n    // cmp r6, -r3_abs.y, c5, r6\n    temp6 = (-abs(temp3).y >= 0) ? (global_shadow_projection[1]._m01_m11_m21_m31) : temp6;\n    // cmp r3, -r3_abs.z, c9, r6\n    temp3 = (-abs(temp3).z >= 0) ? (global_shadow_projection[2]._m01_m11_m21_m31) : temp6;\n    // dp4 r5.y, r4, r3\n    temp5.y = dot(temp4, temp3);\n    // mul r3.xyz, r1.y, r5\n    temp3.xyz = temp1.yyy * temp5.xyz;\n    // mad r4.zw, r3.z, c18.xyyx, c18.xyxy\n    temp4.zw = temp3.zz * float2(1, 0) + float2(0, 1);\n    // mad r4.xy, r5, r1.y, -r2.yzzw\n    temp4.xy = temp5.xy * temp1.yy + -temp2.yz;\n    // mov r6.xzw, r4\n    temp6.xzw = temp4.xzw;\n    // mad r7.xy, r5, r1.y, r2.yzzw\n    temp7.xy = temp5.xy * temp1.yy + temp2.yz;\n    // mov r6.y, r7.y\n    temp6.y = temp7.y;\n    // texld r8, r6, s1\n    temp8 = tex2D(displacement_texture, temp6.xy);\n    // mov r7.yzw, r4\n    temp7.yzw = temp4.yzw;\n    // texld r4, r4, s1\n    temp4 = tex2D(displacement_texture, temp4.xy);\n    // texld r9, r7, s1\n    temp9 = tex2D(displacement_texture, temp7.xy);\n    // mov r6.xzw, r7\n    temp6.xzw = temp7.xzw;\n    // add r1.z, r8.x, -r9.x\n    temp1.z = temp8.x + -temp9.x;\n    // texld r7, r6, s1\n    temp7 = tex2D(displacement_texture, temp6.xy);\n    // add r2.w, -r4.x, r7.x\n    temp2.w = -temp4.x + temp7.x;\n    // add r4.x, r1.z, r2.w\n    temp4.x = temp1.z + temp2.w;\n    // add r4.y, r1.z, -r2.w\n    temp4.y = temp1.z + -temp2.w;\n    // mul r2.yz, r2, r4.xxyw\n    temp2.yz = temp2.yz * temp4.xy;\n    // add r2.yz, r2, r2\n    temp2.yz = temp2.yz + temp2.yz;\n    // mad r6.xy, r5, r1.y, -r2.yzzw\n    temp6.xy = temp5.xy * temp1.yy + -temp2.yz;\n    // mad r4.xy, r5, r1.y, r2.yzzw\n    temp4.xy = temp5.xy * temp1.yy + temp2.yz;\n    // texld r5, r6, s1\n    temp5 = tex2D(displacement_texture, temp6.xy);\n    // mov r4.zw, r6\n    temp4.zw = temp6.zw;\n    // texld r4, r4, s1\n    temp4 = tex2D(displacement_texture, temp4.xy);\n    // mov r3.w, c18.y\n    temp3.w = float1(1);\n    // texld r3, r3, s1\n    temp3 = tex2D(displacement_texture, temp3.xy);\n    // mad r1.y, r5.x, c18.z, r3.x\n    temp1.y = temp5.x * float1(2) + temp3.x;\n    // mad r1.y, r4.x, c18.z, r1.y\n    temp1.y = temp4.x * float1(2) + temp1.y;\n    // mul r1.y, r1.y, c19.x\n    temp1.y = temp1.y * float1(0.2);\n    // mad r1.z, r0.z, c19.x, -r1.y\n    temp1.z = temp0.z * float1(0.2) + -temp1.y;\n    // mul r0.z, r0.z, c19.x\n    temp0.z = temp0.z * float1(0.2);\n    // add r2.yz, r1.x, -c18\n    temp2.yz = temp1.xx + float2(-1, -2);\n    // add r0.y, r0.y, -r1.x\n    temp0.y = temp0.y + -temp1.x;\n    // cmp r2.yz, -r2_abs, c18.y, c18.x\n    temp2.yz = (-abs(temp2).yz >= 0) ? float2(1, 1) : float2(0, 0);\n    // dp2add r0.x, c15, r2.yzzw, -r0.x\n    temp0.x = dot(ref_shadow_slice_depths.xy, temp2.yz) + -temp0.x;\n    // dp2add r1.x, c16, r2.yzzw, r2.x\n    temp1.x = dot(ref_shadow_slice_overlap.xy, temp2.yz) + temp2.x;\n    // rcp r1.x, r1.x\n    temp1.x = 1.0f / temp1.x;\n    // mul r0.x, r0.x, r1.x\n    temp0.x = temp0.x * temp1.x;\n    // mad r0.x, r0.x, r1.z, r1.y\n    temp0.x = temp0.x * temp1.z + temp1.y;\n    // cmp r0.x, -r0_abs.y, r0.z, r0.x\n    temp0.x = (-abs(temp0).y >= 0) ? temp0.z : temp0.x;\n    // rcp r0.y, c16.z\n    temp0.y = 1.0f / ref_shadow_slice_overlap.z;\n    // mul_sat r0.y, r0.y, r0.w\n    temp0.y = saturate(temp0.y * temp0.w);\n    // add_sat r0.y, r0.y, r0.x\n    temp0.y = saturate(temp0.y + temp0.x);\n    // cmp oC0, r1.w, r0.x, r0.y\n    out_color = (temp1.w >= 0) ? temp0.x : temp0.y;\n    // \n\n    return out_color;\n}\n")),(0,n.kt)("p",null,"Decompiled by DXDecompiler."))}c.isMDXComponent=!0}}]);