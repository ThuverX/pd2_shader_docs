"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[11076],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>D});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var m=n.createContext({}),d=function(e){var t=n.useContext(m),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},c=function(e){var t=d(e.components);return n.createElement(m.Provider,{value:t},e.children)},s="mdxType",i={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},x=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=d(r),x=a,D=s["".concat(m,".").concat(x)]||s[x]||i[x]||o;return r?n.createElement(D,p(p({ref:t},c),{},{components:r})):n.createElement(D,p({ref:t},c))}));function D(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,p=new Array(o);p[0]=x;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[s]="string"==typeof e?e:a,p[1]=l;for(var d=2;d<o;d++)p[d]=r[d];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}x.displayName="MDXCreateElement"},32416:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>i,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var n=r(87462),a=(r(67294),r(3905));const o={id:120624900108608e5,title:"Effect Default Dof Cutter Standard"},p="Effect Default Dof Cutter Standard",l={unversionedId:"Generated/Shaders/Base/[3100-3200]/12062490010860800000",id:"Generated/Shaders/Base/[3100-3200]/12062490010860800000",title:"Effect Default Dof Cutter Standard",description:"(effectDOFCUTTERSTANDARD, 0xa76692c14c0e482e)",source:"@site/docs/Generated/Shaders/Base/[3100-3200]/0xa76692c14c0e482e.mdx",sourceDirName:"Generated/Shaders/Base/[3100-3200]",slug:"/Generated/Shaders/Base/[3100-3200]/12062490010860800000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3100-3200]/12062490010860800000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/docs/Generated/Shaders/Base/[3100-3200]/0xa76692c14c0e482e.mdx",tags:[],version:"current",frontMatter:{id:"12062490010860800000",title:"Effect Default Dof Cutter Standard"},sidebar:"docsSidebar",previous:{title:"Generic Shadow Caster Diffuse Texture Global Environment Mapping Gsma Texture Instanced Normalmap",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3100-3200]/12060892531394537000"},next:{title:"Generic Shadow Caster Alpha Masked Ati Diffuse Texture External Alpha Ref Global Environment Mapping Gloss Blurs Cubemap Gloss Control Value Normalmap Vegetation Bending Vertex Alpha Vertex Color Alpha",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3100-3200]/12063962679993915000"}},m={},d=[{value:"Technique <code>0xb5b15d43fbe8772f</code>",id:"technique-0xb5b15d43fbe8772f",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Sampler 1",id:"sampler-1",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],c={toc:d},s="wrapper";function i(e){let{components:t,...r}=e;return(0,a.kt)(s,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"effect-default-dof-cutter-standard"},"Effect Default Dof Cutter Standard"),(0,a.kt)("p",null,"(",(0,a.kt)("inlineCode",{parentName:"p"},"effect:default:DOF_CUTTER_STANDARD"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0xa76692c14c0e482e"),")"),(0,a.kt)("h3",{id:"technique-0xb5b15d43fbe8772f"},"Technique ",(0,a.kt)("inlineCode",{parentName:"h3"},"0xb5b15d43fbe8772f")),(0,a.kt)("h3",{id:"render-states"},"Render States"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 0,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 1,\n    D3DRS_CULLMODE = 2,\n    D3DRS_COLORWRITEENABLE = 8,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n    D3DRS_BLENDOP = 1,\n    D3DRS_DESTBLEND = 2,\n    D3DRS_SRCBLEND = 2,\n};\n")),(0,a.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,a.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,a.kt)("h4",{id:"sampler-1"},"Sampler 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 1,\n    D3DSAMP_MINFILTER = 1,\n    D3DSAMP_MIPFILTER = 1,\n};\n")),(0,a.kt)("h3",{id:"shaders"},"Shaders"),(0,a.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"float3 render_target_texel_offset : register(vs_3_0, c4);\ncolumn_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nfloat3 vp_offset : register(vs_3_0, c5);\nfloat3 vp_size : register(vs_3_0, c6);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float2 texcoord : TEXCOORD;\n    float4 texcoord6 : TEXCOORD6;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0, temp1;\n    float2 temp2;\n    // def c7, 2, -1, 0.5, 1\n    // dcl_position v0\n    // dcl_texcoord v1\n    // dcl_position o0\n    // dcl_texcoord o1.xy\n    // dcl_texcoord6 o2\n    // dp4 r0.x, v0, c0\n    temp0.x = dot(i.position, (view_proj_matrix._m00_m10_m20_m30));\n    // mov r1.xz, c7\n    temp1.xz = float2(2, 0.5);\n    // mov r2.xy, c6\n    temp2.xy = vp_size.xy;\n    // mad r1.xy, c5, r1.x, r2\n    temp1.xy = vp_offset.xy * temp1.xx + temp2.xy;\n    // add r1.xy, r1, c7.y\n    temp1.xy = temp1.xy + float2(-1, -1);\n    // dp4 r0.w, v0, c3\n    temp0.w = dot(i.position, (view_proj_matrix._m03_m13_m23_m33));\n    // mul r1.xy, r1, r0.w\n    temp1.xy = temp1.xy * temp0.ww;\n    // mad r1.x, r0.x, c6.x, r1.x\n    temp1.x = temp0.x * vp_size.x + temp1.x;\n    // add r1.zw, r1.z, c4.xyxy\n    temp1.zw = temp1.zz + render_target_texel_offset.xy;\n    // add r2.x, r0.w, r0.w\n    temp2.x = temp0.w + temp0.w;\n    // mad o2.x, r2.x, r1.z, r1.x\n    o.texcoord6.x = temp2.x * temp1.z + temp1.x;\n    // dp4 r0.y, v0, c1\n    temp0.y = dot(i.position, (view_proj_matrix._m01_m11_m21_m31));\n    // mad r1.x, r0.y, -c6.y, r1.y\n    temp1.x = temp0.y * -vp_size.y + temp1.y;\n    // mad o2.y, r2.x, r1.w, r1.x\n    o.texcoord6.y = temp2.x * temp1.w + temp1.x;\n    // dp4 r0.z, v0, c2\n    temp0.z = dot(i.position, (view_proj_matrix._m02_m12_m22_m32));\n    // mov o0, r0\n    o.position = temp0;\n    // mul o2.zw, r0, c7.xywx\n    o.texcoord6.zw = temp0.zw * float2(1, 2);\n    // mov o1.xy, v1\n    o.texcoord = i.texcoord;\n    // \n\n    return o;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."),(0,a.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D depth : register(ps_3_0, s1);\nsampler2D diffuse_texture : register(ps_3_0, s0);\nfloat ref_cut_amount : register(ps_3_0, c0);\nfloat ref_cut_depth : register(ps_3_0, c1);\nstruct PixelMain_Input\n{\n    float2 texcoord : TEXCOORD;\n    float4 texcoord6 : TEXCOORD6;\n};\n\nfloat4 PixelMain(PixelMain_Input i) : COLOR\n{\n    float4 out_color;\n    float4 temp0, temp1;\n    // def c2, 0.5, 1, -2, 3\n    // dcl_texcoord v0.xy\n    // dcl_texcoord6 v1\n    // dcl_2d s0\n    // dcl_2d s1\n    // texld r0, v1, s1\n    temp0 = tex2D(depth, i.texcoord6.xy);\n    // add r0.x, r0.x, -v1.z\n    temp0.x = temp0.x + -i.texcoord6.z;\n    // add r0.x, r0.x, c2.x\n    temp0.x = temp0.x + float1(0.5);\n    // mov r0.y, c2.y\n    temp0.y = float1(1);\n    // add r0.y, r0.y, c1.x\n    temp0.y = temp0.y + ref_cut_depth.x;\n    // rcp r0.y, r0.y\n    temp0.y = 1.0f / temp0.y;\n    // mul r0.z, r0.y, r0.x\n    temp0.z = temp0.y * temp0.x;\n    // mad r0.x, r0.x, r0.y, -c2.y\n    temp0.x = temp0.x * temp0.y + float1(-1);\n    // mul r0.y, r0.y, c2.x\n    temp0.y = temp0.y * float1(0.5);\n    // rcp r0.w, r0.y\n    temp0.w = 1.0f / temp0.y;\n    // rcp r0.y, -r0.y\n    temp0.y = 1.0f / -temp0.y;\n    // mul_sat r0.x, r0.y, r0.x\n    temp0.x = saturate(temp0.y * temp0.x);\n    // mul_sat r0.y, r0.w, r0.z\n    temp0.y = saturate(temp0.w * temp0.z);\n    // mad r0.z, r0.y, c2.z, c2.w\n    temp0.z = temp0.y * float1(-2) + float1(3);\n    // mul r0.y, r0.y, r0.y\n    temp0.y = temp0.y * temp0.y;\n    // mul r0.y, r0.y, r0.z\n    temp0.y = temp0.y * temp0.z;\n    // mad r0.z, r0.x, c2.z, c2.w\n    temp0.z = temp0.x * float1(-2) + float1(3);\n    // mul r0.x, r0.x, r0.x\n    temp0.x = temp0.x * temp0.x;\n    // mul r0.x, r0.x, r0.z\n    temp0.x = temp0.x * temp0.z;\n    // mul r0.x, r0.x, r0.y\n    temp0.x = temp0.x * temp0.y;\n    // texld r1, v0, s0\n    temp1 = tex2D(diffuse_texture, i.texcoord.xy);\n    // mul r0.x, r0.x, r1.x\n    temp0.x = temp0.x * temp1.x;\n    // mul oC0, r0.x, c0.x\n    out_color = temp0.x * ref_cut_amount.x;\n    // \n\n    return out_color;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."))}i.isMDXComponent=!0}}]);