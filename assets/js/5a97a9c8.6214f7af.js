"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[61652],{603905:(e,t,r)=>{r.d(t,{Zo:()=>x,kt:()=>u});var n=r(667294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=n.createContext({}),m=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},x=function(e){var t=m(e.components);return n.createElement(d.Provider,{value:t},e.children)},c="mdxType",i={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,x=l(e,["components","mdxType","originalType","parentName"]),c=m(r),s=a,u=c["".concat(d,".").concat(s)]||c[s]||i[s]||o;return r?n.createElement(u,p(p({ref:t},x),{},{components:r})):n.createElement(u,p({ref:t},x))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,p=new Array(o);p[0]=s;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[c]="string"==typeof e?e:a,p[1]=l;for(var m=2;m<o;m++)p[m]=r[m];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},475089:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>i,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var n=r(487462),a=(r(667294),r(603905));const o={id:0xc90a1234413ac800,title:"Vertex Color Textured Blur3 D"},p="Vertex Color Textured Blur3 D",l={unversionedId:"Generated/Shaders/Default Shaders/14486411167032592000",id:"Generated/Shaders/Default Shaders/14486411167032592000",title:"Vertex Color Textured Blur3 D",description:"(VertexColorTexturedBlur3D, 0xc90a1234413acaf7)",source:"@site/docs/Generated/Shaders/Default Shaders/0xc90a1234413acaf7.mdx",sourceDirName:"Generated/Shaders/Default Shaders",slug:"/Generated/Shaders/Default Shaders/14486411167032592000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Default Shaders/14486411167032592000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Default Shaders/0xc90a1234413acaf7.mdx",tags:[],version:"current",frontMatter:{id:"14486411167032592000",title:"Vertex Color Textured Blur3 D"},sidebar:"docsSidebar",previous:{title:"Text",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Default Shaders/14116611110204641000"},next:{title:"Vertex Color Textured Alpha Sweep",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Default Shaders/15103164458044242000"}},d={},m=[{value:"Technique <code>transparent</code>",id:"technique-transparent",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Sampler 1",id:"sampler-1",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],x={toc:m},c="wrapper";function i(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},x,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"vertex-color-textured-blur3-d"},"Vertex Color Textured Blur3 D"),(0,a.kt)("p",null,"(",(0,a.kt)("inlineCode",{parentName:"p"},"VertexColorTexturedBlur3D"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0xc90a1234413acaf7"),")"),(0,a.kt)("p",null,"This template is referenced 1 time by ",(0,a.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/default_render_templates.render_template_database#vertexcolortexturedblur3d"},"VertexColorTexturedBlur3D"),"."),(0,a.kt)("h3",{id:"technique-transparent"},"Technique ",(0,a.kt)("inlineCode",{parentName:"h3"},"transparent")),(0,a.kt)("h3",{id:"render-states"},"Render States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 1,\n    D3DRS_CULLMODE = 1,\n    D3DRS_COLORWRITEENABLE = 7,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n    D3DRS_BLENDOP = 1,\n    D3DRS_DESTBLEND = 6,\n    D3DRS_SRCBLEND = 5,\n};\n")),(0,a.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,a.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,a.kt)("h4",{id:"sampler-1"},"Sampler 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,a.kt)("h3",{id:"shaders"},"Shaders"),(0,a.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"float3 render_target_texel_offset : register(vs_3_0, c4);\ncolumn_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nfloat3 vp_offset : register(vs_3_0, c6);\nfloat3 vp_size : register(vs_3_0, c5);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n    float4 color : COLOR;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float2 texcoord : TEXCOORD;\n    float4 texcoord1 : TEXCOORD1;\n    float4 color : COLOR;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0, temp1;\n    float2 temp2;\n    // def c7, 2, -1, 0.5, 1\n    // dcl_position v0\n    // dcl_texcoord v1\n    // dcl_color v2\n    // dcl_position o0\n    // dcl_texcoord o1.xy\n    // dcl_texcoord1 o2\n    // dcl_color o3\n    // dp4 r0.x, v0, c0\n    temp0.x = dot(i.position, (view_proj_matrix._m00_m10_m20_m30));\n    // mov r1.xz, c7\n    temp1.xz = float2(2, 0.5);\n    // mov r2.xy, c5\n    temp2.xy = vp_size.xy;\n    // mad r1.xy, c6, r1.x, r2\n    temp1.xy = vp_offset.xy * temp1.xx + temp2.xy;\n    // add r1.xy, r1, c7.y\n    temp1.xy = temp1.xy + float2(-1, -1);\n    // dp4 r0.w, v0, c3\n    temp0.w = dot(i.position, (view_proj_matrix._m03_m13_m23_m33));\n    // mul r1.xy, r1, r0.w\n    temp1.xy = temp1.xy * temp0.ww;\n    // mad r1.x, r0.x, c5.x, r1.x\n    temp1.x = temp0.x * vp_size.x + temp1.x;\n    // add r1.zw, r1.z, c4.xyxy\n    temp1.zw = temp1.zz + render_target_texel_offset.xy;\n    // add r2.x, r0.w, r0.w\n    temp2.x = temp0.w + temp0.w;\n    // mad o2.x, r2.x, r1.z, r1.x\n    o.texcoord1.x = temp2.x * temp1.z + temp1.x;\n    // dp4 r0.y, v0, c1\n    temp0.y = dot(i.position, (view_proj_matrix._m01_m11_m21_m31));\n    // mad r1.x, r0.y, -c5.y, r1.y\n    temp1.x = temp0.y * -vp_size.y + temp1.y;\n    // mad o2.y, r2.x, r1.w, r1.x\n    o.texcoord1.y = temp2.x * temp1.w + temp1.x;\n    // dp4 r0.z, v0, c2\n    temp0.z = dot(i.position, (view_proj_matrix._m02_m12_m22_m32));\n    // mov o0, r0\n    o.position = temp0;\n    // mul o2.zw, r0, c7.xywx\n    o.texcoord1.zw = temp0.zw * float2(1, 2);\n    // mov o1.xy, v1\n    o.texcoord = i.texcoord;\n    // mov o3, v2\n    o.color = i.color;\n    // \n\n    return o;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."),(0,a.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D diffuse_texture : register(ps_3_0, s1);\nfloat3 render_target_size : register(ps_3_0, c0);\nsampler2D ui_blur_render : register(ps_3_0, s0);\nstruct PixelMain_Input\n{\n    float2 texcoord : TEXCOORD;\n    float4 texcoord1 : TEXCOORD1;\n    float4 color : COLOR;\n};\n\nfloat4 PixelMain(PixelMain_Input i) : COLOR\n{\n    float4 out_color;\n    float4 temp0, temp1, temp2, temp3, temp4;\n    // def c1, 0.083333336, 50, 0, 0\n    // def c2, 0.5, -1.5, 1.5, -0.5\n    // def c3, -3.5, 0.5, -2.5, -1.5\n    // def c4, -0.5, -3.5, 1.5, -2.5\n    // dcl_texcoord v0.xy\n    // dcl_texcoord1 v1.xyw\n    // dcl_color v2.w\n    // dcl_2d s0\n    // dcl_2d s1\n    // texld r0, v0, s1\n    temp0 = tex2D(diffuse_texture, i.texcoord.xy);\n    // rcp r1.xz, c0.x\n    temp1.xz = 1.0f / render_target_size.x;\n    // rcp r1.yw, c0.y\n    temp1.yw = 1.0f / render_target_size.y;\n    // mul r0, r0.x, r1\n    temp0 = temp0.x * temp1;\n    // mul r0, r0, v2.w\n    temp0 = temp0 * i.color.w;\n    // rcp r1.x, v1.w\n    temp1.x = 1.0f / i.texcoord1.w;\n    // mul r1, r1.x, v1.xyxy\n    temp1 = temp1.x * i.texcoord1.xyxy;\n    // mad r2, r0.zwzw, c2.xyzx, r1.zwzw\n    temp2 = temp0.zwzw * float4(0.5, -1.5, 1.5, 0.5) + temp1.zwzw;\n    // texld r3, r2, s0\n    temp3 = tex2D(ui_blur_render, temp2.xy);\n    // texld r2, r2.zwzw, s0\n    temp2 = tex2D(ui_blur_render, temp2.zw);\n    // add r2.xyz, r2, r3\n    temp2.xyz = temp2.xyz + temp3.xyz;\n    // mad r3, r0.zwzw, c2.wzyw, r1.zwzw\n    temp3 = temp0.zwzw * float4(-0.5, 1.5, -1.5, -0.5) + temp1.zwzw;\n    // texld r4, r3, s0\n    temp4 = tex2D(ui_blur_render, temp3.xy);\n    // texld r3, r3.zwzw, s0\n    temp3 = tex2D(ui_blur_render, temp3.zw);\n    // add r2.xyz, r2, r4\n    temp2.xyz = temp2.xyz + temp4.xyz;\n    // add r2.xyz, r3, r2\n    temp2.xyz = temp3.xyz + temp2.xyz;\n    // mad r3, r0.zwzw, c3, r1.zwzw\n    temp3 = temp0.zwzw * float4(-3.5, 0.5, -2.5, -1.5) + temp1.zwzw;\n    // texld r4, r3, s0\n    temp4 = tex2D(ui_blur_render, temp3.xy);\n    // texld r3, r3.zwzw, s0\n    temp3 = tex2D(ui_blur_render, temp3.zw);\n    // add r2.xyz, r2, r4\n    temp2.xyz = temp2.xyz + temp4.xyz;\n    // add r2.xyz, r3, r2\n    temp2.xyz = temp3.xyz + temp2.xyz;\n    // mad r3, r0.zwzw, c4, r1.zwzw\n    temp3 = temp0.zwzw * float4(-0.5, -3.5, 1.5, -2.5) + temp1.zwzw;\n    // texld r4, r3, s0\n    temp4 = tex2D(ui_blur_render, temp3.xy);\n    // texld r3, r3.zwzw, s0\n    temp3 = tex2D(ui_blur_render, temp3.zw);\n    // add r2.xyz, r2, r4\n    temp2.xyz = temp2.xyz + temp4.xyz;\n    // add r2.xyz, r3, r2\n    temp2.xyz = temp3.xyz + temp2.xyz;\n    // mad r3, r0.zwzw, -c3, r1.zwzw\n    temp3 = temp0.zwzw * float4(3.5, -0.5, 2.5, 1.5) + temp1.zwzw;\n    // mad r0, r0, -c4, r1\n    temp0 = temp0 * float4(0.5, 3.5, -1.5, 2.5) + temp1;\n    // texld r1, r3, s0\n    temp1 = tex2D(ui_blur_render, temp3.xy);\n    // texld r3, r3.zwzw, s0\n    temp3 = tex2D(ui_blur_render, temp3.zw);\n    // add r1.xyz, r1, r2\n    temp1.xyz = temp1.xyz + temp2.xyz;\n    // add r1.xyz, r3, r1\n    temp1.xyz = temp3.xyz + temp1.xyz;\n    // texld r2, r0, s0\n    temp2 = tex2D(ui_blur_render, temp0.xy);\n    // texld r0, r0.zwzw, s0\n    temp0 = tex2D(ui_blur_render, temp0.zw);\n    // add r1.xyz, r1, r2\n    temp1.xyz = temp1.xyz + temp2.xyz;\n    // add r0.xyz, r0, r1\n    temp0.xyz = temp0.xyz + temp1.xyz;\n    // mul oC0.xyz, r0, c1.x\n    out_color.xyz = temp0.xyz * float3(0.083333336, 0.083333336, 0.083333336);\n    // mul_sat oC0.w, c1.y, v2.w\n    out_color.w = saturate(float1(50) * i.color.w);\n    // \n\n    return out_color;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."))}i.isMDXComponent=!0}}]);