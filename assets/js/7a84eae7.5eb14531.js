"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[8386],{3905:(e,t,r)=>{r.d(t,{Zo:()=>i,kt:()=>s});var n=r(7294);function m(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){m(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,m=function(e,t){if(null==e)return{};var r,n,m={},p=Object.keys(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||(m[r]=e[r]);return m}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(m[r]=e[r])}return m}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},i=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",x={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},_=n.forwardRef((function(e,t){var r=e.components,m=e.mdxType,p=e.originalType,l=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),c=d(r),_=m,s=c["".concat(l,".").concat(_)]||c[_]||x[_]||p;return r?n.createElement(s,a(a({ref:t},i),{},{components:r})):n.createElement(s,a({ref:t},i))}));function s(e,t){var r=arguments,m=t&&t.mdxType;if("string"==typeof e||m){var p=r.length,a=new Array(p);a[0]=_;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:m,a[1]=o;for(var d=2;d<p;d++)a[d]=r[d];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}_.displayName="MDXCreateElement"},8306:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>x,frontMatter:()=>p,metadata:()=>o,toc:()=>d});var n=r(7462),m=(r(7294),r(3905));const p={id:0xf218292934da5800,title:"Omni Default Hq Specular"},a="Omni Default Hq Specular",o={unversionedId:"Generated/Shaders/Deferred Lighting/17444738413576739000",id:"Generated/Shaders/Deferred Lighting/17444738413576739000",title:"Omni Default Hq Specular",description:"(omniHQ:SPECULAR, 0xf218292934da58b6)",source:"@site/docs/Generated/Shaders/Deferred Lighting/0xf218292934da58b6.mdx",sourceDirName:"Generated/Shaders/Deferred Lighting",slug:"/Generated/Shaders/Deferred Lighting/17444738413576739000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Deferred Lighting/17444738413576739000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Deferred Lighting/0xf218292934da58b6.mdx",tags:[],version:"current",frontMatter:{id:"17444738413576739000",title:"Omni Default Hq Specular"},sidebar:"docsSidebar",previous:{title:"Global Shadow Mask Default Dx9 Fetch4 Slice2",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Deferred Lighting/16466715505527118000"},next:{title:"Filters",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Filters/"}},l={},d=[{value:"Technique <code>ambient</code>",id:"technique-ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Sampler 1",id:"sampler-1",level:4},{value:"Sampler 2",id:"sampler-2",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],i={toc:d},c="wrapper";function x(e){let{components:t,...r}=e;return(0,m.kt)(c,(0,n.Z)({},i,r,{components:t,mdxType:"MDXLayout"}),(0,m.kt)("h1",{id:"omni-default-hq-specular"},"Omni Default Hq Specular"),(0,m.kt)("p",null,"(",(0,m.kt)("inlineCode",{parentName:"p"},"omni:default:HQ:SPECULAR"),", ",(0,m.kt)("inlineCode",{parentName:"p"},"0xf218292934da58b6"),")"),(0,m.kt)("p",null,"This template is referenced 1 time by ",(0,m.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/deferred_lighting.render_template_database#omni-hq-specular"},"omni:HQ:SPECULAR"),"."),(0,m.kt)("h3",{id:"technique-ambient"},"Technique ",(0,m.kt)("inlineCode",{parentName:"h3"},"ambient")),(0,m.kt)("h3",{id:"render-states"},"Render States"),(0,m.kt)("p",null,"More info can be found on the ",(0,m.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_STENCILENABLE = 1,\n    D3DRS_STENCILFUNC = 6,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = -1,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 5,\n    D3DRS_STENCILWRITEMASK = 255,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 1,\n    D3DRS_BLENDOP = 1,\n    D3DRS_SRCBLEND = 2,\n    D3DRS_DESTBLEND = 2,\n    D3DRS_COLORWRITEENABLE = 7,\n};\n")),(0,m.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,m.kt)("p",null,"More info can be found on the ",(0,m.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,m.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 1,\n    D3DSAMP_MINFILTER = 1,\n    D3DSAMP_MIPFILTER = 1,\n};\n")),(0,m.kt)("h4",{id:"sampler-1"},"Sampler 1"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 1,\n    D3DSAMP_MINFILTER = 1,\n    D3DSAMP_MIPFILTER = 1,\n};\n")),(0,m.kt)("h4",{id:"sampler-2"},"Sampler 2"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 1,\n    D3DSAMP_MINFILTER = 1,\n    D3DSAMP_MIPFILTER = 1,\n};\n")),(0,m.kt)("h3",{id:"shaders"},"Shaders"),(0,m.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 camera_inv_view_matrix : register(vs_3_0, c4);\nfloat3 camera_unprojection : register(vs_3_0, c9);\nfloat ref_omni_scale : register(vs_3_0, c7);\nfloat3 render_target_texel_offset : register(vs_3_0, c8);\ncolumn_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nfloat3 vp_offset : register(vs_3_0, c10);\nfloat3 vp_size : register(vs_3_0, c11);\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n    float4 texcoord1 : TEXCOORD1;\n};\n\nVertexMain_Output VertexMain(float4 position : POSITION)\n{\n    VertexMain_Output o;\n    float4 temp0, temp1;\n    float3 temp2;\n    // def c12, 1, 2, -1, 0.5\n    // dcl_position v0\n    // dcl_position o0\n    // dcl_texcoord o1\n    // dcl_texcoord1 o2\n    // mul r0.xyz, c7.x, v0\n    temp0.xyz = ref_omni_scale.xxx * position.xyz;\n    // mov r0.w, c12.x\n    temp0.w = float1(1);\n    // dp4 r1.x, r0, c0\n    temp1.x = dot(temp0, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 r1.y, r0, c1\n    temp1.y = dot(temp0, (view_proj_matrix._m01_m11_m21_m31));\n    // mul r2.xy, r1, c9\n    temp2.xy = temp1.xy * camera_unprojection.xy;\n    // dp4 r2.z, r0, c3\n    temp2.z = dot(temp0, (view_proj_matrix._m03_m13_m23_m33));\n    // dp4 r1.z, r0, c2\n    temp1.z = dot(temp0, (view_proj_matrix._m02_m12_m22_m32));\n    // dp3 o2.x, r2, c4\n    o.texcoord1.x = dot(temp2.xyz, (camera_inv_view_matrix._m00_m10_m20_m30).xyz);\n    // dp3 o2.y, r2, c5\n    o.texcoord1.y = dot(temp2.xyz, (camera_inv_view_matrix._m01_m11_m21_m31).xyz);\n    // dp3 o2.z, r2, c6\n    o.texcoord1.z = dot(temp2.xyz, (camera_inv_view_matrix._m02_m12_m22_m32).xyz);\n    // mov r0.yw, c12\n    temp0.yw = float2(2, 0.5);\n    // mov r2.xy, c11\n    temp2.xy = vp_size.xy;\n    // mad r0.xy, c10, r0.y, r2\n    temp0.xy = vp_offset.xy * temp0.yy + temp2.xy;\n    // add r0.xy, r0, c12.z\n    temp0.xy = temp0.xy + float2(-1, -1);\n    // mul r0.xy, r0, r2.z\n    temp0.xy = temp0.xy * temp2.zz;\n    // mad r2.x, r1.x, c11.x, r0.x\n    temp2.x = temp1.x * vp_size.x + temp0.x;\n    // mad r2.y, r1.y, -c11.y, r0.y\n    temp2.y = temp1.y * -vp_size.y + temp0.y;\n    // add r0.xy, r0.w, c8\n    temp0.xy = temp0.ww + render_target_texel_offset.xy;\n    // add r0.z, r2.z, r2.z\n    temp0.z = temp2.z + temp2.z;\n    // mov r1.w, r2.z\n    temp1.w = temp2.z;\n    // mad o1.xy, r0, r0.z, r2\n    o.texcoord.xy = temp0.xy * temp0.zz + temp2.xy;\n    // mov o1.w, r0.z\n    o.texcoord.w = temp0.z;\n    // mov o0, r1\n    o.position = temp1;\n    // mov o2.w, r1.w\n    o.texcoord1.w = temp1.w;\n    // mov o1.z, r1.z\n    o.texcoord.z = temp1.z;\n    // \n\n    return o;\n}\n")),(0,m.kt)("p",null,"Decompiled by DXDecompiler."),(0,m.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D albedo : register(ps_3_0, s2);\ncolumn_major float4x4 camera_world_matrix : register(ps_3_0, c0);\nsampler2D depth : register(ps_3_0, s1);\nsampler2D normal : register(ps_3_0, s0);\nfloat3 ref_light_color : register(ps_3_0, c5);\nfloat ref_light_falloff : register(ps_3_0, c3);\nfloat ref_light_falloff_exponent : register(ps_3_0, c4);\nfloat3 ref_light_position : register(ps_3_0, c6);\nstruct PixelMain_Input\n{\n    float4 texcoord : TEXCOORD;\n    float4 texcoord1 : TEXCOORD1;\n};\n\nfloat4 PixelMain(PixelMain_Input i) : COLOR\n{\n    float4 out_color;\n    float4 temp0, temp1, temp2, temp5;\n    float3 temp3, temp4;\n    // def c7, 1, -0.5, 0.0001, 0\n    // def c8, 590, 10, 0.33, 1\n    // dcl_texcoord v0.xyw\n    // dcl_texcoord1 v1\n    // dcl_2d s0\n    // dcl_2d s1\n    // dcl_2d s2\n    // rcp r0.x, v1.w\n    temp0.x = 1.0f / i.texcoord1.w;\n    // mul r0.xyz, r0.x, v1\n    temp0.xyz = temp0.xxx * i.texcoord1.xyz;\n    // rcp r0.w, v0.w\n    temp0.w = 1.0f / i.texcoord.w;\n    // mul r1.xy, r0.w, v0\n    temp1.xy = temp0.ww * i.texcoord.xy;\n    // texld r2, r1, s1\n    temp2 = tex2D(depth, temp1.xy);\n    // mov r3.x, c0.w\n    temp3.x = (camera_world_matrix._m00_m10_m20_m30).w;\n    // mov r3.y, c1.w\n    temp3.y = (camera_world_matrix._m01_m11_m21_m31).w;\n    // mov r3.z, c2.w\n    temp3.z = (camera_world_matrix._m02_m12_m22_m32).w;\n    // mad r0.xyz, r0, r2.x, r3\n    temp0.xyz = temp0.xyz * temp2.xxx + temp3.xyz;\n    // add r2.xyz, -r0, r3\n    temp2.xyz = -temp0.xyz + temp3.xyz;\n    // add r0.xyz, -r0, c6\n    temp0.xyz = -temp0.xyz + ref_light_position.xyz;\n    // dp3 r0.w, r2, r2\n    temp0.w = dot(temp2.xyz, temp2.xyz);\n    // rsq r0.w, r0.w\n    temp0.w = 1 / sqrt(temp0.w);\n    // dp3 r1.z, r0, r0\n    temp1.z = dot(temp0.xyz, temp0.xyz);\n    // rsq r1.z, r1.z\n    temp1.z = 1 / sqrt(temp1.z);\n    // rcp r1.z, r1.z\n    temp1.z = 1.0f / temp1.z;\n    // add r1.w, r1.z, c7.z\n    temp1.w = temp1.z + float1(0.0001);\n    // mov r3.x, c7.x\n    temp3.x = float1(1);\n    // mad_sat r1.z, r1.z, -c3.x, r3.x\n    temp1.z = saturate(temp1.z * -ref_light_falloff.x + temp3.x);\n    // rcp r1.w, r1.w\n    temp1.w = 1.0f / temp1.w;\n    // mul r0.xyz, r0, r1.w\n    temp0.xyz = temp0.xyz * temp1.www;\n    // mad_pp r2.xyz, r2, r0.w, r0\n    temp2.xyz = /* not implemented _pp modifier */ temp2.xyz * temp0.www + temp0.xyz;\n    // nrm_pp r4.xyz, r2\n    temp4.xyz = /* not implemented _pp modifier */ normalize(temp2.xyz).xyz;\n    // texld r2, r1, s0\n    temp2 = tex2D(normal, temp1.xy);\n    // texld r5, r1, s2\n    temp5 = tex2D(albedo, temp1.xy);\n    // add r1.xyw, r2.xyzz, c7.y\n    temp1.xyw = temp2.xyz + float3(-0.5, -0.5, -0.5);\n    // mul r0.w, r2.w, r2.w\n    temp0.w = temp2.w * temp2.w;\n    // add r1.xyw, r1, r1\n    temp1.xyw = temp1.xyw + temp1.xyw;\n    // dp3_sat r2.x, r4, r1.xyww\n    temp2.x = saturate(dot(temp4.xyz, temp1.xyw));\n    // dp3_sat r0.x, r0, r1.xyww\n    temp0.x = saturate(dot(temp0.xyz, temp1.xyw));\n    // mul r0.x, r1.z, r0.x\n    temp0.x = temp1.z * temp0.x;\n    // mad r0.y, r5.w, c8.x, c8.y\n    temp0.y = temp5.w * float1(590) + float1(10);\n    // pow r1.x, r2.x, r0.y\n    temp1.x = pow(temp2.x, temp0.y);\n    // add_sat r0.y, -r3.x, c4.x\n    temp0.y = saturate(-temp3.x + ref_light_falloff_exponent.x);\n    // mad r0.y, r0.y, c8.z, c8.w\n    temp0.y = temp0.y * float1(0.33) + float1(1);\n    // mul r0.y, r0.y, r1.x\n    temp0.y = temp0.y * temp1.x;\n    // dp2add r0.z, r0.w, r0.x, c7.w\n    temp0.z = dot(temp0.ww, temp0.xx) + float1(0);\n    // mul r1, r0.x, c5.xyzz\n    temp1 = temp0.x * ref_light_color.xyzz;\n    // mul r0.x, r0.z, r0.y\n    temp0.x = temp0.z * temp0.y;\n    // mul r0, r0.x, c5.xyzz\n    temp0 = temp0.x * ref_light_color.xyzz;\n    // mad oC0, r5.xyzz, r1, r0\n    out_color = temp5.xyzz * temp1 + temp0;\n    // \n\n    return out_color;\n}\n")),(0,m.kt)("p",null,"Decompiled by DXDecompiler."))}x.isMDXComponent=!0}}]);