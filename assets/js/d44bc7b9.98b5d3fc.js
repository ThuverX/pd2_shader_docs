"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[82069],{603905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>x});var r=n(667294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),d=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):m(m({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",_={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),c=d(n),s=a,x=c["".concat(p,".").concat(s)]||c[s]||_[s]||o;return n?r.createElement(x,m(m({ref:t},l),{},{components:n})):r.createElement(x,m({ref:t},l))}));function x(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,m=new Array(o);m[0]=s;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:a,m[1]=i;for(var d=2;d<o;d++)m[d]=n[d];return r.createElement.apply(null,m)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},584043:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>m,default:()=>_,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=n(487462),a=(n(667294),n(603905));const o={id:0xb79a98cbd0ace000,title:"Opacity Default Diffuse Texture Diffuse Uvanim Nvidia Vegetation Bending"},m="Opacity Default Diffuse Texture Diffuse Uvanim Nvidia Vegetation Bending",i={unversionedId:"Generated/Shaders/Base/[3400-3500]/13230054856501027000",id:"Generated/Shaders/Base/[3400-3500]/13230054856501027000",title:"Opacity Default Diffuse Texture Diffuse Uvanim Nvidia Vegetation Bending",description:"(opacityDIFFUSETEXTURENVIDIA:VEGETATION_BENDING, 0xb79a98cbd0acde2d)",source:"@site/docs/Generated/Shaders/Base/[3400-3500]/0xb79a98cbd0acde2d.mdx",sourceDirName:"Generated/Shaders/Base/[3400-3500]",slug:"/Generated/Shaders/Base/[3400-3500]/13230054856501027000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3400-3500]/13230054856501027000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Base/[3400-3500]/0xb79a98cbd0acde2d.mdx",tags:[],version:"current",frontMatter:{id:"13230054856501027000",title:"Opacity Default Diffuse Texture Diffuse Uvanim Nvidia Vegetation Bending"},sidebar:"docsSidebar",previous:{title:"Generic Shadow Caster Blend Diffuse Blend Mask Seperate Blend Smooth Cube Environment Mapping Diffuse Texture Normalmap Rl Environment Vertex Color",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3400-3500]/13225635488349772000"},next:{title:"Generic Shadow Caster Cube Environment Mapping Diffuse Texture Double Sided Normalmap Nvidia Vegetation Bending",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[3400-3500]/13236312742412980000"}},p={},d=[{value:"Technique <code>transparent</code>",id:"technique-transparent",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Sampler 1",id:"sampler-1",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],l={toc:d},c="wrapper";function _(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"opacity-default-diffuse-texture-diffuse-uvanim-nvidia-vegetation-bending"},"Opacity Default Diffuse Texture Diffuse Uvanim Nvidia Vegetation Bending"),(0,a.kt)("p",null,"(",(0,a.kt)("inlineCode",{parentName:"p"},"opacity:default:DIFFUSE_TEXTURE:DIFFUSE_UVANIM:NVIDIA:VEGETATION_BENDING"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0xb79a98cbd0acde2d"),")"),(0,a.kt)("p",null,"This template is referenced 1 time by ",(0,a.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/base.render_template_database#opacity-diffuse-texture-diffuse-uvanim-vegetation-bending"},"opacity:DIFFUSE_TEXTURE:DIFFUSE_UVANIM:VEGETATION_BENDING"),".\nThis template uses the following inputs:\n|Name|UI Name|Type|\n|---|---|---|\n|opacity_texture|Opacity Texture (UV5)|texture|\n|diffuse_texture|Diffuse Texture (UV1)|texture|\n|uv_speed|UV Speed|vector3|\n|speed|Speed|scalar|\n|detail_settings|Detail Bending Amplitude / Frequency|vector3|\n|branch_settings|Branch Bending Amplitude / Frequency|vector3|."),(0,a.kt)("h3",{id:"technique-transparent"},"Technique ",(0,a.kt)("inlineCode",{parentName:"h3"},"transparent")),(0,a.kt)("h3",{id:"render-states"},"Render States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 1,\n    D3DRS_CULLMODE = 2,\n    D3DRS_COLORWRITEENABLE = 7,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 1,\n    D3DRS_STENCILFUNC = 6,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 5,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 4,\n    D3DRS_STENCILWRITEMASK = 5,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n    D3DRS_BLENDOP = 1,\n    D3DRS_DESTBLEND = 6,\n    D3DRS_SRCBLEND = 5,\n};\n")),(0,a.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,a.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,a.kt)("h4",{id:"sampler-1"},"Sampler 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,a.kt)("h3",{id:"shaders"},"Shaders"),(0,a.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"float camera_near_range : register(vs_3_0, c12);\ncolumn_major float4x4 proj_matrix : register(vs_3_0, c8);\nfloat3 ref_branch_settings : register(vs_3_0, c17);\nfloat3 ref_detail_settings : register(vs_3_0, c16);\nfloat ref_speed : register(vs_3_0, c15);\nfloat ref_time : register(vs_3_0, c13);\nfloat3 ref_uv_speed : register(vs_3_0, c14);\ncolumn_major float4x4 view_matrix : register(vs_3_0, c4);\ncolumn_major float4x4 world_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 normal : NORMAL;\n    float4 color : COLOR;\n    float4 texcoord4 : TEXCOORD4;\n    float4 texcoord : TEXCOORD;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float2 texcoord1 : TEXCOORD1;\n    float4 texcoord5 : TEXCOORD5;\n    float2 texcoord : TEXCOORD;\n    float3 texcoord2 : TEXCOORD2;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0, temp1;\n    float3 temp2, temp3;\n    float2 temp4;\n    // def c18, 2, -1, 1, -0.5\n    // def c19, 1.975, 0.793, 0.375, 0.193\n    // def c20, 2, 3, 0, 0\n    // dcl_position v0\n    // dcl_normal v1\n    // dcl_color v2\n    // dcl_texcoord4 v3\n    // dcl_texcoord v4\n    // dcl_position o0\n    // dcl_texcoord1 o1.xy\n    // dcl_texcoord5 o2\n    // dcl_texcoord o3.xy\n    // dcl_texcoord2 o4.xyz\n    // mov r0.x, c0.w\n    temp0.x = (world_matrix._m00_m10_m20_m30).w;\n    // mov r0.y, c1.w\n    temp0.y = (world_matrix._m01_m11_m21_m31).w;\n    // mov r0.z, c2.w\n    temp0.z = (world_matrix._m02_m12_m22_m32).w;\n    // dp3 r0.x, r0, c18.z\n    temp0.x = dot(temp0.xyz, float3(1, 1, 1));\n    // add r0.x, r0.x, v2.y\n    temp0.x = temp0.x + i.color.y;\n    // add r0.x, r0.x, c13.x\n    temp0.x = temp0.x + ref_time.x;\n    // mul r0.zw, r0.x, c17.y\n    temp0.zw = temp0.x * ref_branch_settings.y;\n    // add r1.x, c13.x, v2.y\n    temp1.x = ref_time.x + i.color.y;\n    // mul r0.xy, r1.x, c16.y\n    temp0.xy = temp1.x * ref_detail_settings.y;\n    // mul r0, r0, c15.x\n    temp0 = temp0 * ref_speed.x;\n    // mul r0, r0, c19\n    temp0 = temp0 * float4(1.975, 0.793, 0.375, 0.193);\n    // frc r0, r0\n    temp0 = frac(temp0);\n    // mad r0, r0, c18.x, c18.w\n    temp0 = temp0 * float4(2, 2, 2, 2) + float4(-0.5, -0.5, -0.5, -0.5);\n    // frc r0, r0\n    temp0 = frac(temp0);\n    // mad r0, r0, c18.x, c18.y\n    temp0 = temp0 * float4(2, 2, 2, 2) + float4(-1, -1, -1, -1);\n    // mul r1, r0_abs, r0_abs\n    temp1 = abs(temp0) * abs(temp0);\n    // mad r0, r0_abs, -c20.x, c20.y\n    temp0 = abs(temp0) * float4(-2, -2, -2, -2) + float4(3, 3, 3, 3);\n    // mul r0, r0, r1\n    temp0 = temp0 * temp1;\n    // add r0.xyz, r0.yyww, r0.xxzw\n    temp0.xyz = temp0.yyw + temp0.xxz;\n    // dp4 r1.x, v0, c0\n    temp1.x = dot(i.position, (world_matrix._m00_m10_m20_m30));\n    // dp4 r1.y, v0, c1\n    temp1.y = dot(i.position, (world_matrix._m01_m11_m21_m31));\n    // dp4 r1.z, v0, c2\n    temp1.z = dot(i.position, (world_matrix._m02_m12_m22_m32));\n    // mul r2.z, c17.x, v2.z\n    temp2.z = ref_branch_settings.x * i.color.z;\n    // mul r0.w, v2.z, v2.x\n    temp0.w = i.color.z * i.color.x;\n    // mul r0.w, r0.w, c16.x\n    temp0.w = temp0.w * ref_detail_settings.x;\n    // mad r3.xyz, v1, c18.x, c18.y\n    temp3.xyz = i.normal.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 r4.x, r3, c0\n    temp4.x = dot(temp3.xyz, (world_matrix._m00_m10_m20_m30).xyz);\n    // dp3 r4.y, r3, c1\n    temp4.y = dot(temp3.xyz, (world_matrix._m01_m11_m21_m31).xyz);\n    // dp3 o4.z, r3, c2\n    o.texcoord2.z = dot(temp3.xyz, (world_matrix._m02_m12_m22_m32).xyz);\n    // mul r2.xy, r0.w, r4\n    temp2.xy = temp0.ww * temp4.xy;\n    // mov o4.xy, r4\n    o.texcoord2.xy = temp4.xy;\n    // mad r0.xyz, r0, r2, r1\n    temp0.xyz = temp0.xyz * temp2.xyz + temp1.xyz;\n    // dp4 r0.w, v0, c3\n    temp0.w = dot(i.position, (world_matrix._m03_m13_m23_m33));\n    // dp4 r1.x, r0, c4\n    temp1.x = dot(temp0, (view_matrix._m00_m10_m20_m30));\n    // dp4 r1.y, r0, c5\n    temp1.y = dot(temp0, (view_matrix._m01_m11_m21_m31));\n    // dp4 r1.z, r0, c6\n    temp1.z = dot(temp0, (view_matrix._m02_m12_m22_m32));\n    // dp4 r1.w, r0, c7\n    temp1.w = dot(temp0, (view_matrix._m03_m13_m23_m33));\n    // mov o2.xyz, r0\n    o.texcoord5.xyz = temp0.xyz;\n    // dp4 o0.x, r1, c8\n    o.position.x = dot(temp1, (proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, r1, c9\n    o.position.y = dot(temp1, (proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.w, r1, c11\n    o.position.w = dot(temp1, (proj_matrix._m03_m13_m23_m33));\n    // dp4 r0.x, r1, c10\n    temp0.x = dot(temp1, (proj_matrix._m02_m12_m22_m32));\n    // mov r1.x, c13.x\n    temp1.x = ref_time.x;\n    // mad o3.xy, r1.x, c14, v4\n    o.texcoord = temp1.x * ref_uv_speed + i.texcoord;\n    // add o2.w, r0.x, c12.x\n    o.texcoord5.w = temp0.x + camera_near_range.x;\n    // mov o0.z, r0.x\n    o.position.z = temp0.x;\n    // mov o1.xy, v3\n    o.texcoord1 = i.texcoord4;\n    // \n\n    return o;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."),(0,a.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D diffuse_texture : register(ps_3_0, s1);\nsampler2D opacity_texture : register(ps_3_0, s0);\nfloat4 PixelMain(float2 texcoord : TEXCOORD) : COLOR\n{\n    float4 out_color;\n    float4 temp0;\n    // dcl_texcoord v0.xy\n    // dcl_2d s0\n    // dcl_2d s1\n    // texld_pp r0, v0, s1\n    temp0 = /* not implemented _pp modifier */ tex2D(diffuse_texture, texcoord.xy);\n    // mov_pp oC0.xyz, r0\n    out_color.xyz = /* not implemented _pp modifier */ temp0.xyz;\n    // texld_pp r0, v0, s0\n    temp0 = /* not implemented _pp modifier */ tex2D(opacity_texture, texcoord.xy);\n    // mov_pp oC0.w, r0.x\n    out_color.w = /* not implemented _pp modifier */ temp0.x;\n    // \n\n    return out_color;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."))}_.isMDXComponent=!0}}]);