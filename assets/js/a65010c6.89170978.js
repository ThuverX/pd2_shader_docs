"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[90146],{603905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>x});var r=n(667294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},i="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},_=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=m(e,["components","mdxType","originalType","parentName"]),i=p(n),_=a,x=i["".concat(l,".").concat(_)]||i[_]||c[_]||o;return n?r.createElement(x,d(d({ref:t},s),{},{components:n})):r.createElement(x,d({ref:t},s))}));function x(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,d=new Array(o);d[0]=_;var m={};for(var l in t)hasOwnProperty.call(t,l)&&(m[l]=t[l]);m.originalType=e,m[i]="string"==typeof e?e:a,d[1]=m;for(var p=2;p<o;p++)d[p]=n[p];return r.createElement.apply(null,d)}return r.createElement.apply(null,n)}_.displayName="MDXCreateElement"},857114:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>c,frontMatter:()=>o,metadata:()=>m,toc:()=>p});var r=n(487462),a=(n(667294),n(603905));const o={id:0xdcba206d9e363800,title:"Shadow Caster Only Shadow Caster Double Sided Instanced Shadow Caster Only Vegetation Bending"},d="Shadow Caster Only Shadow Caster Double Sided Instanced Shadow Caster Only Vegetation Bending",m={unversionedId:"Generated/Shaders/Base/[4100-4200]/15905060689190205000",id:"Generated/Shaders/Base/[4100-4200]/15905060689190205000",title:"Shadow Caster Only Shadow Caster Double Sided Instanced Shadow Caster Only Vegetation Bending",description:"(shadowcasteronlyDOUBLESIDEDSHADOWCASTERONLY:VEGETATION_BENDING, 0xdcba206d9e36362a)",source:"@site/docs/Generated/Shaders/Base/[4100-4200]/0xdcba206d9e36362a.mdx",sourceDirName:"Generated/Shaders/Base/[4100-4200]",slug:"/Generated/Shaders/Base/[4100-4200]/15905060689190205000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[4100-4200]/15905060689190205000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Base/[4100-4200]/0xdcba206d9e36362a.mdx",tags:[],version:"current",frontMatter:{id:"15905060689190205000",title:"Shadow Caster Only Shadow Caster Double Sided Instanced Shadow Caster Only Vegetation Bending"},sidebar:"docsSidebar",previous:{title:"Landscape Shadow Caster Ati Blend Masks Cubemap Mat0 Mat0 Blend World Mask Mat0 Nm Mat0 Uv2 Mat1 Mat1 Blend World Mask Mat1 Nm Mat1 Uv2 Mat2 Mat2 Blend World Mask Mat2 Nm Mat2 Uv2 Mat3 Mat3 Blend World Mask Mat3 Nm Mat3 Uv2 Overlay Over Detail World Mask A Wetness World Nm World Overlay Mask Texture World Overlay Texture World Tex Uv1",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[4100-4200]/15900192439459265000"},next:{title:"Generic Shadow Caster Alpha Masked Cube Environment Mapping Diffuse Texture Gsma Alpha Masking Gsma Texture Normalmap Nvidia Vertex Color",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[4100-4200]/15915918881433123000"}},l={},p=[{value:"Technique <code>ambient</code>",id:"technique-ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],s={toc:p},i="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(i,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"shadow-caster-only-shadow-caster-double-sided-instanced-shadow-caster-only-vegetation-bending"},"Shadow Caster Only Shadow Caster Double Sided Instanced Shadow Caster Only Vegetation Bending"),(0,a.kt)("p",null,"(",(0,a.kt)("inlineCode",{parentName:"p"},"shadow_caster_only:shadow_caster:DOUBLE_SIDED:INSTANCED:SHADOW_CASTER_ONLY:VEGETATION_BENDING"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0xdcba206d9e36362a"),")"),(0,a.kt)("p",null,"This template is referenced 1 time by ",(0,a.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/base.render_template_database#shadow-caster-only-double-sided-instanced-vegetation-bending"},"shadow_caster_only:DOUBLE_SIDED:INSTANCED:VEGETATION_BENDING"),".\nThis template uses the following inputs:\n|Name|UI Name|Type|\n|---|---|---|\n|speed|Speed|scalar|\n|detail_settings|Detail Bending Amplitude / Frequency|vector3|\n|branch_settings|Branch Bending Amplitude / Frequency|vector3|."),(0,a.kt)("h3",{id:"technique-ambient"},"Technique ",(0,a.kt)("inlineCode",{parentName:"h3"},"ambient")),(0,a.kt)("h3",{id:"render-states"},"Render States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 1,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 1,\n    D3DRS_COLORWRITEENABLE = 15,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 961656599,\n    D3DRS_SLOPESCALEDEPTHBIAS = 1075838976,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,a.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,a.kt)("h3",{id:"shaders"},"Shaders"),(0,a.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 proj_matrix : register(vs_3_0, c204);\nfloat3 ref_branch_settings : register(vs_3_0, c211);\nfloat3 ref_detail_settings : register(vs_3_0, c210);\nfloat ref_speed : register(vs_3_0, c209);\nfloat ref_time : register(vs_3_0, c208);\ncolumn_major float4x4 ref_world_tm[50] : register(vs_3_0, c0);\ncolumn_major float4x4 view_matrix : register(vs_3_0, c200);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 normal : NORMAL;\n    float4 color : COLOR;\n    float4 position1 : POSITION1;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float texcoord1 : TEXCOORD1;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0, temp1, temp2;\n    float addr0;\n    float3 temp3;\n    // def c212, 4, 1, 0, -2\n    // def c213, 1.975, 0.793, 0.375, 0.193\n    // def c214, 2, -0.5, 3, 0\n    // dcl_position v0\n    // dcl_normal v1\n    // dcl_color v2\n    // dcl_position1 v3\n    // dcl_position o0\n    // dcl_texcoord1 o1.x\n    // add r0.x, c208.x, v2.y\n    temp0.x = ref_time.x + i.color.y;\n    // mul r0.xy, r0.x, c210.y\n    temp0.xy = temp0.x * ref_detail_settings.y;\n    // frc r1.x, v3.x\n    temp1.x = frac(i.position1.x);\n    // add r1.x, -r1.x, v3.x\n    temp1.x = -temp1.x + i.position1.x;\n    // mul r1.x, r1.x, c212.x\n    temp1.x = temp1.x * float1(4);\n    // mova a0.x, r1.x\n    addr0.x = temp1.x;\n    // mov r1.x, c0[a0.x].w\n    temp1.x = (ref_world_tm[0 + (addr0.x / 4)]._m00_m10_m20_m30).w;\n    // mov r1.y, c1[a0.x].w\n    temp1.y = (ref_world_tm[0 + (addr0.x / 4)]._m01_m11_m21_m31).w;\n    // mov r1.z, c2[a0.x].w\n    temp1.z = (ref_world_tm[0 + (addr0.x / 4)]._m02_m12_m22_m32).w;\n    // dp3 r1.x, r1, c212.y\n    temp1.x = dot(temp1.xyz, float3(1, 1, 1));\n    // add r1.x, r1.x, v2.y\n    temp1.x = temp1.x + i.color.y;\n    // add r1.x, r1.x, c208.x\n    temp1.x = temp1.x + ref_time.x;\n    // mul r0.zw, r1.x, c211.y\n    temp0.zw = temp1.x * ref_branch_settings.y;\n    // mul r0, r0, c209.x\n    temp0 = temp0 * ref_speed.x;\n    // mul r0, r0, c213\n    temp0 = temp0 * float4(1.975, 0.793, 0.375, 0.193);\n    // frc r0, r0\n    temp0 = frac(temp0);\n    // mad r0, r0, c214.x, c214.y\n    temp0 = temp0 * float4(2, 2, 2, 2) + float4(-0.5, -0.5, -0.5, -0.5);\n    // frc r0, r0\n    temp0 = frac(temp0);\n    // mad r0, r0, -c212.w, -c212.y\n    temp0 = temp0 * float4(2, 2, 2, 2) + float4(-1, -1, -1, -1);\n    // mul r1, r0_abs, r0_abs\n    temp1 = abs(temp0) * abs(temp0);\n    // mad r0, r0_abs, -c214.x, c214.z\n    temp0 = abs(temp0) * float4(-2, -2, -2, -2) + float4(3, 3, 3, 3);\n    // mul r0, r0, r1\n    temp0 = temp0 * temp1;\n    // add r0.xyz, r0.yyww, r0.xxzw\n    temp0.xyz = temp0.yyw + temp0.xxz;\n    // mul r1.z, c211.x, v2.z\n    temp1.z = ref_branch_settings.x * i.color.z;\n    // mul r0.w, v2.z, v2.x\n    temp0.w = i.color.z * i.color.x;\n    // mul r0.w, r0.w, c210.x\n    temp0.w = temp0.w * ref_detail_settings.x;\n    // mad r2.xyz, v1, -c212.w, -c212.y\n    temp2.xyz = i.normal.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 r3.x, r2, c0[a0.x]\n    temp3.x = dot(temp2.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m00_m10_m20_m30).xyz);\n    // dp3 r3.y, r2, c1[a0.x]\n    temp3.y = dot(temp2.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m01_m11_m21_m31).xyz);\n    // mul r1.xy, r0.w, r3\n    temp1.xy = temp0.ww * temp3.xy;\n    // mad r2, v0.xyzx, c212.yyyz, c212.zzzy\n    temp2 = i.position.xyzx * float4(1, 1, 1, 0) + float4(0, 0, 0, 1);\n    // dp4 r3.x, r2, c0[a0.x]\n    temp3.x = dot(temp2, (ref_world_tm[0 + (addr0.x / 4)]._m00_m10_m20_m30));\n    // dp4 r3.y, r2, c1[a0.x]\n    temp3.y = dot(temp2, (ref_world_tm[0 + (addr0.x / 4)]._m01_m11_m21_m31));\n    // dp4 r3.z, r2, c2[a0.x]\n    temp3.z = dot(temp2, (ref_world_tm[0 + (addr0.x / 4)]._m02_m12_m22_m32));\n    // dp4 r2.w, r2, c3[a0.x]\n    temp2.w = dot(temp2, (ref_world_tm[0 + (addr0.x / 4)]._m03_m13_m23_m33));\n    // mad r2.xyz, r0, r1, r3\n    temp2.xyz = temp0.xyz * temp1.xyz + temp3.xyz;\n    // dp4 r0.x, r2, c200\n    temp0.x = dot(temp2, (view_matrix._m00_m10_m20_m30));\n    // dp4 r0.y, r2, c201\n    temp0.y = dot(temp2, (view_matrix._m01_m11_m21_m31));\n    // dp4 r0.z, r2, c202\n    temp0.z = dot(temp2, (view_matrix._m02_m12_m22_m32));\n    // dp4 r0.w, r2, c203\n    temp0.w = dot(temp2, (view_matrix._m03_m13_m23_m33));\n    // dp4 o0.x, r0, c204\n    o.position.x = dot(temp0, (proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, r0, c205\n    o.position.y = dot(temp0, (proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.w, r0, c207\n    o.position.w = dot(temp0, (proj_matrix._m03_m13_m23_m33));\n    // dp4 r0.x, r0, c206\n    temp0.x = dot(temp0, (proj_matrix._m02_m12_m22_m32));\n    // mov o0.z, r0.x\n    o.position.z = temp0.x;\n    // mov o1.x, r0.x\n    o.texcoord1 = temp0.x;\n    // \n\n    return o;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."),(0,a.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"float4 PixelMain(float texcoord1 : TEXCOORD1) : COLOR\n{\n    float4 out_color;\n    // def c0, 1, 0, 0, 0\n    // dcl_texcoord1 v0.x\n    // mul oC0, c0.xyyy, v0.x\n    out_color = float4(1, 0, 0, 0) * texcoord1.x;\n    // \n\n    return out_color;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."))}c.isMDXComponent=!0}}]);