"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[6730],{3905:(e,t,r)=>{r.d(t,{Zo:()=>i,kt:()=>_});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function m(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?m(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):m(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},m=Object.keys(e);for(n=0;n<m.length;n++)r=m[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(n=0;n<m.length;n++)r=m[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},i=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},x=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,m=e.originalType,l=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),c=d(r),x=a,_=c["".concat(l,".").concat(x)]||c[x]||s[x]||m;return r?n.createElement(_,p(p({ref:t},i),{},{components:r})):n.createElement(_,p({ref:t},i))}));function _(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var m=r.length,p=new Array(m);p[0]=x;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:a,p[1]=o;for(var d=2;d<m;d++)p[d]=r[d];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}x.displayName="MDXCreateElement"},8278:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>s,frontMatter:()=>m,metadata:()=>o,toc:()=>d});var n=r(7462),a=(r(7294),r(3905));const m={id:0xa08e32f5dde37000,title:"Omni Default Shadow Gen"},p="Omni Default Shadow Gen",o={unversionedId:"Generated/Shaders/Deferred Lighting/11569240524332430000",id:"Generated/Shaders/Deferred Lighting/11569240524332430000",title:"Omni Default Shadow Gen",description:"(omniSHADOW_GEN, 0xa08e32f5dde36d0e)",source:"@site/docs/Generated/Shaders/Deferred Lighting/0xa08e32f5dde36d0e.mdx",sourceDirName:"Generated/Shaders/Deferred Lighting",slug:"/Generated/Shaders/Deferred Lighting/11569240524332430000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Deferred Lighting/11569240524332430000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Deferred Lighting/0xa08e32f5dde36d0e.mdx",tags:[],version:"current",frontMatter:{id:"11569240524332430000",title:"Omni Default Shadow Gen"},sidebar:"docsSidebar",previous:{title:"Global Shadow Mask Default Slice1",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Deferred Lighting/11562867385910594000"},next:{title:"Global Shadow Mask Default Dx9 Hwsm Nvdbt Slice2",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Deferred Lighting/11782141205145666000"}},l={},d=[{value:"Technique <code>ambient</code>",id:"technique-ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Sampler 1",id:"sampler-1",level:4},{value:"Sampler 2",id:"sampler-2",level:4},{value:"Sampler 3",id:"sampler-3",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],i={toc:d},c="wrapper";function s(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},i,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"omni-default-shadow-gen"},"Omni Default Shadow Gen"),(0,a.kt)("p",null,"(",(0,a.kt)("inlineCode",{parentName:"p"},"omni:default:SHADOW_GEN"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0xa08e32f5dde36d0e"),")"),(0,a.kt)("p",null,"This template is referenced 1 time by ",(0,a.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/deferred_lighting.render_template_database#omni-shadow-gen"},"omni:SHADOW_GEN"),"."),(0,a.kt)("h3",{id:"technique-ambient"},"Technique ",(0,a.kt)("inlineCode",{parentName:"h3"},"ambient")),(0,a.kt)("h3",{id:"render-states"},"Render States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_COLORWRITEENABLE = 15,\n    D3DRS_ZENABLE = 0,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 8,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = -1,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 5,\n    D3DRS_STENCILWRITEMASK = 255,\n    D3DRS_STENCILZFAIL = 1,\n};\n")),(0,a.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,a.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 1,\n    D3DSAMP_MINFILTER = 1,\n    D3DSAMP_MIPFILTER = 1,\n};\n")),(0,a.kt)("h4",{id:"sampler-1"},"Sampler 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 1,\n    D3DSAMP_MINFILTER = 1,\n    D3DSAMP_MIPFILTER = 1,\n};\n")),(0,a.kt)("h4",{id:"sampler-2"},"Sampler 2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 1,\n    D3DSAMP_MINFILTER = 1,\n    D3DSAMP_MIPFILTER = 1,\n};\n")),(0,a.kt)("h4",{id:"sampler-3"},"Sampler 3"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 1,\n    D3DSAMP_MINFILTER = 1,\n    D3DSAMP_MIPFILTER = 1,\n};\n")),(0,a.kt)("h3",{id:"shaders"},"Shaders"),(0,a.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 camera_inv_view_matrix : register(vs_3_0, c4);\nfloat3 camera_unprojection : register(vs_3_0, c9);\nfloat ref_omni_scale : register(vs_3_0, c7);\nfloat3 render_target_texel_offset : register(vs_3_0, c8);\ncolumn_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nfloat3 vp_offset : register(vs_3_0, c10);\nfloat3 vp_size : register(vs_3_0, c11);\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n    float4 texcoord1 : TEXCOORD1;\n};\n\nVertexMain_Output VertexMain(float4 position : POSITION)\n{\n    VertexMain_Output o;\n    float4 temp0, temp1;\n    float3 temp2;\n    // def c12, 1, 2, -1, 0.5\n    // dcl_position v0\n    // dcl_position o0\n    // dcl_texcoord o1\n    // dcl_texcoord1 o2\n    // mul r0.xyz, c7.x, v0\n    temp0.xyz = ref_omni_scale.xxx * position.xyz;\n    // mov r0.w, c12.x\n    temp0.w = float1(1);\n    // dp4 r1.x, r0, c0\n    temp1.x = dot(temp0, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 r1.y, r0, c1\n    temp1.y = dot(temp0, (view_proj_matrix._m01_m11_m21_m31));\n    // mul r2.xy, r1, c9\n    temp2.xy = temp1.xy * camera_unprojection.xy;\n    // dp4 r2.z, r0, c3\n    temp2.z = dot(temp0, (view_proj_matrix._m03_m13_m23_m33));\n    // dp4 r1.z, r0, c2\n    temp1.z = dot(temp0, (view_proj_matrix._m02_m12_m22_m32));\n    // dp3 o2.x, r2, c4\n    o.texcoord1.x = dot(temp2.xyz, (camera_inv_view_matrix._m00_m10_m20_m30).xyz);\n    // dp3 o2.y, r2, c5\n    o.texcoord1.y = dot(temp2.xyz, (camera_inv_view_matrix._m01_m11_m21_m31).xyz);\n    // dp3 o2.z, r2, c6\n    o.texcoord1.z = dot(temp2.xyz, (camera_inv_view_matrix._m02_m12_m22_m32).xyz);\n    // mov r0.yw, c12\n    temp0.yw = float2(2, 0.5);\n    // mov r2.xy, c11\n    temp2.xy = vp_size.xy;\n    // mad r0.xy, c10, r0.y, r2\n    temp0.xy = vp_offset.xy * temp0.yy + temp2.xy;\n    // add r0.xy, r0, c12.z\n    temp0.xy = temp0.xy + float2(-1, -1);\n    // mul r0.xy, r0, r2.z\n    temp0.xy = temp0.xy * temp2.zz;\n    // mad r2.x, r1.x, c11.x, r0.x\n    temp2.x = temp1.x * vp_size.x + temp0.x;\n    // mad r2.y, r1.y, -c11.y, r0.y\n    temp2.y = temp1.y * -vp_size.y + temp0.y;\n    // add r0.xy, r0.w, c8\n    temp0.xy = temp0.ww + render_target_texel_offset.xy;\n    // add r0.z, r2.z, r2.z\n    temp0.z = temp2.z + temp2.z;\n    // mov r1.w, r2.z\n    temp1.w = temp2.z;\n    // mad o1.xy, r0, r0.z, r2\n    o.texcoord.xy = temp0.xy * temp0.zz + temp2.xy;\n    // mov o1.w, r0.z\n    o.texcoord.w = temp0.z;\n    // mov o0, r1\n    o.position = temp1;\n    // mov o2.w, r1.w\n    o.texcoord1.w = temp1.w;\n    // mov o1.z, r1.z\n    o.texcoord.z = temp1.z;\n    // \n\n    return o;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."),(0,a.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D albedo : register(ps_3_0, s3);\ncolumn_major float4x4 camera_world_matrix : register(ps_3_0, c0);\nsampler2D depth : register(ps_3_0, s1);\nsampler2D normal : register(ps_3_0, s0);\nfloat ref_light_falloff : register(ps_3_0, c3);\nfloat3 ref_light_position : register(ps_3_0, c4);\nsampler2D temp : register(ps_3_0, s2);\nstruct PixelMain_Input\n{\n    float4 texcoord : TEXCOORD;\n    float4 texcoord1 : TEXCOORD1;\n};\n\nfloat4 PixelMain(PixelMain_Input i) : COLOR\n{\n    float4 out_color;\n    float4 temp0, temp1, temp2;\n    float3 temp3;\n    // def c5, 1, -0.5, 0.0001, 0.75\n    // def c6, -0.15, 1.1764706, 5, 0\n    // dcl_texcoord v0.xyw\n    // dcl_texcoord1 v1\n    // dcl_2d s0\n    // dcl_2d s1\n    // dcl_2d s2\n    // dcl_2d s3\n    // rcp r0.x, v1.w\n    temp0.x = 1.0f / i.texcoord1.w;\n    // mul r0.xyz, r0.x, v1\n    temp0.xyz = temp0.xxx * i.texcoord1.xyz;\n    // rcp r0.w, v0.w\n    temp0.w = 1.0f / i.texcoord.w;\n    // mul r1.xy, r0.w, v0\n    temp1.xy = temp0.ww * i.texcoord.xy;\n    // texld r2, r1, s1\n    temp2 = tex2D(depth, temp1.xy);\n    // mad r3.x, r0.x, r2.x, c0.w\n    temp3.x = temp0.x * temp2.x + (camera_world_matrix._m00_m10_m20_m30).w;\n    // mad r3.y, r0.y, r2.x, c1.w\n    temp3.y = temp0.y * temp2.x + (camera_world_matrix._m01_m11_m21_m31).w;\n    // mad r3.z, r0.z, r2.x, c2.w\n    temp3.z = temp0.z * temp2.x + (camera_world_matrix._m02_m12_m22_m32).w;\n    // add r0.xyz, -r3, c4\n    temp0.xyz = -temp3.xyz + ref_light_position.xyz;\n    // dp3 r0.w, r0, r0\n    temp0.w = dot(temp0.xyz, temp0.xyz);\n    // rsq r0.w, r0.w\n    temp0.w = 1 / sqrt(temp0.w);\n    // rcp r0.w, r0.w\n    temp0.w = 1.0f / temp0.w;\n    // add r1.z, r0.w, c5.z\n    temp1.z = temp0.w + float1(0.0001);\n    // mov r2.x, c5.x\n    temp2.x = float1(1);\n    // mad_sat r0.w, r0.w, -c3.x, r2.x\n    temp0.w = saturate(temp0.w * -ref_light_falloff.x + temp2.x);\n    // rcp r1.z, r1.z\n    temp1.z = 1.0f / temp1.z;\n    // mul r0.xyz, r0, r1.z\n    temp0.xyz = temp0.xyz * temp1.zzz;\n    // texld r2, r1, s0\n    temp2 = tex2D(normal, temp1.xy);\n    // add r2.xyz, r2, c5.y\n    temp2.xyz = temp2.xyz + float3(-0.5, -0.5, -0.5);\n    // add r2.xyz, r2, r2\n    temp2.xyz = temp2.xyz + temp2.xyz;\n    // dp3_sat r0.x, r0, r2\n    temp0.x = saturate(dot(temp0.xyz, temp2.xyz));\n    // pow r1.z, r0.x, c5.w\n    temp1.z = pow(temp0.x, float1(0.75));\n    // rsq r0.x, r0.w\n    temp0.x = 1 / sqrt(temp0.w);\n    // mov oC0.w, r0.w\n    out_color.w = temp0.w;\n    // rcp r0.x, r0.x\n    temp0.x = 1.0f / temp0.x;\n    // mul r0.x, r1.z, r0.x\n    temp0.x = temp1.z * temp0.x;\n    // texld r2, r1, s3\n    temp2 = tex2D(albedo, temp1.xy);\n    // texld r1, r1, s2\n    temp1 = tex2D(temp, temp1.xy);\n    // mad r0.xyz, r2, r0.x, c6.x\n    temp0.xyz = temp2.xyz * temp0.xxx + float3(-0.15, -0.15, -0.15);\n    // mul_sat r0.xyz, r0, c6.y\n    temp0.xyz = saturate(temp0.xyz * float3(1.1764706, 1.1764706, 1.1764706));\n    // mad oC0.xyz, r1, c6.z, r0\n    out_color.xyz = temp1.xyz * float3(5, 5, 5) + temp0.xyz;\n    // \n\n    return out_color;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."))}s.isMDXComponent=!0}}]);