"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[6920],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>_});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},p=Object.keys(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),l=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},m=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},x=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,p=e.originalType,i=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),c=l(r),x=o,_=c["".concat(i,".").concat(x)]||c[x]||s[x]||p;return r?n.createElement(_,a(a({ref:t},m),{},{components:r})):n.createElement(_,a({ref:t},m))}));function _(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var p=r.length,a=new Array(p);a[0]=x;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d[c]="string"==typeof e?e:o,a[1]=d;for(var l=2;l<p;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}x.displayName="MDXCreateElement"},1974:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>s,frontMatter:()=>p,metadata:()=>d,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const p={id:0x69ceab8922200400,title:"9 Tap Filter Pow Default"},a="9 Tap Filter Pow Default",d={unversionedId:"Generated/Shaders/Filters/7624219824656221000",id:"Generated/Shaders/Filters/7624219824656221000",title:"9 Tap Filter Pow Default",description:"(9tapfilter_pow:default, 0x69ceab89222004aa)",source:"@site/docs/Generated/Shaders/Filters/0x69ceab89222004aa.mdx",sourceDirName:"Generated/Shaders/Filters",slug:"/Generated/Shaders/Filters/7624219824656221000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Filters/7624219824656221000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Filters/0x69ceab89222004aa.mdx",tags:[],version:"current",frontMatter:{id:"7624219824656221000",title:"9 Tap Filter Pow Default"},sidebar:"docsSidebar",previous:{title:"Bink Frame Default",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Filters/7568423737117508000"},next:{title:"Identity Left Default",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Filters/7722629635250859000"}},i={},l=[{value:"Technique <code>ambient</code>",id:"technique-ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],m={toc:l},c="wrapper";function s(e){let{components:t,...r}=e;return(0,o.kt)(c,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"9-tap-filter-pow-default"},"9 Tap Filter Pow Default"),(0,o.kt)("p",null,"(",(0,o.kt)("inlineCode",{parentName:"p"},"9_tap_filter_pow:default"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"0x69ceab89222004aa"),")"),(0,o.kt)("p",null,"This template is referenced 1 time by ",(0,o.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/filters.render_template_database#9-tap-filter-pow"},"9_tap_filter_pow"),"."),(0,o.kt)("h3",{id:"technique-ambient"},"Technique ",(0,o.kt)("inlineCode",{parentName:"h3"},"ambient")),(0,o.kt)("h3",{id:"render-states"},"Render States"),(0,o.kt)("p",null,"More info can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 0,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 1,\n    D3DRS_COLORWRITEENABLE = 7,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,o.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,o.kt)("p",null,"More info can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,o.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 2,\n    D3DSAMP_MINFILTER = 2,\n    D3DSAMP_MIPFILTER = 2,\n};\n")),(0,o.kt)("h3",{id:"shaders"},"Shaders"),(0,o.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"float3 ref_inv_source_resolution : register(vs_3_0, c4);\ncolumn_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float2 texcoord : TEXCOORD;\n    float4 texcoord1 : TEXCOORD1;\n    float3 texcoord2 : TEXCOORD2;\n    float3 texcoord3 : TEXCOORD3;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float2 temp0;\n    // def c5, 1.05, -1.05, 0, 0\n    // def c6, 1.4, 0, -1.4, 0\n    // dcl_position v0\n    // dcl_texcoord v1\n    // dcl_position o0\n    // dcl_texcoord o1.xy\n    // dcl_texcoord1 o2\n    // dcl_texcoord2 o3.xyz\n    // dcl_texcoord3 o4.xyz\n    // dp4 o0.x, v0, c0\n    o.position.x = dot(i.position, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, v0, c1\n    o.position.y = dot(i.position, (view_proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.z, v0, c2\n    o.position.z = dot(i.position, (view_proj_matrix._m02_m12_m22_m32));\n    // dp4 o0.w, v0, c3\n    o.position.w = dot(i.position, (view_proj_matrix._m03_m13_m23_m33));\n    // mov r0.xy, c4\n    temp0.xy = ref_inv_source_resolution.xy;\n    // mul o2, r0.xxyy, c5.xyxy\n    o.texcoord1 = temp0.xxyy * float4(1.05, -1.05, 1.05, -1.05);\n    // mov o1.xy, v1\n    o.texcoord = i.texcoord;\n    // mul o3.xyz, r0.xxyw, c6\n    o.texcoord2 = temp0.xxyw * float4(1.4, 0, -1.4, 0);\n    // mul o4.xyz, r0.xxyw, c6.zyxw\n    o.texcoord3 = temp0.xxyw * float4(-1.4, 0, 1.4, 0);\n    // \n\n    return o;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."),(0,o.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D ref_src_texture : register(ps_3_0, s0);\nstruct PixelMain_Input\n{\n    float2 texcoord : TEXCOORD;\n    float4 texcoord1 : TEXCOORD1;\n    float3 texcoord2 : TEXCOORD2;\n    float3 texcoord3 : TEXCOORD3;\n};\n\nfloat4 PixelMain(PixelMain_Input i) : COLOR\n{\n    float4 out_color;\n    float4 temp0, temp1, temp2, temp3;\n    // def c0, 0.11111111, 0, 0, 0\n    // dcl_texcoord v0.xy\n    // dcl_texcoord1 v1\n    // dcl_texcoord2 v2.xyz\n    // dcl_texcoord3 v3.xyz\n    // dcl_2d s0\n    // texld_pp r0, v0, s0\n    temp0 = /* not implemented _pp modifier */ tex2D(ref_src_texture, i.texcoord.xy);\n    // mov r1.xy, v0\n    temp1.xy = i.texcoord.xy;\n    // add r2, r1.xyxy, v1.ywxw\n    temp2 = temp1.xyxy + i.texcoord1.ywxw;\n    // texld r3, r2, s0\n    temp3 = tex2D(ref_src_texture, temp2.xy);\n    // texld r2, r2.zwzw, s0\n    temp2 = tex2D(ref_src_texture, temp2.zw);\n    // add_pp r0, r0.xyzz, r3.xyzz\n    temp0 = /* not implemented _pp modifier */ temp0.xyzz + temp3.xyzz;\n    // add_pp r0, r2.xyzz, r0\n    temp0 = /* not implemented _pp modifier */ temp2.xyzz + temp0;\n    // add r2, r1.xyxy, v1.yzxz\n    temp2 = temp1.xyxy + i.texcoord1.yzxz;\n    // texld r3, r2, s0\n    temp3 = tex2D(ref_src_texture, temp2.xy);\n    // texld r2, r2.zwzw, s0\n    temp2 = tex2D(ref_src_texture, temp2.zw);\n    // add_pp r0, r0, r3.xyzz\n    temp0 = /* not implemented _pp modifier */ temp0 + temp3.xyzz;\n    // add_pp r0, r2.xyzz, r0\n    temp0 = /* not implemented _pp modifier */ temp2.xyzz + temp0;\n    // add r2, r1.xyxy, v2.yzxy\n    temp2 = temp1.xyxy + i.texcoord2.yzxy;\n    // texld r3, r2, s0\n    temp3 = tex2D(ref_src_texture, temp2.xy);\n    // texld r2, r2.zwzw, s0\n    temp2 = tex2D(ref_src_texture, temp2.zw);\n    // add_pp r0, r0, r3.xyzz\n    temp0 = /* not implemented _pp modifier */ temp0 + temp3.xyzz;\n    // add_pp r0, r2.xyzz, r0\n    temp0 = /* not implemented _pp modifier */ temp2.xyzz + temp0;\n    // add r1, r1.xyxy, v3.xyyz\n    temp1 = temp1.xyxy + i.texcoord3.xyyz;\n    // texld r2, r1, s0\n    temp2 = tex2D(ref_src_texture, temp1.xy);\n    // texld r1, r1.zwzw, s0\n    temp1 = tex2D(ref_src_texture, temp1.zw);\n    // add_pp r0, r0, r2.xyzz\n    temp0 = /* not implemented _pp modifier */ temp0 + temp2.xyzz;\n    // add_pp r0, r1.xyzz, r0\n    temp0 = /* not implemented _pp modifier */ temp1.xyzz + temp0;\n    // mul_pp r0, r0, c0.x\n    temp0 = /* not implemented _pp modifier */ temp0 * float4(0.11111111, 0.11111111, 0.11111111, 0.11111111);\n    // mul_pp oC0, r0, r0\n    out_color = /* not implemented _pp modifier */ temp0 * temp0;\n    // \n\n    return out_color;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."))}s.isMDXComponent=!0}}]);