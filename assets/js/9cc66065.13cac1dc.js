"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[4966],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>_});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},x=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(n),x=o,_=c["".concat(i,".").concat(x)]||c[x]||m[x]||a;return n?r.createElement(_,p(p({ref:t},d),{},{components:n})):r.createElement(_,p({ref:t},d))}));function _(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,p=new Array(a);p[0]=x;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:o,p[1]=l;for(var s=2;s<a;s++)p[s]=n[s];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}x.displayName="MDXCreateElement"},8660:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>p,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={id:0x8f111df315e65800,title:"Scene Bright Pass Default"},p="Scene Bright Pass Default",l={unversionedId:"Generated/Shaders/Filters/10309053951909452000",id:"Generated/Shaders/Filters/10309053951909452000",title:"Scene Bright Pass Default",description:"(scenebrightpass:default, 0x8f111df315e657ed)",source:"@site/docs/Generated/Shaders/Filters/0x8f111df315e657ed.mdx",sourceDirName:"Generated/Shaders/Filters",slug:"/Generated/Shaders/Filters/10309053951909452000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Filters/10309053951909452000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Filters/0x8f111df315e657ed.mdx",tags:[],version:"current",frontMatter:{id:"10309053951909452000",title:"Scene Bright Pass Default"},sidebar:"docsSidebar",previous:{title:"Blend Default Add",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Filters/9762873651611116000"},next:{title:"Blend Default Screen",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Filters/10600538829848880000"}},i={},s=[{value:"Technique <code>ambient</code>",id:"technique-ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Sampler 1",id:"sampler-1",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],d={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"scene-bright-pass-default"},"Scene Bright Pass Default"),(0,o.kt)("p",null,"(",(0,o.kt)("inlineCode",{parentName:"p"},"scene_bright_pass:default"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"0x8f111df315e657ed"),")"),(0,o.kt)("p",null,"This template is referenced 1 time by ",(0,o.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/filters.render_template_database#scene-bright-pass"},"scene_bright_pass"),"."),(0,o.kt)("h3",{id:"technique-ambient"},"Technique ",(0,o.kt)("inlineCode",{parentName:"h3"},"ambient")),(0,o.kt)("h3",{id:"render-states"},"Render States"),(0,o.kt)("p",null,"More info can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 0,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 1,\n    D3DRS_COLORWRITEENABLE = 15,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,o.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,o.kt)("p",null,"More info can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,o.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 1,\n    D3DSAMP_MINFILTER = 1,\n    D3DSAMP_MIPFILTER = 1,\n};\n")),(0,o.kt)("h4",{id:"sampler-1"},"Sampler 1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 1,\n    D3DSAMP_MINFILTER = 1,\n    D3DSAMP_MIPFILTER = 1,\n};\n")),(0,o.kt)("h3",{id:"shaders"},"Shaders"),(0,o.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"float ref_threshold : register(vs_3_0, c4);\ncolumn_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float2 texcoord : TEXCOORD;\n    float2 texcoord1 : TEXCOORD1;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float temp0;\n    // def c5, 1, 0, 0, 0\n    // dcl_position v0\n    // dcl_texcoord v1\n    // dcl_position o0\n    // dcl_texcoord o1.xy\n    // dcl_texcoord1 o2.xy\n    // dp4 o0.x, v0, c0\n    o.position.x = dot(i.position, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, v0, c1\n    o.position.y = dot(i.position, (view_proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.z, v0, c2\n    o.position.z = dot(i.position, (view_proj_matrix._m02_m12_m22_m32));\n    // dp4 o0.w, v0, c3\n    o.position.w = dot(i.position, (view_proj_matrix._m03_m13_m23_m33));\n    // mov r0.x, c4.x\n    temp0.x = ref_threshold.x;\n    // add r0.x, -r0.x, c5.x\n    temp0.x = -temp0.x + float1(1);\n    // rcp o2.y, r0.x\n    o.texcoord1.y = 1.0f / temp0.x;\n    // mov o1.xy, v1\n    o.texcoord = i.texcoord;\n    // mov o2.x, c4.x\n    o.texcoord1.x = ref_threshold.x;\n    // \n\n    return o;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."),(0,o.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D diffuse_texture : register(ps_3_0, s0);\nfloat ref_disable_tone_mapping : register(ps_3_0, c2);\nfloat ref_middle_grey : register(ps_3_0, c1);\nfloat ref_white_luminance : register(ps_3_0, c0);\nsampler2D self_illumination_texture : register(ps_3_0, s1);\nstruct PixelMain_Input\n{\n    float2 texcoord : TEXCOORD;\n    float texcoord1 : TEXCOORD1;\n};\n\nfloat4 PixelMain(PixelMain_Input i) : COLOR\n{\n    float4 out_color;\n    float4 temp0, temp1;\n    float3 temp2, temp3;\n    // def c3, 0, 0.001, 1, 0.45454547\n    // def c4, 0.27, 0.67, 0.06, 0\n    // dcl_texcoord v0.xy\n    // dcl_texcoord1 v1.x\n    // dcl_2d s0\n    // dcl_2d s1\n    // rcp r0.x, c0.x\n    temp0.x = 1.0f / ref_white_luminance.x;\n    // texld r1, c3.x, s1\n    temp1 = tex2D(self_illumination_texture, float4(0, 0, 0, 0).xy);\n    // add r0.y, r1.x, c3.y\n    temp0.y = temp1.x + float1(0.001);\n    // rcp r0.y, r0.y\n    temp0.y = 1.0f / temp0.y;\n    // mul r0.y, r0.y, c1.x\n    temp0.y = temp0.y * ref_middle_grey.x;\n    // texld r1, v0, s0\n    temp1 = tex2D(diffuse_texture, i.texcoord.xy);\n    // mul r2.xyz, r0.y, r1\n    temp2.xyz = temp0.yyy * temp1.xyz;\n    // mad r0.yzw, r1.xxyz, r0.y, c3.z\n    temp0.yzw = temp1.xyz * temp0.yyy + float3(1, 1, 1);\n    // mad r3.xyz, r2, r0.x, c3.z\n    temp3.xyz = temp2.xyz * temp0.xxx + float3(1, 1, 1);\n    // mul r2.xyz, r2, r3\n    temp2.xyz = temp2.xyz * temp3.xyz;\n    // rcp r3.x, r0.y\n    temp3.x = 1.0f / temp0.y;\n    // rcp r3.y, r0.z\n    temp3.y = 1.0f / temp0.z;\n    // rcp r3.z, r0.w\n    temp3.z = 1.0f / temp0.w;\n    // mul r0.xyz, r2, r3\n    temp0.xyz = temp2.xyz * temp3.xyz;\n    // dp3 r2.x, r0, c4\n    temp2.x = dot(temp0.xyz, float3(0.27, 0.67, 0.06));\n    // add r2.x, r2.x, -v1.x\n    temp2.x = temp2.x + -i.texcoord1.x;\n    // mov r0.w, c3.z\n    temp0.w = float1(1);\n    // mul_sat r0, r0, r2.x\n    temp0 = saturate(temp0 * temp2.x);\n    // abs r2.x, c2.x\n    temp2.x = abs(ref_disable_tone_mapping.x);\n    // cmp r0, -r2.x, r0, r1\n    temp0 = (-temp2.x >= 0) ? temp0 : temp1;\n    // log r1.x, r0.x\n    temp1.x = log2(temp0.x);\n    // log r1.y, r0.y\n    temp1.y = log2(temp0.y);\n    // log r1.z, r0.z\n    temp1.z = log2(temp0.z);\n    // mov oC0.w, r0.w\n    out_color.w = temp0.w;\n    // mul r0.xyz, r1, c3.w\n    temp0.xyz = temp1.xyz * float3(0.45454547, 0.45454547, 0.45454547);\n    // exp oC0.x, r0.x\n    out_color.x = exp2(temp0.x);\n    // exp oC0.y, r0.y\n    out_color.y = exp2(temp0.y);\n    // exp oC0.z, r0.z\n    out_color.z = exp2(temp0.z);\n    // \n\n    return out_color;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."))}m.isMDXComponent=!0}}]);