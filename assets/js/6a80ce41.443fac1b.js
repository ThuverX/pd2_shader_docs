"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[70731],{603905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>s});var r=n(667294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),l=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):m(m({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(d.Provider,{value:t},e.children)},i="mdxType",x={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},_=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),i=l(n),_=a,s=i["".concat(d,".").concat(_)]||i[_]||x[_]||o;return n?r.createElement(s,m(m({ref:t},c),{},{components:n})):r.createElement(s,m({ref:t},c))}));function s(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,m=new Array(o);m[0]=_;var p={};for(var d in t)hasOwnProperty.call(t,d)&&(p[d]=t[d]);p.originalType=e,p[i]="string"==typeof e?e:a,m[1]=p;for(var l=2;l<o;l++)m[l]=n[l];return r.createElement.apply(null,m)}return r.createElement.apply(null,n)}_.displayName="MDXCreateElement"},685594:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>m,default:()=>x,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=n(487462),a=(n(667294),n(603905));const o={id:0xf3b05a96af41c800,title:"Generic Default Alpha Masked Diffuse Texture Distance Fade 2 Double Sided External Alpha Ref Instanced Vegetation Bending"},m="Generic Default Alpha Masked Diffuse Texture Distance Fade 2 Double Sided External Alpha Ref Instanced Vegetation Bending",p={unversionedId:"Generated/Shaders/Base/[4500-4600]/17559634550349482000",id:"Generated/Shaders/Base/[4500-4600]/17559634550349482000",title:"Generic Default Alpha Masked Diffuse Texture Distance Fade 2 Double Sided External Alpha Ref Instanced Vegetation Bending",description:"(genericALPHAMASKEDDISTANCEFADE2EXTERNALALPHAREFVEGETATIONBENDING, 0xf3b05a96af41c7d4)",source:"@site/docs/Generated/Shaders/Base/[4500-4600]/0xf3b05a96af41c7d4.mdx",sourceDirName:"Generated/Shaders/Base/[4500-4600]",slug:"/Generated/Shaders/Base/[4500-4600]/17559634550349482000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[4500-4600]/17559634550349482000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Base/[4500-4600]/0xf3b05a96af41c7d4.mdx",tags:[],version:"current",frontMatter:{id:"17559634550349482000",title:"Generic Default Alpha Masked Diffuse Texture Distance Fade 2 Double Sided External Alpha Ref Instanced Vegetation Bending"},sidebar:"docsSidebar",previous:{title:"Generic Shadow Caster Cube Environment Mapping Diffuse Texture Rl Environment",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[4500-4600]/17556997773654727000"},next:{title:"Generic Shadow Caster Diffuse Texture Instanced Nvidia Rl Bigprops Vertex Color",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[4500-4600]/17562518531112356000"}},d={},l=[{value:"Technique <code>deferred_ambient_alpha_masked</code>",id:"technique-deferred_ambient_alpha_masked",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],c={toc:l},i="wrapper";function x(e){let{components:t,...n}=e;return(0,a.kt)(i,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"generic-default-alpha-masked-diffuse-texture-distance-fade-2-double-sided-external-alpha-ref-instanced-vegetation-bending"},"Generic Default Alpha Masked Diffuse Texture Distance Fade 2 Double Sided External Alpha Ref Instanced Vegetation Bending"),(0,a.kt)("p",null,"(",(0,a.kt)("inlineCode",{parentName:"p"},"generic:default:ALPHA_MASKED:DIFFUSE_TEXTURE:DISTANCE_FADE_2:DOUBLE_SIDED:EXTERNAL_ALPHA_REF:INSTANCED:VEGETATION_BENDING"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0xf3b05a96af41c7d4"),")"),(0,a.kt)("p",null,"This template is referenced 1 time by ",(0,a.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/base.render_template_database#generic-alpha-masked-diffuse-texture-distance-fade-2-double-sided-external-alpha-ref-instanced-vegetation-bending"},"generic:ALPHA_MASKED:DIFFUSE_TEXTURE:DISTANCE_FADE_2:DOUBLE_SIDED:EXTERNAL_ALPHA_REF:INSTANCED:VEGETATION_BENDING"),".\nThis template uses the following inputs:\n|Name|UI Name|Type|\n|---|---|---|\n|diffuse_texture|Diffuse Texture (UV1)|texture|\n|speed|Speed|scalar|\n|detail_settings|Detail Bending Amplitude / Frequency|vector3|\n|branch_settings|Branch Bending Amplitude / Frequency|vector3|\n|alpha_ref|Alpha Mask Reference|scalar|."),(0,a.kt)("h3",{id:"technique-deferred_ambient_alpha_masked"},"Technique ",(0,a.kt)("inlineCode",{parentName:"h3"},"deferred_ambient_alpha_masked")),(0,a.kt)("h3",{id:"render-states"},"Render States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 1,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 1,\n    D3DRS_COLORWRITEENABLE = 15,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,a.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,a.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,a.kt)("h3",{id:"shaders"},"Shaders"),(0,a.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"float GLOBAL_fov_ratio : register(vs_3_0, c209);\nfloat camera_near_range : register(vs_3_0, c208);\ncolumn_major float4x4 proj_matrix : register(vs_3_0, c204);\nfloat3 ref_branch_settings : register(vs_3_0, c213);\nfloat3 ref_detail_settings : register(vs_3_0, c212);\nfloat ref_speed : register(vs_3_0, c211);\nfloat ref_time : register(vs_3_0, c210);\ncolumn_major float4x4 ref_world_tm[50] : register(vs_3_0, c0);\ncolumn_major float4x4 view_matrix : register(vs_3_0, c200);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 normal : NORMAL;\n    float4 texcoord : TEXCOORD;\n    float4 position1 : POSITION1;\n    float4 color : COLOR;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float2 texcoord1 : TEXCOORD1;\n    float2 texcoord : TEXCOORD;\n    float3 texcoord2 : TEXCOORD2;\n    float3 texcoord5 : TEXCOORD5;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0, temp1, temp2;\n    float addr0;\n    float3 temp3;\n    // def c214, 2, -1, 4, -0\n    // def c215, 1.975, 0.793, 0.375, 0.193\n    // def c216, 2, -0.5, 3, -1625\n    // def c217, 0.0011428571, 0, 0, 0\n    // dcl_position v0\n    // dcl_normal v1\n    // dcl_texcoord v2\n    // dcl_position1 v3\n    // dcl_color v4\n    // dcl_position o0\n    // dcl_texcoord1 o1.xy\n    // dcl_texcoord o2.xy\n    // dcl_texcoord2 o3.xyz\n    // dcl_texcoord5 o4.xyz\n    // add r0.x, c210.x, v4.y\n    temp0.x = ref_time.x + i.color.y;\n    // mul r0.xy, r0.x, c212.y\n    temp0.xy = temp0.x * ref_detail_settings.y;\n    // frc r1.x, v3.x\n    temp1.x = frac(i.position1.x);\n    // add r1.x, -r1.x, v3.x\n    temp1.x = -temp1.x + i.position1.x;\n    // mul r1.x, r1.x, c214.z\n    temp1.x = temp1.x * float1(4);\n    // mova a0.x, r1.x\n    addr0.x = temp1.x;\n    // mov r1.x, c0[a0.x].w\n    temp1.x = (ref_world_tm[0 + (addr0.x / 4)]._m00_m10_m20_m30).w;\n    // mov r1.y, c1[a0.x].w\n    temp1.y = (ref_world_tm[0 + (addr0.x / 4)]._m01_m11_m21_m31).w;\n    // mov r1.z, c2[a0.x].w\n    temp1.z = (ref_world_tm[0 + (addr0.x / 4)]._m02_m12_m22_m32).w;\n    // dp3 r1.x, r1, -c214.y\n    temp1.x = dot(temp1.xyz, float3(1, 1, 1));\n    // add r1.x, r1.x, v4.y\n    temp1.x = temp1.x + i.color.y;\n    // add r1.x, r1.x, c210.x\n    temp1.x = temp1.x + ref_time.x;\n    // mul r0.zw, r1.x, c213.y\n    temp0.zw = temp1.x * ref_branch_settings.y;\n    // mul r0, r0, c211.x\n    temp0 = temp0 * ref_speed.x;\n    // mul r0, r0, c215\n    temp0 = temp0 * float4(1.975, 0.793, 0.375, 0.193);\n    // frc r0, r0\n    temp0 = frac(temp0);\n    // mad r0, r0, c216.x, c216.y\n    temp0 = temp0 * float4(2, 2, 2, 2) + float4(-0.5, -0.5, -0.5, -0.5);\n    // frc r0, r0\n    temp0 = frac(temp0);\n    // mad r0, r0, c214.x, c214.y\n    temp0 = temp0 * float4(2, 2, 2, 2) + float4(-1, -1, -1, -1);\n    // mul r1, r0_abs, r0_abs\n    temp1 = abs(temp0) * abs(temp0);\n    // mad r0, r0_abs, -c216.x, c216.z\n    temp0 = abs(temp0) * float4(-2, -2, -2, -2) + float4(3, 3, 3, 3);\n    // mul r0, r0, r1\n    temp0 = temp0 * temp1;\n    // add r0.xyz, r0.yyww, r0.xxzw\n    temp0.xyz = temp0.yyw + temp0.xxz;\n    // mul r1.z, c213.x, v4.z\n    temp1.z = ref_branch_settings.x * i.color.z;\n    // mul r0.w, v4.z, v4.x\n    temp0.w = i.color.z * i.color.x;\n    // mul r0.w, r0.w, c212.x\n    temp0.w = temp0.w * ref_detail_settings.x;\n    // mad r2.xyz, v1, c214.x, c214.y\n    temp2.xyz = i.normal.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 r3.x, r2, c0[a0.x]\n    temp3.x = dot(temp2.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m00_m10_m20_m30).xyz);\n    // dp3 r3.y, r2, c1[a0.x]\n    temp3.y = dot(temp2.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m01_m11_m21_m31).xyz);\n    // dp3 o3.z, r2, c2[a0.x]\n    o.texcoord2.z = dot(temp2.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m02_m12_m22_m32).xyz);\n    // mul r1.xy, r0.w, r3\n    temp1.xy = temp0.ww * temp3.xy;\n    // mov o3.xy, r3\n    o.texcoord2.xy = temp3.xy;\n    // mad r2, v0.xyzx, -c214.yyyw, -c214.wwwy\n    temp2 = i.position.xyzx * float4(1, 1, 1, 0) + float4(0, 0, 0, 1);\n    // dp4 r3.x, r2, c0[a0.x]\n    temp3.x = dot(temp2, (ref_world_tm[0 + (addr0.x / 4)]._m00_m10_m20_m30));\n    // dp4 r3.y, r2, c1[a0.x]\n    temp3.y = dot(temp2, (ref_world_tm[0 + (addr0.x / 4)]._m01_m11_m21_m31));\n    // dp4 r3.z, r2, c2[a0.x]\n    temp3.z = dot(temp2, (ref_world_tm[0 + (addr0.x / 4)]._m02_m12_m22_m32));\n    // dp4 r2.w, r2, c3[a0.x]\n    temp2.w = dot(temp2, (ref_world_tm[0 + (addr0.x / 4)]._m03_m13_m23_m33));\n    // mad r2.xyz, r0, r1, r3\n    temp2.xyz = temp0.xyz * temp1.xyz + temp3.xyz;\n    // dp4 r0.x, r2, c200\n    temp0.x = dot(temp2, (view_matrix._m00_m10_m20_m30));\n    // dp4 r0.y, r2, c201\n    temp0.y = dot(temp2, (view_matrix._m01_m11_m21_m31));\n    // dp4 r0.z, r2, c202\n    temp0.z = dot(temp2, (view_matrix._m02_m12_m22_m32));\n    // dp4 r0.w, r2, c203\n    temp0.w = dot(temp2, (view_matrix._m03_m13_m23_m33));\n    // mov o4.xyz, r2\n    o.texcoord5 = temp2;\n    // dp4 o0.x, r0, c204\n    o.position.x = dot(temp0, (proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, r0, c205\n    o.position.y = dot(temp0, (proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.w, r0, c207\n    o.position.w = dot(temp0, (proj_matrix._m03_m13_m23_m33));\n    // dp4 r0.x, r0, c206\n    temp0.x = dot(temp0, (proj_matrix._m02_m12_m22_m32));\n    // add r0.y, r0.x, c208.x\n    temp0.y = temp0.x + camera_near_range.x;\n    // mov o0.z, r0.x\n    o.position.z = temp0.x;\n    // rsq r0.x, c209.x\n    temp0.x = 1 / sqrt(GLOBAL_fov_ratio.x);\n    // mad r0.x, r0.y, r0.x, c216.w\n    temp0.x = temp0.y * temp0.x + float1(-1625);\n    // mov o1.x, r0.y\n    o.texcoord1.x = temp0.y;\n    // mul_sat r0.x, r0.x, c217.x\n    temp0.x = saturate(temp0.x * float1(0.0011428571));\n    // add o1.y, -r0.x, -c214.y\n    o.texcoord1.y = -temp0.x + float1(1);\n    // mov o2.xy, v2\n    o.texcoord = i.texcoord;\n    // \n\n    return o;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."),(0,a.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D diffuse_texture : register(ps_3_0, s0);\nfloat ref_alpha_ref : register(ps_3_0, c0);\nstruct PixelMain_Input\n{\n    float2 texcoord1 : TEXCOORD1;\n    float2 texcoord : TEXCOORD;\n    float3 texcoord2 : TEXCOORD2;\n    float4 vpos : vPos;\n    float2 vface : vFace;\n};\n\nstruct PixelMain_Output\n{\n    float4 color1 : COLOR1;\n    float4 color : COLOR;\n    float4 color2 : COLOR2;\n};\n\nPixelMain_Output PixelMain(PixelMain_Input i)\n{\n    PixelMain_Output o;\n    float4 temp0, temp1, temp2;\n    // def c1, 4, 0.25, -4, -0.25\n    // def c2, -0, -1, -2, -3\n    // def c3, 1, -1, 0, 0.5\n    // def c4, 0.4, 0, 0, 0\n    // def c5, 0.05882353, 0.7647059, 0.23529412, 0.9411765\n    // def c6, 0.5294118, 0.29411766, 0.7058824, 0.47058824\n    // def c7, 0.1764706, 0.88235295, 0.11764706, 0.8235294\n    // def c8, 0.64705884, 0.4117647, 0.5882353, 0.3529412\n    // dcl_texcoord1 v0.xy\n    // dcl_texcoord v1.xy\n    // dcl_texcoord2_pp v2.xyz\n    // dcl vPos\n    // dcl vFace.xy\n    // dcl_2d s0\n    // cmp r0, vFace.yyxx, c1.xyxy, c1.zwzw\n    temp0 = (vFace.yyxx >= 0) ? float4(4, 0.25, 4, 0.25) : float4(-4, -0.25, -4, -0.25);\n    // mul r0.yw, r0.xwzy, vFace.xxzy\n    temp0.yw = temp0.wy * vFace.xy;\n    // frc r0.yw, r0\n    temp0.yw = frac(temp0.yw);\n    // mul r0.xy, r0.ywzw, r0.zxzw\n    temp0.xy = temp0.yw * temp0.zx;\n    // frc r0.zw, r0.xyxy\n    temp0.zw = frac(temp0.xy);\n    // add r0.xy, r0, -r0.zwzw\n    temp0.xy = temp0.xy + -temp0.zw;\n    // add r1, r0.y, c2\n    temp1 = temp0.y + float4(-0, -1, -2, -3);\n    // add r0, r0.x, c2\n    temp0 = temp0.x + float4(-0, -1, -2, -3);\n    // cmp r0, -r0_abs, c3.x, c3.z\n    temp0 = (-abs(temp0) >= 0) ? float4(1, 1, 1, 1) : float4(0, 0, 0, 0);\n    // cmp r1, -r1_abs, c3.x, c3.z\n    temp1 = (-abs(temp1) >= 0) ? float4(1, 1, 1, 1) : float4(0, 0, 0, 0);\n    // dp4 r2.x, c5, r0\n    temp2.x = dot(float4(0.05882353, 0.7647059, 0.23529412, 0.9411765), temp0);\n    // dp4 r2.y, c6, r0\n    temp2.y = dot(float4(0.5294118, 0.29411766, 0.7058824, 0.47058824), temp0);\n    // dp4 r2.z, c7, r0\n    temp2.z = dot(float4(0.1764706, 0.88235295, 0.11764706, 0.8235294), temp0);\n    // dp4 r2.w, c8, r0\n    temp2.w = dot(float4(0.64705884, 0.4117647, 0.5882353, 0.3529412), temp0);\n    // dp4 r0.x, r2, r1\n    temp0.x = dot(temp2, temp1);\n    // mul r0.x, r0.x, c0.x\n    temp0.x = temp0.x * ref_alpha_ref.x;\n    // texld_pp r1, v1, s0\n    temp1 = /* not implemented _pp modifier */ tex2D(diffuse_texture, i.texcoord.xy);\n    // mad r0.x, r1.w, v0.y, -r0.x\n    temp0.x = temp1.w * i.texcoord1.y + -temp0.x;\n    // cmp r0, r0.x, c3.x, c3.y\n    temp0 = (temp0.x >= 0) ? float4(1, 1, 1, 1) : float4(-1, -1, -1, -1);\n    // texkill r0\n    clip(temp0);\n    // cmp r0.x, vPos, c3.x, c3.y\n    temp0.x = (vPos.x >= 0) ? float1(1) : float1(-1);\n    // cmp_pp r0.xyz, -r0.x, v2, -v2\n    temp0.xyz = /* not implemented _pp modifier */ (-temp0.xxx >= 0) ? i.texcoord2.xyz : -i.texcoord2.xyz;\n    // nrm_pp r2.xyz, r0\n    temp2.xyz = /* not implemented _pp modifier */ normalize(temp0.xyz).xyz;\n    // mad_pp oC1.xyz, r2, c3.w, c3.w\n    o.color1.xyz = /* not implemented _pp modifier */ temp2.xyz * float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5);\n    // mov_pp oC0.xyz, r1\n    o.color.xyz = /* not implemented _pp modifier */ temp1.xyz;\n    // mov_pp oC1.w, r1.w\n    o.color1.w = /* not implemented _pp modifier */ temp1.w;\n    // mov oC0.w, c4.x\n    o.color.w = float1(0.4);\n    // mov oC2, v0.x\n    o.color2 = i.texcoord1.x;\n    // \n\n    return o;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."))}x.isMDXComponent=!0}}]);