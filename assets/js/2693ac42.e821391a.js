"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[1902],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>u});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=n.createContext({}),m=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=m(e.components);return n.createElement(d.Provider,{value:t},e.children)},i="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},x=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),i=m(r),x=a,u=i["".concat(d,".").concat(x)]||i[x]||s[x]||o;return r?n.createElement(u,l(l({ref:t},c),{},{components:r})):n.createElement(u,l({ref:t},c))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=x;var p={};for(var d in t)hasOwnProperty.call(t,d)&&(p[d]=t[d]);p.originalType=e,p[i]="string"==typeof e?e:a,l[1]=p;for(var m=2;m<o;m++)l[m]=r[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}x.displayName="MDXCreateElement"},1565:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>s,frontMatter:()=>o,metadata:()=>p,toc:()=>m});var n=r(7462),a=(r(7294),r(3905));const o={id:0xa5e2666d20878000,title:"Vertex Color Textured Radial"},l="Vertex Color Textured Radial",p={unversionedId:"Generated/Shaders/Default Shaders/11953228979877937000",id:"Generated/Shaders/Default Shaders/11953228979877937000",title:"Vertex Color Textured Radial",description:"(VertexColorTexturedRadial, 0xa5e2666d20877ed5)",source:"@site/docs/Generated/Shaders/Default Shaders/0xa5e2666d20877ed5.mdx",sourceDirName:"Generated/Shaders/Default Shaders",slug:"/Generated/Shaders/Default Shaders/11953228979877937000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Default Shaders/11953228979877937000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Default Shaders/0xa5e2666d20877ed5.mdx",tags:[],version:"current",frontMatter:{id:"11953228979877937000",title:"Vertex Color Textured Radial"},sidebar:"docsSidebar",previous:{title:"Vertex Color Textured Patterns",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Default Shaders/11571862290668407000"},next:{title:"0xad5f0e0db28cc558",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Default Shaders/12492719343341980000"}},d={},m=[{value:"Technique <code>transparent</code>",id:"technique-transparent",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],c={toc:m},i="wrapper";function s(e){let{components:t,...r}=e;return(0,a.kt)(i,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"vertex-color-textured-radial"},"Vertex Color Textured Radial"),(0,a.kt)("p",null,"(",(0,a.kt)("inlineCode",{parentName:"p"},"VertexColorTexturedRadial"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0xa5e2666d20877ed5"),")"),(0,a.kt)("p",null,"This template is referenced 1 time by ",(0,a.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/default_render_templates.render_template_database#vertexcolortexturedradial"},"VertexColorTexturedRadial"),"."),(0,a.kt)("h3",{id:"technique-transparent"},"Technique ",(0,a.kt)("inlineCode",{parentName:"h3"},"transparent")),(0,a.kt)("h3",{id:"render-states"},"Render States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 1,\n    D3DRS_CULLMODE = 1,\n    D3DRS_COLORWRITEENABLE = 7,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n    D3DRS_BLENDOP = 1,\n    D3DRS_DESTBLEND = 6,\n    D3DRS_SRCBLEND = 5,\n};\n")),(0,a.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,a.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,a.kt)("h3",{id:"shaders"},"Shaders"),(0,a.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n    float4 color : COLOR;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float2 texcoord : TEXCOORD;\n    float4 color : COLOR;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    // def c4, -1, 1, 0, 0\n    // dcl_position v0\n    // dcl_texcoord v1\n    // dcl_color v2\n    // dcl_position o0\n    // dcl_texcoord o1.xy\n    // dcl_color o2\n    // dp4 o0.x, v0, c0\n    o.position.x = dot(i.position, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, v0, c1\n    o.position.y = dot(i.position, (view_proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.z, v0, c2\n    o.position.z = dot(i.position, (view_proj_matrix._m02_m12_m22_m32));\n    // dp4 o0.w, v0, c3\n    o.position.w = dot(i.position, (view_proj_matrix._m03_m13_m23_m33));\n    // mov o1.xy, v1\n    o.texcoord = i.texcoord;\n    // mov o2.xw, v2\n    o.color.xw = i.color.xw;\n    // mad o2.yz, v1.xxyw, c4.xxyw, c4\n    o.color.yz = i.texcoord.xy * float2(-1, 1) + float2(1, 0);\n    // \n\n    return o;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."),(0,a.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D diffuse_texture : register(ps_3_0, s0);\nstruct PixelMain_Input\n{\n    float2 texcoord : TEXCOORD;\n    float4 color : COLOR;\n};\n\nfloat4 PixelMain(PixelMain_Input i) : COLOR\n{\n    float4 out_color;\n    float4 temp0, temp1;\n    // def c0, -0.5, 0.0208351, -0.085133, 0.180141\n    // def c1, -0.3302995, 0.999866, 0, 1\n    // def c2, -2, 1.5707964, -0, -3.1415927\n    // def c3, 3.14159, 0.15786885, 360, 0\n    // dcl_texcoord v0.xy\n    // dcl_color v1\n    // dcl_2d s0\n    // add r0.xy, c0.x, v1.zyzw\n    temp0.xy = float2(-0.5, -0.5) + i.color.zy;\n    // add r0.zw, -r0_abs.xyxy, r0_abs.xyyx\n    temp0.zw = -abs(temp0).xy + abs(temp0).yx;\n    // cmp r1.xy, r0.z, r0_abs, r0_abs.yxzw\n    temp1.xy = (temp0.zz >= 0) ? abs(temp0).xy : abs(temp0).yx;\n    // cmp r0.z, r0.w, c1.z, c1.w\n    temp0.z = (temp0.w >= 0) ? float1(0) : float1(1);\n    // rcp r0.w, r1.y\n    temp0.w = 1.0f / temp1.y;\n    // mul r0.w, r0.w, r1.x\n    temp0.w = temp0.w * temp1.x;\n    // mul r1.x, r0.w, r0.w\n    temp1.x = temp0.w * temp0.w;\n    // mad r1.y, r1.x, c0.y, c0.z\n    temp1.y = temp1.x * float1(0.0208351) + float1(-0.085133);\n    // mad r1.y, r1.x, r1.y, c0.w\n    temp1.y = temp1.x * temp1.y + float1(0.180141);\n    // mad r1.y, r1.x, r1.y, c1.x\n    temp1.y = temp1.x * temp1.y + float1(-0.3302995);\n    // mad r1.x, r1.x, r1.y, c1.y\n    temp1.x = temp1.x * temp1.y + float1(0.999866);\n    // mul r0.w, r0.w, r1.x\n    temp0.w = temp0.w * temp1.x;\n    // mad r1.x, r0.w, c2.x, c2.y\n    temp1.x = temp0.w * float1(-2) + float1(1.5707964);\n    // mad r0.z, r1.x, r0.z, r0.w\n    temp0.z = temp1.x * temp0.z + temp0.w;\n    // cmp r0.w, r0.x, c2.z, c2.w\n    temp0.w = (temp0.x >= 0) ? float1(-0) : float1(-3.1415927);\n    // add r0.z, r0.w, r0.z\n    temp0.z = temp0.w + temp0.z;\n    // add r0.w, r0.z, r0.z\n    temp0.w = temp0.z + temp0.z;\n    // add r1.x, -r0.x, r0.y\n    temp1.x = -temp0.x + temp0.y;\n    // cmp r0.xy, r1.x, r0, r0.yxzw\n    temp0.xy = (temp1.xx >= 0) ? temp0.xy : temp0.yx;\n    // cmp r0.y, r0.y, c1.w, c1.z\n    temp0.y = (temp0.y >= 0) ? float1(1) : float1(0);\n    // cmp r0.x, r0.x, c1.z, r0.y\n    temp0.x = (temp0.x >= 0) ? float1(0) : temp0.y;\n    // mad r0.x, r0.x, -r0.w, r0.z\n    temp0.x = temp0.x * -temp0.w + temp0.z;\n    // add r0.x, r0.x, c3.x\n    temp0.x = temp0.x + float1(3.14159);\n    // mad r0.x, r0.x, -c3.y, v1.x\n    temp0.x = temp0.x * float1(-0.15786885) + i.color.x;\n    // mul_sat r0.x, r0.x, c3.z\n    temp0.x = saturate(temp0.x * float1(360));\n    // texld r1, v0, s0\n    temp1 = tex2D(diffuse_texture, i.texcoord.xy);\n    // mul r0.y, r1.w, v1.w\n    temp0.y = temp1.w * i.color.w;\n    // mov oC0.xyz, r1\n    out_color.xyz = temp1.xyz;\n    // mul oC0.w, r0.x, r0.y\n    out_color.w = temp0.x * temp0.y;\n    // \n\n    return out_color;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."))}s.isMDXComponent=!0}}]);