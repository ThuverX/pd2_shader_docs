"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[949],{603905:(e,t,r)=>{r.d(t,{Zo:()=>i,kt:()=>u});var n=r(667294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=n.createContext({}),s=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},i=function(e){var t=s(e.components);return n.createElement(d.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},D=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),m=s(r),D=a,u=m["".concat(d,".").concat(D)]||m[D]||c[D]||o;return r?n.createElement(u,p(p({ref:t},i),{},{components:r})):n.createElement(u,p({ref:t},i))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,p=new Array(o);p[0]=D;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[m]="string"==typeof e?e:a,p[1]=l;for(var s=2;s<o;s++)p[s]=r[s];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}D.displayName="MDXCreateElement"},978071:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(487462),a=(r(667294),r(603905));const o={id:0xe66e11ddaaea5800,title:"Post Lex Prepare Default"},p="Post Lex Prepare Default",l={unversionedId:"Generated/Shaders/Post/16604228519914527000",id:"Generated/Shaders/Post/16604228519914527000",title:"Post Lex Prepare Default",description:"(postLEXprepare:default, 0xe66e11ddaaea55d9)",source:"@site/docs/Generated/Shaders/Post/0xe66e11ddaaea55d9.mdx",sourceDirName:"Generated/Shaders/Post",slug:"/Generated/Shaders/Post/16604228519914527000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Post/16604228519914527000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Post/0xe66e11ddaaea55d9.mdx",tags:[],version:"current",frontMatter:{id:"16604228519914527000",title:"Post Lex Prepare Default"},sidebar:"docsSidebar",previous:{title:"Post Color Grading Default",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Post/16383909041883238000"},next:{title:"Post Fxaa Default",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Post/16667509001480083000"}},d={},s=[{value:"Technique <code>ambient</code>",id:"technique-ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Sampler 1",id:"sampler-1",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],i={toc:s},m="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},i,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"post-lex-prepare-default"},"Post Lex Prepare Default"),(0,a.kt)("p",null,"(",(0,a.kt)("inlineCode",{parentName:"p"},"post_LEX_prepare:default"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0xe66e11ddaaea55d9"),")"),(0,a.kt)("p",null,"This template is referenced 1 time by ",(0,a.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/post.render_template_database#post-lex-prepare"},"post_LEX_prepare"),"."),(0,a.kt)("h3",{id:"technique-ambient"},"Technique ",(0,a.kt)("inlineCode",{parentName:"h3"},"ambient")),(0,a.kt)("h3",{id:"render-states"},"Render States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 0,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 1,\n    D3DRS_COLORWRITEENABLE = 15,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,a.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,a.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 2,\n    D3DSAMP_MINFILTER = 2,\n    D3DSAMP_MIPFILTER = 2,\n};\n")),(0,a.kt)("h4",{id:"sampler-1"},"Sampler 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 2,\n    D3DSAMP_MINFILTER = 2,\n    D3DSAMP_MIPFILTER = 2,\n};\n")),(0,a.kt)("h3",{id:"shaders"},"Shaders"),(0,a.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"float3 render_target_size : register(vs_3_0, c4);\ncolumn_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0;\n    // def c5, 0.5, -0.5, 1, 0\n    // dcl_position v0\n    // dcl_texcoord v1\n    // dcl_position o0\n    // dcl_texcoord o1\n    // dp4 o0.x, v0, c0\n    o.position.x = dot(i.position, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, v0, c1\n    o.position.y = dot(i.position, (view_proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.w, v0, c3\n    o.position.w = dot(i.position, (view_proj_matrix._m03_m13_m23_m33));\n    // rcp r0.xz, c4.x\n    temp0.xz = 1.0f / render_target_size.x;\n    // rcp r0.yw, c4.y\n    temp0.yw = 1.0f / render_target_size.y;\n    // mad o1, r0, c5.xyyx, v1.xyxy\n    o.texcoord = temp0 * float4(0.5, -0.5, -0.5, 0.5) + i.texcoord.xyxy;\n    // mov o0.z, c5.z\n    o.position.z = float1(1);\n    // \n\n    return o;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."),(0,a.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D diffuse_texture : register(ps_3_0, s0);\nsampler2D self_illumination_texture : register(ps_3_0, s1);\nfloat4 PixelMain(float4 texcoord : TEXCOORD) : COLOR\n{\n    float4 out_color;\n    float4 temp0, temp1, temp2;\n    float temp3;\n    // def c0, 0.25, 0.001, 0, 0\n    // dcl_texcoord v0\n    // dcl_2d s0\n    // dcl_2d s1\n    // texld r0, v0, s1\n    temp0 = tex2D(self_illumination_texture, texcoord.xy);\n    // texld r1, v0.zyzw, s1\n    temp1 = tex2D(self_illumination_texture, texcoord.zy);\n    // add r0, r0.xyzz, r1.xyzz\n    temp0 = temp0.xyzz + temp1.xyzz;\n    // texld r1, v0.xwzw, s1\n    temp1 = tex2D(self_illumination_texture, texcoord.xw);\n    // add r0, r0, r1.xyzz\n    temp0 = temp0 + temp1.xyzz;\n    // texld r1, v0.zwzw, s1\n    temp1 = tex2D(self_illumination_texture, texcoord.zw);\n    // add r0, r0, r1.xyzz\n    temp0 = temp0 + temp1.xyzz;\n    // mul r0, r0, c0.x\n    temp0 = temp0 * float4(0.25, 0.25, 0.25, 0.25);\n    // texld r1, v0, s0\n    temp1 = tex2D(diffuse_texture, texcoord.xy);\n    // texld r2, v0.zyzw, s0\n    temp2 = tex2D(diffuse_texture, texcoord.zy);\n    // add r1, r1, r2\n    temp1 = temp1 + temp2;\n    // texld r2, v0.xwzw, s0\n    temp2 = tex2D(diffuse_texture, texcoord.xw);\n    // add r1, r1, r2\n    temp1 = temp1 + temp2;\n    // texld r2, v0.zwzw, s0\n    temp2 = tex2D(diffuse_texture, texcoord.zw);\n    // add r1, r1, r2\n    temp1 = temp1 + temp2;\n    // mad r2, r1.xyzz, c0.x, c0.y\n    temp2 = temp1.xyzz * float4(0.25, 0.25, 0.25, 0.25) + float4(0.001, 0.001, 0.001, 0.001);\n    // mul r1.x, r1.w, c0.x\n    temp1.x = temp1.w * float1(0.25);\n    // max r1.y, r2.y, r2.w\n    temp1.y = max(temp2.y, temp2.w);\n    // max r3.x, r2.x, r1.y\n    temp3.x = max(temp2.x, temp1.y);\n    // rcp r1.y, r3.x\n    temp1.y = 1.0f / temp3.x;\n    // mul r2, r1.y, r2\n    temp2 = temp1.y * temp2;\n    // mad oC0, r2, r1.x, r0\n    out_color = temp2 * temp1.x + temp0;\n    // \n\n    return out_color;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."))}c.isMDXComponent=!0}}]);