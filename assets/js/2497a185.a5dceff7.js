"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[31833],{603905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var n=r(667294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var d=n.createContext({}),i=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=i(e.components);return n.createElement(d.Provider,{value:t},e.children)},_="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,d=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),_=i(r),f=o,m=_["".concat(d,".").concat(f)]||_[f]||c[f]||s;return r?n.createElement(m,a(a({ref:t},l),{},{components:r})):n.createElement(m,a({ref:t},l))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=f;var p={};for(var d in t)hasOwnProperty.call(t,d)&&(p[d]=t[d]);p.originalType=e,p[_]="string"==typeof e?e:o,a[1]=p;for(var i=2;i<s;i++)a[i]=r[i];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},429721:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>p,toc:()=>i});var n=r(487462),o=(r(667294),r(603905));const s={id:0x58d66dabe39b1000,title:"Effect Default Blend Add Diffuse0 Texture Diffuse0 Threshold Sweep Diffuse0 Uvanim"},a="Effect Default Blend Add Diffuse0 Texture Diffuse0 Threshold Sweep Diffuse0 Uvanim",p={unversionedId:"Generated/Shaders/Base/[1600-1700]/6401424505379164000",id:"Generated/Shaders/Base/[1600-1700]/6401424505379164000",title:"Effect Default Blend Add Diffuse0 Texture Diffuse0 Threshold Sweep Diffuse0 Uvanim",description:"(effectBLENDADDDIFFUSE0THRESHOLDSWEEP:DIFFUSE0_UVANIM, 0x58d66dabe39b0e9c)",source:"@site/docs/Generated/Shaders/Base/[1600-1700]/0x58d66dabe39b0e9c.mdx",sourceDirName:"Generated/Shaders/Base/[1600-1700]",slug:"/Generated/Shaders/Base/[1600-1700]/6401424505379164000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[1600-1700]/6401424505379164000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Base/[1600-1700]/0x58d66dabe39b0e9c.mdx",tags:[],version:"current",frontMatter:{id:"6401424505379164000",title:"Effect Default Blend Add Diffuse0 Texture Diffuse0 Threshold Sweep Diffuse0 Uvanim"},sidebar:"docsSidebar",previous:{title:"Generic Default Blend Diffuse Blend Normal Cube Environment Mapping Diffuse Texture Gsma Texture Normalmap Vertex Color",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[1600-1700]/6401345549587780000"},next:{title:"Generic Shadow Caster Diffuse Texture Distance Fade 3 Instanced Normalmap Nvidia",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[1600-1700]/6405676558711438000"}},d={},i=[{value:"Technique <code>transparent</code>",id:"technique-transparent",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],l={toc:i},_="wrapper";function c(e){let{components:t,...r}=e;return(0,o.kt)(_,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"effect-default-blend-add-diffuse0-texture-diffuse0-threshold-sweep-diffuse0-uvanim"},"Effect Default Blend Add Diffuse0 Texture Diffuse0 Threshold Sweep Diffuse0 Uvanim"),(0,o.kt)("p",null,"(",(0,o.kt)("inlineCode",{parentName:"p"},"effect:default:BLEND_ADD:DIFFUSE0_TEXTURE:DIFFUSE0_THRESHOLD_SWEEP:DIFFUSE0_UVANIM"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"0x58d66dabe39b0e9c"),")"),(0,o.kt)("p",null,"This template is referenced 1 time by ",(0,o.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/base.render_template_database#effect-blend-add-diffuse0-texture-diffuse0-threshold-sweep-diffuse0-uvanim"},"effect:BLEND_ADD:DIFFUSE0_TEXTURE:DIFFUSE0_THRESHOLD_SWEEP:DIFFUSE0_UVANIM"),".\nThis template uses the following inputs:\n|Name|UI Name|Type|\n|---|---|---|\n|diffuse_texture|Diffuse0 Texture|texture|\n|threshold_sweep_color_s|Threshold Sweep Color Start|vector3|\n|threshold_sweep_color_e|Threshold Sweep Color End|vector3|\n|threshold_sweep_op_s|Threshold Sweep Opacity Start|scalar|\n|threshold_sweep_op_e|Threshold Sweep Opacity End|scalar|\n|threshold_sweep_fuzziness_s|Threshold Sweep Fuzziness Start|scalar|\n|threshold_sweep_fuzziness_e|Threshold Sweep Fuzziness End|scalar|\n|threshold_sweep_speed|Threshold Sweep Speed|scalar|\n|threshold_sweep_time_exp|Threshold Sweep Fuzziness Time Exponent|scalar|\n|uv0_speed|Diffuse0 UV Speed|vector3|\n|intensity|Intensity|scalar|."),(0,o.kt)("h3",{id:"technique-transparent"},"Technique ",(0,o.kt)("inlineCode",{parentName:"h3"},"transparent")),(0,o.kt)("h3",{id:"render-states"},"Render States"),(0,o.kt)("p",null,"More info can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 1,\n    D3DRS_CULLMODE = 2,\n    D3DRS_COLORWRITEENABLE = 7,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n    D3DRS_BLENDOP = 1,\n    D3DRS_DESTBLEND = 2,\n    D3DRS_SRCBLEND = 5,\n};\n")),(0,o.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,o.kt)("p",null,"More info can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,o.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,o.kt)("h3",{id:"shaders"},"Shaders"),(0,o.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"float ref_threshold_sweep_speed : register(vs_3_0, c5);\nfloat ref_threshold_sweep_time_exp : register(vs_3_0, c6);\nfloat ref_time : register(vs_3_0, c4);\nfloat3 ref_uv0_speed : register(vs_3_0, c7);\ncolumn_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float2 texcoord : TEXCOORD;\n    float2 texcoord7 : TEXCOORD7;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float2 temp0;\n    float temp1;\n    // dcl_position v0\n    // dcl_texcoord v1\n    // dcl_position o0\n    // dcl_texcoord o1.xy\n    // dcl_texcoord7 o2.xy\n    // dp4 o0.x, v0, c0\n    o.position.x = dot(i.position, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, v0, c1\n    o.position.y = dot(i.position, (view_proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.z, v0, c2\n    o.position.z = dot(i.position, (view_proj_matrix._m02_m12_m22_m32));\n    // dp4 o0.w, v0, c3\n    o.position.w = dot(i.position, (view_proj_matrix._m03_m13_m23_m33));\n    // mov r0.x, c4.x\n    temp0.x = ref_time.x;\n    // mad o1.xy, c7, r0.x, v1\n    o.texcoord = ref_uv0_speed * temp0.x + i.texcoord;\n    // mul r0.x, r0.x, c5.x\n    temp0.x = temp0.x * ref_threshold_sweep_speed.x;\n    // frc r0.y, r0_abs.x\n    temp0.y = frac(abs(temp0).x);\n    // sge r0.x, r0.x, -r0.x\n    temp0.x = (temp0.x >= -temp0.x) ? 1 : 0;\n    // lrp r1.x, r0.x, r0.y, -r0.y\n    temp1.x = lerp(-temp0.y, temp0.y, temp0.x);\n    // log r0.x, r1.x\n    temp0.x = log2(temp1.x);\n    // mov o2.x, r1.x\n    o.texcoord7.x = temp1.x;\n    // mul r0.x, r0.x, c6.x\n    temp0.x = temp0.x * ref_threshold_sweep_time_exp.x;\n    // exp o2.y, r0.x\n    o.texcoord7.y = exp2(temp0.x);\n    // \n\n    return o;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."),(0,o.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D diffuse_texture : register(ps_3_0, s0);\nfloat ref_intensity : register(ps_3_0, c6);\nfloat3 ref_threshold_sweep_color_e : register(ps_3_0, c1);\nfloat3 ref_threshold_sweep_color_s : register(ps_3_0, c0);\nfloat ref_threshold_sweep_fuzziness_e : register(ps_3_0, c5);\nfloat ref_threshold_sweep_fuzziness_s : register(ps_3_0, c4);\nfloat ref_threshold_sweep_op_e : register(ps_3_0, c3);\nfloat ref_threshold_sweep_op_s : register(ps_3_0, c2);\nstruct PixelMain_Input\n{\n    float2 texcoord : TEXCOORD;\n    float2 texcoord7 : TEXCOORD7;\n};\n\nfloat4 PixelMain(PixelMain_Input i) : COLOR\n{\n    float4 out_color;\n    float4 temp0, temp1, temp2;\n    // def c7, 1, 0, 0, 0\n    // dcl_texcoord v0.xy\n    // dcl_texcoord7 v1.xy\n    // dcl_2d s0\n    // mov r0.xyz, c0\n    temp0.xyz = ref_threshold_sweep_color_s.xyz;\n    // add r1.xyz, -r0, c1\n    temp1.xyz = -temp0.xyz + ref_threshold_sweep_color_e.xyz;\n    // mov r0.w, c2.x\n    temp0.w = ref_threshold_sweep_op_s.x;\n    // add r1.w, -r0.w, c3.x\n    temp1.w = -temp0.w + ref_threshold_sweep_op_e.x;\n    // mad_pp r0, v1.x, r1, r0\n    temp0 = /* not implemented _pp modifier */ i.texcoord7.x * temp1 + temp0;\n    // mov r1.x, c4.x\n    temp1.x = ref_threshold_sweep_fuzziness_s.x;\n    // add r1.x, -r1.x, c5.x\n    temp1.x = -temp1.x + ref_threshold_sweep_fuzziness_e.x;\n    // mad_pp r1.x, v1.y, r1.x, c4.x\n    temp1.x = /* not implemented _pp modifier */ i.texcoord7.y * temp1.x + ref_threshold_sweep_fuzziness_s.x;\n    // rcp r1.y, r1.x\n    temp1.y = 1.0f / temp1.x;\n    // texld_pp r2, v0, s0\n    temp2 = /* not implemented _pp modifier */ tex2D(diffuse_texture, i.texcoord.xy);\n    // add r1.z, r2.y, -v1.x\n    temp1.z = temp2.y + -i.texcoord7.x;\n    // mad r1.y, r1_abs.z, -r1.y, c7.x\n    temp1.y = abs(temp1).z * -temp1.y + float1(1);\n    // add r1.x, -r1.x, r1_abs.z\n    temp1.x = -temp1.x + abs(temp1).z;\n    // mul_pp r0.w, r0.w, r1.y\n    temp0.w = /* not implemented _pp modifier */ temp0.w * temp1.y;\n    // mul oC0.xyz, r0, c6.x\n    out_color.xyz = temp0.xyz * ref_intensity.xxx;\n    // cmp_pp oC0.w, r1.x, c7.y, r0.w\n    out_color.w = /* not implemented _pp modifier */ (temp1.x >= 0) ? float1(0) : temp0.w;\n    // \n\n    return out_color;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."))}c.isMDXComponent=!0}}]);