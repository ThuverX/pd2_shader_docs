"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[94587],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>s});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):m(m({},t),e)),n},i=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},_="mdxType",x={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,i=d(e,["components","mdxType","originalType","parentName"]),_=l(n),c=a,s=_["".concat(p,".").concat(c)]||_[c]||x[c]||o;return n?r.createElement(s,m(m({ref:t},i),{},{components:n})):r.createElement(s,m({ref:t},i))}));function s(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,m=new Array(o);m[0]=c;var d={};for(var p in t)hasOwnProperty.call(t,p)&&(d[p]=t[p]);d.originalType=e,d[_]="string"==typeof e?e:a,m[1]=d;for(var l=2;l<o;l++)m[l]=n[l];return r.createElement.apply(null,m)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},36370:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>m,default:()=>x,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={id:0x73fe88a157794c00,title:"Effect Default Blend Add Diffuse0 Texture Diffuse0 Tint Diffuse0 Uvanim Instanced View Angle Falloff Op"},m="Effect Default Blend Add Diffuse0 Texture Diffuse0 Tint Diffuse0 Uvanim Instanced View Angle Falloff Op",d={unversionedId:"Generated/Shaders/Base/[2100-2200]/8358268184984899000",id:"Generated/Shaders/Base/[2100-2200]/8358268184984899000",title:"Effect Default Blend Add Diffuse0 Texture Diffuse0 Tint Diffuse0 Uvanim Instanced View Angle Falloff Op",description:"(effectBLENDADDDIFFUSE0TINTINSTANCED:VIEWANGLEFALLOFF_OP, 0x73fe88a157794a3a)",source:"@site/docs/Generated/Shaders/Base/[2100-2200]/0x73fe88a157794a3a.mdx",sourceDirName:"Generated/Shaders/Base/[2100-2200]",slug:"/Generated/Shaders/Base/[2100-2200]/8358268184984899000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[2100-2200]/8358268184984899000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/docs/Generated/Shaders/Base/[2100-2200]/0x73fe88a157794a3a.mdx",tags:[],version:"current",frontMatter:{id:"8358268184984899000",title:"Effect Default Blend Add Diffuse0 Texture Diffuse0 Tint Diffuse0 Uvanim Instanced View Angle Falloff Op"},sidebar:"docsSidebar",previous:{title:"Generic Default Contour Diffuse Texture Global Environment Mapping Rl Players Vertex Color Vertex Color Alpha Vertex Color Character",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[2100-2200]/8354493932243964000"},next:{title:"Generic Default Alpha Masked Diffuse Texture Double Sided External Alpha Ref Global Environment Mapping Gloss Blurs Cubemap Gsma Alpha Masking Gsma Texture Normalmap Rl Civilians Skinned 3weights",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[2100-2200]/8364345903632934000"}},p={},l=[{value:"Technique <code>transparent</code>",id:"technique-transparent",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],i={toc:l},_="wrapper";function x(e){let{components:t,...n}=e;return(0,a.kt)(_,(0,r.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"effect-default-blend-add-diffuse0-texture-diffuse0-tint-diffuse0-uvanim-instanced-view-angle-falloff-op"},"Effect Default Blend Add Diffuse0 Texture Diffuse0 Tint Diffuse0 Uvanim Instanced View Angle Falloff Op"),(0,a.kt)("p",null,"(",(0,a.kt)("inlineCode",{parentName:"p"},"effect:default:BLEND_ADD:DIFFUSE0_TEXTURE:DIFFUSE0_TINT:DIFFUSE0_UVANIM:INSTANCED:VIEW_ANGLE_FALLOFF_OP"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0x73fe88a157794a3a"),")"),(0,a.kt)("h3",{id:"technique-transparent"},"Technique ",(0,a.kt)("inlineCode",{parentName:"h3"},"transparent")),(0,a.kt)("h3",{id:"render-states"},"Render States"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 1,\n    D3DRS_CULLMODE = 2,\n    D3DRS_COLORWRITEENABLE = 7,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n    D3DRS_BLENDOP = 1,\n    D3DRS_DESTBLEND = 2,\n    D3DRS_SRCBLEND = 5,\n};\n")),(0,a.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,a.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,a.kt)("h3",{id:"shaders"},"Shaders"),(0,a.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 camera_world_matrix : register(vs_3_0, c208);\ncolumn_major float4x4 proj_matrix : register(vs_3_0, c204);\nfloat ref_time : register(vs_3_0, c211);\nfloat3 ref_uv0_speed : register(vs_3_0, c212);\ncolumn_major float4x4 ref_world_tm[50] : register(vs_3_0, c0);\ncolumn_major float4x4 view_matrix : register(vs_3_0, c200);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 position1 : POSITION1;\n    float4 normal : NORMAL;\n    float4 texcoord : TEXCOORD;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float3 texcoord3 : TEXCOORD3;\n    float3 texcoord4 : TEXCOORD4;\n    float2 texcoord : TEXCOORD;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0, temp1;\n    float addr0;\n    float3 temp2;\n    // def c213, 2, -1, 4, -0\n    // dcl_position v0\n    // dcl_position1 v1\n    // dcl_normal v2\n    // dcl_texcoord v3\n    // dcl_position o0\n    // dcl_texcoord3 o1.xyz\n    // dcl_texcoord4 o2.xyz\n    // dcl_texcoord o3.xy\n    // frc r0.x, v1.x\n    temp0.x = frac(i.position1.x);\n    // add r0.x, -r0.x, v1.x\n    temp0.x = -temp0.x + i.position1.x;\n    // mul r0.x, r0.x, c213.z\n    temp0.x = temp0.x * float1(4);\n    // mova a0.x, r0.x\n    addr0.x = temp0.x;\n    // mad r0.xyz, v2, c213.x, c213.y\n    temp0.xyz = i.normal.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 o1.x, r0, c0[a0.x]\n    o.texcoord3.x = dot(temp0.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m00_m10_m20_m30).xyz);\n    // dp3 o1.y, r0, c1[a0.x]\n    o.texcoord3.y = dot(temp0.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m01_m11_m21_m31).xyz);\n    // dp3 o1.z, r0, c2[a0.x]\n    o.texcoord3.z = dot(temp0.xyz, (ref_world_tm[0 + (addr0.x / 4)]._m02_m12_m22_m32).xyz);\n    // mad r0, v0.xyzx, -c213.yyyw, -c213.wwwy\n    temp0 = i.position.xyzx * float4(1, 1, 1, 0) + float4(0, 0, 0, 1);\n    // dp4 r1.w, r0, c3[a0.x]\n    temp1.w = dot(temp0, (ref_world_tm[0 + (addr0.x / 4)]._m03_m13_m23_m33));\n    // dp4 r1.x, r0, c0[a0.x]\n    temp1.x = dot(temp0, (ref_world_tm[0 + (addr0.x / 4)]._m00_m10_m20_m30));\n    // dp4 r1.y, r0, c1[a0.x]\n    temp1.y = dot(temp0, (ref_world_tm[0 + (addr0.x / 4)]._m01_m11_m21_m31));\n    // dp4 r1.z, r0, c2[a0.x]\n    temp1.z = dot(temp0, (ref_world_tm[0 + (addr0.x / 4)]._m02_m12_m22_m32));\n    // dp4 r0.x, r1, c200\n    temp0.x = dot(temp1, (view_matrix._m00_m10_m20_m30));\n    // dp4 r0.y, r1, c201\n    temp0.y = dot(temp1, (view_matrix._m01_m11_m21_m31));\n    // dp4 r0.z, r1, c202\n    temp0.z = dot(temp1, (view_matrix._m02_m12_m22_m32));\n    // dp4 r0.w, r1, c203\n    temp0.w = dot(temp1, (view_matrix._m03_m13_m23_m33));\n    // add r2.x, -r1.x, c208.w\n    temp2.x = -temp1.x + (camera_world_matrix._m00_m10_m20_m30).w;\n    // add r2.y, -r1.y, c209.w\n    temp2.y = -temp1.y + (camera_world_matrix._m01_m11_m21_m31).w;\n    // add r2.z, -r1.z, c210.w\n    temp2.z = -temp1.z + (camera_world_matrix._m02_m12_m22_m32).w;\n    // dp4 o0.x, r0, c204\n    o.position.x = dot(temp0, (proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, r0, c205\n    o.position.y = dot(temp0, (proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.z, r0, c206\n    o.position.z = dot(temp0, (proj_matrix._m02_m12_m22_m32));\n    // dp4 o0.w, r0, c207\n    o.position.w = dot(temp0, (proj_matrix._m03_m13_m23_m33));\n    // dp3 r0.x, r2, r2\n    temp0.x = dot(temp2.xyz, temp2.xyz);\n    // rsq r0.x, r0.x\n    temp0.x = 1 / sqrt(temp0.x);\n    // mul o2.xyz, r0.x, r2\n    o.texcoord4 = temp0.x * temp2;\n    // mov r0.xy, c212\n    temp0.xy = ref_uv0_speed.xy;\n    // mad o3.xy, r0, c211.x, v3\n    o.texcoord = temp0 * ref_time.x + i.texcoord;\n    // \n\n    return o;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."),(0,a.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D diffuse_texture : register(ps_3_0, s0);\nfloat ref_falloff_exp : register(ps_3_0, c0);\nfloat ref_intensity : register(ps_3_0, c2);\nfloat3 ref_tint_diffuse0_color : register(ps_3_0, c1);\nstruct PixelMain_Input\n{\n    float3 texcoord3 : TEXCOORD3;\n    float3 texcoord4 : TEXCOORD4;\n    float2 texcoord : TEXCOORD;\n};\n\nfloat4 PixelMain(PixelMain_Input i) : COLOR\n{\n    float4 out_color;\n    float3 temp0;\n    float4 temp1;\n    // def c3, -0.0001, -13.287712, 0, 0\n    // dcl_texcoord3 v0.xyz\n    // dcl_texcoord4 v1.xyz\n    // dcl_texcoord v2.xy\n    // dcl_2d s0\n    // nrm_pp r0.xyz, v0\n    temp0.xyz = /* not implemented _pp modifier */ normalize(i.texcoord3.xyz).xyz;\n    // nrm_pp r1.xyz, v1\n    temp1.xyz = /* not implemented _pp modifier */ normalize(i.texcoord4.xyz).xyz;\n    // dp3_pp r0.x, r0, r1\n    temp0.x = /* not implemented _pp modifier */ dot(temp0.xyz, temp1.xyz);\n    // add r0.y, r0_abs.x, c3.x\n    temp0.y = abs(temp0).x + float1(-0.0001);\n    // log r0.x, r0_abs.x\n    temp0.x = log2(abs(temp0).x);\n    // cmp r0.x, r0.y, r0.x, c3.y\n    temp0.x = (temp0.y >= 0) ? temp0.x : float1(-13.287712);\n    // mul r0.x, r0.x, c0.x\n    temp0.x = temp0.x * ref_falloff_exp.x;\n    // exp_pp r0.x, r0.x\n    temp0.x = /* not implemented _pp modifier */ exp2(temp0.x);\n    // texld_pp r1, v2, s0\n    temp1 = /* not implemented _pp modifier */ tex2D(diffuse_texture, i.texcoord.xy);\n    // mul_pp oC0.w, r0.x, r1.w\n    out_color.w = /* not implemented _pp modifier */ temp0.x * temp1.w;\n    // mul r0.xyz, r1, c1\n    temp0.xyz = temp1.xyz * ref_tint_diffuse0_color.xyz;\n    // add_sat_pp r0.xyz, r0, r0\n    ;// error\n    // mul oC0.xyz, r0, c2.x\n    out_color.xyz = temp0.xyz * ref_intensity.xxx;\n    // \n\n    return out_color;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."))}x.isMDXComponent=!0}}]);