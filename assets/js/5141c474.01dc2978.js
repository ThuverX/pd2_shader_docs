"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[8283],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>s});var n=r(67294);function m(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){m(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,m=function(e,t){if(null==e)return{};var r,n,m={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(m[r]=e[r]);return m}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(m[r]=e[r])}return m}var l=n.createContext({}),_=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},d=function(e){var t=_(e.components);return n.createElement(l.Provider,{value:t},e.children)},x="mdxType",i={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,m=e.mdxType,o=e.originalType,l=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),x=_(r),c=m,s=x["".concat(l,".").concat(c)]||x[c]||i[c]||o;return r?n.createElement(s,p(p({ref:t},d),{},{components:r})):n.createElement(s,p({ref:t},d))}));function s(e,t){var r=arguments,m=t&&t.mdxType;if("string"==typeof e||m){var o=r.length,p=new Array(o);p[0]=c;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[x]="string"==typeof e?e:m,p[1]=a;for(var _=2;_<o;_++)p[_]=r[_];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},83234:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>i,frontMatter:()=>o,metadata:()=>a,toc:()=>_});var n=r(87462),m=(r(67294),r(3905));const o={id:0xed5bc1ad060d8000,title:"Generic Default Alpha Masked Cube Environment Mapping Diffuse Texture External Alpha Ref Gloss Blurs Cubemap Gloss Control Value Normalmap Self Illumination Vegetation Bending Vertex Alpha"},p="Generic Default Alpha Masked Cube Environment Mapping Diffuse Texture External Alpha Ref Gloss Blurs Cubemap Gloss Control Value Normalmap Self Illumination Vegetation Bending Vertex Alpha",a={unversionedId:"Generated/Shaders/Base/[4400-4500]/17103476958744642000",id:"Generated/Shaders/Base/[4400-4500]/17103476958744642000",title:"Generic Default Alpha Masked Cube Environment Mapping Diffuse Texture External Alpha Ref Gloss Blurs Cubemap Gloss Control Value Normalmap Self Illumination Vegetation Bending Vertex Alpha",description:"(genericALPHAMASKEDDIFFUSETEXTUREGLOSSBLURSCUBEMAPNORMALMAPVEGETATIONBENDING:VERTEX_ALPHA, 0xed5bc1ad060d7f1d)",source:"@site/docs/Generated/Shaders/Base/[4400-4500]/0xed5bc1ad060d7f1d.mdx",sourceDirName:"Generated/Shaders/Base/[4400-4500]",slug:"/Generated/Shaders/Base/[4400-4500]/17103476958744642000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[4400-4500]/17103476958744642000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/docs/Generated/Shaders/Base/[4400-4500]/0xed5bc1ad060d7f1d.mdx",tags:[],version:"current",frontMatter:{id:"17103476958744642000",title:"Generic Default Alpha Masked Cube Environment Mapping Diffuse Texture External Alpha Ref Gloss Blurs Cubemap Gloss Control Value Normalmap Self Illumination Vegetation Bending Vertex Alpha"},sidebar:"docsSidebar",previous:{title:"Generic Default Diffuse Texture Gsma Texture Normalmap Skinned 1weight Vertex Color",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[4400-4500]/17101875874434724000"},next:{title:"Generic Shadow Caster Cube Environment Mapping Diffuse Texture Gloss Control Value Normalmap Nvidia Skinned 1weight",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[4400-4500]/17106402649166572000"}},l={},_=[{value:"Technique <code>deferred_ambient_alpha_masked</code>",id:"technique-deferred_ambient_alpha_masked",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Sampler 1",id:"sampler-1",level:4},{value:"Sampler 2",id:"sampler-2",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4},{value:"Technique <code>self_illumination</code>",id:"technique-self_illumination",level:3},{value:"Render States",id:"render-states-1",level:3},{value:"Sampler States",id:"sampler-states-1",level:3},{value:"Sampler 0",id:"sampler-0-1",level:4},{value:"Shaders",id:"shaders-1",level:3},{value:"Vertex Shader",id:"vertex-shader-1",level:4},{value:"Pixel Shader",id:"pixel-shader-1",level:4}],d={toc:_},x="wrapper";function i(e){let{components:t,...r}=e;return(0,m.kt)(x,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,m.kt)("h1",{id:"generic-default-alpha-masked-cube-environment-mapping-diffuse-texture-external-alpha-ref-gloss-blurs-cubemap-gloss-control-value-normalmap-self-illumination-vegetation-bending-vertex-alpha"},"Generic Default Alpha Masked Cube Environment Mapping Diffuse Texture External Alpha Ref Gloss Blurs Cubemap Gloss Control Value Normalmap Self Illumination Vegetation Bending Vertex Alpha"),(0,m.kt)("p",null,"(",(0,m.kt)("inlineCode",{parentName:"p"},"generic:default:ALPHA_MASKED:CUBE_ENVIRONMENT_MAPPING:DIFFUSE_TEXTURE:EXTERNAL_ALPHA_REF:GLOSS_BLURS_CUBEMAP:GLOSS_CONTROL_VALUE:NORMALMAP:SELF_ILLUMINATION:VEGETATION_BENDING:VERTEX_ALPHA"),", ",(0,m.kt)("inlineCode",{parentName:"p"},"0xed5bc1ad060d7f1d"),")"),(0,m.kt)("h3",{id:"technique-deferred_ambient_alpha_masked"},"Technique ",(0,m.kt)("inlineCode",{parentName:"h3"},"deferred_ambient_alpha_masked")),(0,m.kt)("h3",{id:"render-states"},"Render States"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 1,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 2,\n    D3DRS_COLORWRITEENABLE = 15,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,m.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,m.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,m.kt)("h4",{id:"sampler-1"},"Sampler 1"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,m.kt)("h4",{id:"sampler-2"},"Sampler 2"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,m.kt)("h3",{id:"shaders"},"Shaders"),(0,m.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-hlsl"},"float camera_near_range : register(vs_3_0, c12);\ncolumn_major float4x4 proj_matrix : register(vs_3_0, c8);\nfloat3 ref_branch_settings : register(vs_3_0, c16);\nfloat3 ref_detail_settings : register(vs_3_0, c15);\nfloat ref_speed : register(vs_3_0, c14);\nfloat ref_time : register(vs_3_0, c13);\ncolumn_major float4x4 view_matrix : register(vs_3_0, c4);\ncolumn_major float4x4 world_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 normal : NORMAL;\n    float4 texcoord1 : TEXCOORD1;\n    float4 texcoord : TEXCOORD;\n    float4 tangent : TANGENT;\n    float4 binormal : BINORMAL;\n    float4 color : COLOR;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float texcoord1 : TEXCOORD1;\n    float4 texcoord : TEXCOORD;\n    float3 texcoord2 : TEXCOORD2;\n    float3 texcoord3 : TEXCOORD3;\n    float3 texcoord4 : TEXCOORD4;\n    float3 texcoord5 : TEXCOORD5;\n    float4 color : COLOR;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0, temp1, temp4;\n    float3 temp2, temp3;\n    // def c17, 1.975, 0.793, 0.375, 0.193\n    // def c18, 2, -1, 1, -0.5\n    // def c19, 2, 3, 0, 0\n    // dcl_position v0\n    // dcl_normal v1\n    // dcl_texcoord1 v2\n    // dcl_texcoord v3\n    // dcl_tangent v4\n    // dcl_binormal v5\n    // dcl_color v6\n    // dcl_position o0\n    // dcl_texcoord1 o1.x\n    // dcl_texcoord o2\n    // dcl_texcoord2 o3.xyz\n    // dcl_texcoord3 o4.xyz\n    // dcl_texcoord4 o5.xyz\n    // dcl_texcoord5 o6.xyz\n    // dcl_color o7\n    // mov r0.x, c0.w\n    temp0.x = (world_matrix._m00_m10_m20_m30).w;\n    // mov r0.y, c1.w\n    temp0.y = (world_matrix._m01_m11_m21_m31).w;\n    // mov r0.z, c2.w\n    temp0.z = (world_matrix._m02_m12_m22_m32).w;\n    // dp3 r0.x, r0, c18.z\n    temp0.x = dot(temp0.xyz, float3(1, 1, 1));\n    // add r0.x, r0.x, v6.y\n    temp0.x = temp0.x + i.color.y;\n    // add r0.x, r0.x, c13.x\n    temp0.x = temp0.x + ref_time.x;\n    // mul r0.zw, r0.x, c16.y\n    temp0.zw = temp0.x * ref_branch_settings.y;\n    // add r1.x, c13.x, v6.y\n    temp1.x = ref_time.x + i.color.y;\n    // mul r0.xy, r1.x, c15.y\n    temp0.xy = temp1.x * ref_detail_settings.y;\n    // mul r0, r0, c14.x\n    temp0 = temp0 * ref_speed.x;\n    // mul r0, r0, c17\n    temp0 = temp0 * float4(1.975, 0.793, 0.375, 0.193);\n    // frc r0, r0\n    temp0 = frac(temp0);\n    // mad r0, r0, c18.x, c18.w\n    temp0 = temp0 * float4(2, 2, 2, 2) + float4(-0.5, -0.5, -0.5, -0.5);\n    // frc r0, r0\n    temp0 = frac(temp0);\n    // mad r0, r0, c18.x, c18.y\n    temp0 = temp0 * float4(2, 2, 2, 2) + float4(-1, -1, -1, -1);\n    // mul r1, r0_abs, r0_abs\n    temp1 = abs(temp0) * abs(temp0);\n    // mad r0, r0_abs, -c19.x, c19.y\n    temp0 = abs(temp0) * float4(-2, -2, -2, -2) + float4(3, 3, 3, 3);\n    // mul r0, r0, r1\n    temp0 = temp0 * temp1;\n    // add r0.xyz, r0.yyww, r0.xxzw\n    temp0.xyz = temp0.yyw + temp0.xxz;\n    // dp4 r1.x, v0, c0\n    temp1.x = dot(i.position, (world_matrix._m00_m10_m20_m30));\n    // dp4 r1.y, v0, c1\n    temp1.y = dot(i.position, (world_matrix._m01_m11_m21_m31));\n    // dp4 r1.z, v0, c2\n    temp1.z = dot(i.position, (world_matrix._m02_m12_m22_m32));\n    // mul r2.z, c16.x, v6.z\n    temp2.z = ref_branch_settings.x * i.color.z;\n    // mul r0.w, v6.z, v6.x\n    temp0.w = i.color.z * i.color.x;\n    // mul r0.w, r0.w, c15.x\n    temp0.w = temp0.w * ref_detail_settings.x;\n    // mad r3.xyz, v1, c18.x, c18.y\n    temp3.xyz = i.normal.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 r4.z, r3, c0\n    temp4.z = dot(temp3.xyz, (world_matrix._m00_m10_m20_m30).xyz);\n    // dp3 r4.w, r3, c1\n    temp4.w = dot(temp3.xyz, (world_matrix._m01_m11_m21_m31).xyz);\n    // dp3 o5.z, r3, c2\n    o.texcoord4.z = dot(temp3.xyz, (world_matrix._m02_m12_m22_m32).xyz);\n    // mul r2.xy, r0.w, r4.zwzw\n    temp2.xy = temp0.ww * temp4.zw;\n    // mov o4.z, r4.w\n    o.texcoord3.z = temp4.w;\n    // mad r0.xyz, r0, r2, r1\n    temp0.xyz = temp0.xyz * temp2.xyz + temp1.xyz;\n    // dp4 r0.w, v0, c3\n    temp0.w = dot(i.position, (world_matrix._m03_m13_m23_m33));\n    // dp4 r1.x, r0, c4\n    temp1.x = dot(temp0, (view_matrix._m00_m10_m20_m30));\n    // dp4 r1.y, r0, c5\n    temp1.y = dot(temp0, (view_matrix._m01_m11_m21_m31));\n    // dp4 r1.z, r0, c6\n    temp1.z = dot(temp0, (view_matrix._m02_m12_m22_m32));\n    // dp4 r1.w, r0, c7\n    temp1.w = dot(temp0, (view_matrix._m03_m13_m23_m33));\n    // mov o6.xyz, r0\n    o.texcoord5 = temp0;\n    // dp4 o0.x, r1, c8\n    o.position.x = dot(temp1, (proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, r1, c9\n    o.position.y = dot(temp1, (proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.w, r1, c11\n    o.position.w = dot(temp1, (proj_matrix._m03_m13_m23_m33));\n    // dp4 r0.x, r1, c10\n    temp0.x = dot(temp1, (proj_matrix._m02_m12_m22_m32));\n    // add o1.x, r0.x, c12.x\n    o.texcoord1 = temp0.x + camera_near_range.x;\n    // mov o0.z, r0.x\n    o.position.z = temp0.x;\n    // mad r0.xyz, v4, c18.x, c18.y\n    temp0.xyz = i.tangent.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 o4.x, r0, c1\n    o.texcoord3.x = dot(temp0.xyz, (world_matrix._m01_m11_m21_m31).xyz);\n    // dp3 o5.x, r0, c2\n    o.texcoord4.x = dot(temp0.xyz, (world_matrix._m02_m12_m22_m32).xyz);\n    // dp3 r4.x, r0, c0\n    temp4.x = dot(temp0.xyz, (world_matrix._m00_m10_m20_m30).xyz);\n    // mad r0.xyz, v5, c18.x, c18.y\n    temp0.xyz = i.binormal.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 o4.y, -r0, c1\n    o.texcoord3.y = dot(-temp0.xyz, (world_matrix._m01_m11_m21_m31).xyz);\n    // dp3 o5.y, -r0, c2\n    o.texcoord4.y = dot(-temp0.xyz, (world_matrix._m02_m12_m22_m32).xyz);\n    // dp3 r4.y, -r0, c0\n    temp4.y = dot(-temp0.xyz, (world_matrix._m00_m10_m20_m30).xyz);\n    // mov o3.xyz, r4\n    o.texcoord2 = temp4;\n    // mov o2.xy, v3\n    o.texcoord.xy = i.texcoord.xy;\n    // mov o2.zw, v2.xyxy\n    o.texcoord.zw = i.texcoord1.xy;\n    // mul o7, c18.xxxz, v6\n    o.color = float4(2, 2, 2, 1) * i.color;\n    // \n\n    return o;\n}\n")),(0,m.kt)("p",null,"Decompiled by DXDecompiler."),(0,m.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D bump_normal_texture : register(ps_3_0, s1);\ncolumn_major float4x4 camera_world_matrix : register(ps_3_0, c0);\nsampler2D diffuse_texture : register(ps_3_0, s0);\nfloat ref_alpha_ref : register(ps_3_0, c3);\nfloat ref_glossiness_control : register(ps_3_0, c4);\nsamplerCUBE reflection_texture : register(ps_3_0, s2);\nstruct PixelMain_Input\n{\n    float texcoord1 : TEXCOORD1;\n    float4 texcoord : TEXCOORD;\n    float3 texcoord2 : TEXCOORD2;\n    float3 texcoord3 : TEXCOORD3;\n    float3 texcoord4 : TEXCOORD4;\n    float3 texcoord5 : TEXCOORD5;\n    float4 color : COLOR;\n};\n\nstruct PixelMain_Output\n{\n    float4 color1 : COLOR1;\n    float4 color : COLOR;\n    float4 color2 : COLOR2;\n};\n\nPixelMain_Output PixelMain(PixelMain_Input i)\n{\n    PixelMain_Output o;\n    float4 temp0, temp1, temp2;\n    float3 temp3;\n    // def c5, 1, -1, -0.5, 0.25\n    // def c6, 7, 0, 0, 0\n    // dcl_texcoord1 v0.x\n    // dcl_texcoord v1\n    // dcl_texcoord2 v2.xyz\n    // dcl_texcoord3 v3.xyz\n    // dcl_texcoord4 v4.xyz\n    // dcl_texcoord5 v5.xyz\n    // dcl_color v6.w\n    // dcl_2d s0\n    // dcl_2d s1\n    // dcl_cube s2\n    // texld_pp r0, v1, s0\n    temp0 = /* not implemented _pp modifier */ tex2D(diffuse_texture, i.texcoord.xy);\n    // add r1.x, r0.w, -c3.x\n    temp1.x = temp0.w + -ref_alpha_ref.x;\n    // cmp r1, r1.x, c5.x, c5.y\n    temp1 = (temp1.x >= 0) ? float4(1, 1, 1, 1) : float4(-1, -1, -1, -1);\n    // texkill r1\n    clip(temp1);\n    // texld_pp r1, v1.zwzw, s1\n    temp1 = /* not implemented _pp modifier */ tex2D(bump_normal_texture, i.texcoord.zw);\n    // add_pp r1.xy, r1.wyzw, c5.z\n    temp1.xy = /* not implemented _pp modifier */ temp1.wy + float2(-0.5, -0.5);\n    // add_pp r1.xy, r1, r1\n    temp1.xy = /* not implemented _pp modifier */ temp1.xy + temp1.xy;\n    // mul_pp r1.w, r1.x, r1.x\n    temp1.w = /* not implemented _pp modifier */ temp1.x * temp1.x;\n    // mad_pp r1.w, r1.y, r1.y, -r1.w\n    temp1.w = /* not implemented _pp modifier */ temp1.y * temp1.y + -temp1.w;\n    // add_pp r1.w, -r1.w, c5.x\n    temp1.w = /* not implemented _pp modifier */ -temp1.w + float1(1);\n    // rsq_pp r1.w, r1.w\n    temp1.w = /* not implemented _pp modifier */ 1 / sqrt(temp1.w);\n    // rcp_pp r1.z, r1.w\n    temp1.z = /* not implemented _pp modifier */ 1.0f / temp1.w;\n    // dp3 r2.x, r1, v2\n    temp2.x = dot(temp1.xyz, i.texcoord2.xyz);\n    // dp3 r2.y, r1, v3\n    temp2.y = dot(temp1.xyz, i.texcoord3.xyz);\n    // dp3 r2.z, r1, v4\n    temp2.z = dot(temp1.xyz, i.texcoord4.xyz);\n    // nrm_pp r1.xyz, r2\n    temp1.xyz = /* not implemented _pp modifier */ normalize(temp2.xyz).xyz;\n    // add r2.x, c0.w, -v5.x\n    temp2.x = (camera_world_matrix._m00_m10_m20_m30).w + -i.texcoord5.x;\n    // add r2.y, c1.w, -v5.y\n    temp2.y = (camera_world_matrix._m01_m11_m21_m31).w + -i.texcoord5.y;\n    // add r2.z, c2.w, -v5.z\n    temp2.z = (camera_world_matrix._m02_m12_m22_m32).w + -i.texcoord5.z;\n    // nrm r3.xyz, r2\n    temp3.xyz = normalize(temp2.xyz).xyz;\n    // dp3 r1.w, r1, r3\n    temp1.w = dot(temp1.xyz, temp3.xyz);\n    // add r2.x, r1.w, r1.w\n    temp2.x = temp1.w + temp1.w;\n    // mov_sat r1.w, r1.w\n    temp1.w = saturate(temp1.w);\n    // add r1.w, -r1.w, c5.x\n    temp1.w = -temp1.w + float1(1);\n    // dp2add r1.w, r1.w, r1.w, c5.w\n    temp1.w = dot(temp1.ww, temp1.ww) + float1(0.25);\n    // mul r1.w, r0.w, r1.w\n    temp1.w = temp0.w * temp1.w;\n    // mad r2.xyz, r2.x, -r1, r3\n    temp2.xyz = temp2.xxx * -temp1.xyz + temp3.xyz;\n    // mad_pp oC1.xyz, r1, -c5.z, -c5.z\n    o.color1.xyz = /* not implemented _pp modifier */ temp1.xyz * float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5);\n    // mov r1.x, c5.x\n    temp1.x = float1(1);\n    // add r1.x, r1.x, -c4.x\n    temp1.x = temp1.x + -ref_glossiness_control.x;\n    // mul r1.x, r1.x, c6.x\n    temp1.x = temp1.x * float1(7);\n    // frc r1.y, r1.x\n    temp1.y = frac(temp1.x);\n    // add r2.w, -r1.y, r1.x\n    temp2.w = -temp1.y + temp1.x;\n    // texldl r2, r2, s2\n    temp2 = texCUBElod(reflection_texture, temp2);\n    // mul r1.xyz, r1.w, r2\n    temp1.xyz = temp1.www * temp2.xyz;\n    // mul r1.xyz, r0.w, r1\n    temp1.xyz = temp0.www * temp1.xyz;\n    // mad_pp oC0.xyz, r0, v6.w, r1\n    o.color.xyz = /* not implemented _pp modifier */ temp0.xyz * i.color.www + temp1.xyz;\n    // mov_pp oC1.w, r0.w\n    o.color1.w = /* not implemented _pp modifier */ temp0.w;\n    // mov oC0.w, c4.x\n    o.color.w = ref_glossiness_control.x;\n    // mov oC2, v0.x\n    o.color2 = i.texcoord1.x;\n    // \n\n    return o;\n}\n")),(0,m.kt)("p",null,"Decompiled by DXDecompiler."),(0,m.kt)("h3",{id:"technique-self_illumination"},"Technique ",(0,m.kt)("inlineCode",{parentName:"h3"},"self_illumination")),(0,m.kt)("h3",{id:"render-states-1"},"Render States"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 3,\n    D3DRS_ZWRITEENABLE = 1,\n    D3DRS_ALPHABLENDENABLE = 1,\n    D3DRS_CULLMODE = 2,\n    D3DRS_COLORWRITEENABLE = 15,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n    D3DRS_BLENDOP = 1,\n    D3DRS_SRCBLEND = 2,\n    D3DRS_DESTBLEND = 2,\n};\n")),(0,m.kt)("h3",{id:"sampler-states-1"},"Sampler States"),(0,m.kt)("h4",{id:"sampler-0-1"},"Sampler 0"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 1,\n    D3DSAMP_ADDRESSU = 1,\n    D3DSAMP_ADDRESSV = 1,\n    D3DSAMP_MAGFILTER = 3,\n    D3DSAMP_MINFILTER = 3,\n    D3DSAMP_MIPFILTER = 3,\n};\n")),(0,m.kt)("h3",{id:"shaders-1"},"Shaders"),(0,m.kt)("h4",{id:"vertex-shader-1"},"Vertex Shader"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 camera_world_matrix : register(vs_3_0, c12);\ncolumn_major float4x4 proj_matrix : register(vs_3_0, c8);\nfloat3 ref_branch_settings : register(vs_3_0, c18);\nfloat3 ref_detail_settings : register(vs_3_0, c17);\nfloat ref_speed : register(vs_3_0, c16);\nfloat ref_time : register(vs_3_0, c15);\nfloat3 render_target_texel_offset : register(vs_3_0, c21);\ncolumn_major float4x4 view_matrix : register(vs_3_0, c4);\nfloat3 vp_offset : register(vs_3_0, c19);\nfloat3 vp_size : register(vs_3_0, c20);\ncolumn_major float4x4 world_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 normal : NORMAL;\n    float4 color : COLOR;\n    float4 texcoord : TEXCOORD;\n    float4 texcoord3 : TEXCOORD3;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float3 texcoord : TEXCOORD;\n    float2 texcoord6 : TEXCOORD6;\n    float4 texcoord1 : TEXCOORD1;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0, temp1, temp2;\n    float2 temp3;\n    // def c22, 2, -1, 1, -0.5\n    // def c23, 1.975, 0.793, 0.375, 0.193\n    // def c24, 2, 3, 0, 0\n    // dcl_position v0\n    // dcl_normal v1\n    // dcl_color v2\n    // dcl_texcoord v3\n    // dcl_texcoord3 v4\n    // dcl_position o0\n    // dcl_texcoord o1.xyz\n    // dcl_texcoord6 o2.xy\n    // dcl_texcoord1 o3\n    // mov r0.x, c0.w\n    temp0.x = (world_matrix._m00_m10_m20_m30).w;\n    // mov r0.y, c1.w\n    temp0.y = (world_matrix._m01_m11_m21_m31).w;\n    // mov r0.z, c2.w\n    temp0.z = (world_matrix._m02_m12_m22_m32).w;\n    // dp3 r0.x, r0, c22.z\n    temp0.x = dot(temp0.xyz, float3(1, 1, 1));\n    // add r0.x, r0.x, v2.y\n    temp0.x = temp0.x + i.color.y;\n    // add r0.x, r0.x, c15.x\n    temp0.x = temp0.x + ref_time.x;\n    // mul r0.zw, r0.x, c18.y\n    temp0.zw = temp0.x * ref_branch_settings.y;\n    // add r1.x, c15.x, v2.y\n    temp1.x = ref_time.x + i.color.y;\n    // mul r0.xy, r1.x, c17.y\n    temp0.xy = temp1.x * ref_detail_settings.y;\n    // mul r0, r0, c16.x\n    temp0 = temp0 * ref_speed.x;\n    // mul r0, r0, c23\n    temp0 = temp0 * float4(1.975, 0.793, 0.375, 0.193);\n    // frc r0, r0\n    temp0 = frac(temp0);\n    // mad r0, r0, c22.x, c22.w\n    temp0 = temp0 * float4(2, 2, 2, 2) + float4(-0.5, -0.5, -0.5, -0.5);\n    // frc r0, r0\n    temp0 = frac(temp0);\n    // mad r0, r0, c22.x, c22.y\n    temp0 = temp0 * float4(2, 2, 2, 2) + float4(-1, -1, -1, -1);\n    // mul r1, r0_abs, r0_abs\n    temp1 = abs(temp0) * abs(temp0);\n    // mad r0, r0_abs, -c24.x, c24.y\n    temp0 = abs(temp0) * float4(-2, -2, -2, -2) + float4(3, 3, 3, 3);\n    // mul r0, r0, r1\n    temp0 = temp0 * temp1;\n    // add r0.xyz, r0.yyww, r0.xxzw\n    temp0.xyz = temp0.yyw + temp0.xxz;\n    // mul r0.w, v2.z, v2.x\n    temp0.w = i.color.z * i.color.x;\n    // mul r0.w, r0.w, c17.x\n    temp0.w = temp0.w * ref_detail_settings.x;\n    // mad r1.xyz, v1, c22.x, c22.y\n    temp1.xyz = i.normal.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 r2.x, r1, c0\n    temp2.x = dot(temp1.xyz, (world_matrix._m00_m10_m20_m30).xyz);\n    // dp3 r2.y, r1, c1\n    temp2.y = dot(temp1.xyz, (world_matrix._m01_m11_m21_m31).xyz);\n    // mul r1.xy, r0.w, r2\n    temp1.xy = temp0.ww * temp2.xy;\n    // dp4 r2.x, v0, c0\n    temp2.x = dot(i.position, (world_matrix._m00_m10_m20_m30));\n    // dp4 r2.y, v0, c1\n    temp2.y = dot(i.position, (world_matrix._m01_m11_m21_m31));\n    // dp4 r2.z, v0, c2\n    temp2.z = dot(i.position, (world_matrix._m02_m12_m22_m32));\n    // mul r1.z, c18.x, v2.z\n    temp1.z = ref_branch_settings.x * i.color.z;\n    // mad r0.xyz, r0, r1, r2\n    temp0.xyz = temp0.xyz * temp1.xyz + temp2.xyz;\n    // dp4 r0.w, v0, c3\n    temp0.w = dot(i.position, (world_matrix._m03_m13_m23_m33));\n    // dp4 r1.x, r0, c4\n    temp1.x = dot(temp0, (view_matrix._m00_m10_m20_m30));\n    // dp4 r1.y, r0, c5\n    temp1.y = dot(temp0, (view_matrix._m01_m11_m21_m31));\n    // dp4 r1.z, r0, c6\n    temp1.z = dot(temp0, (view_matrix._m02_m12_m22_m32));\n    // dp4 r1.w, r0, c7\n    temp1.w = dot(temp0, (view_matrix._m03_m13_m23_m33));\n    // add o1.z, -r0.z, c14.w\n    o.texcoord.z = -temp0.z + (camera_world_matrix._m02_m12_m22_m32).w;\n    // dp4 r0.x, r1, c8\n    temp0.x = dot(temp1, (proj_matrix._m00_m10_m20_m30));\n    // dp4 r0.w, r1, c11\n    temp0.w = dot(temp1, (proj_matrix._m03_m13_m23_m33));\n    // mov r2.xw, c22\n    temp2.xw = float2(2, -0.5);\n    // mov r3.xy, c20\n    temp3.xy = vp_size.xy;\n    // mad r2.xy, c19, r2.x, r3\n    temp2.xy = vp_offset.xy * temp2.xx + temp3.xy;\n    // add r2.xy, r2, c22.y\n    temp2.xy = temp2.xy + float2(-1, -1);\n    // mul r2.xy, r0.w, r2\n    temp2.xy = temp0.ww * temp2.xy;\n    // mad r2.x, r0.x, c20.x, r2.x\n    temp2.x = temp0.x * vp_size.x + temp2.x;\n    // add r2.z, r0.w, r0.w\n    temp2.z = temp0.w + temp0.w;\n    // add r3.xy, -r2.w, c21\n    temp3.xy = -temp2.ww + render_target_texel_offset.xy;\n    // mad o3.x, r2.z, r3.x, r2.x\n    o.texcoord1.x = temp2.z * temp3.x + temp2.x;\n    // dp4 r0.y, r1, c9\n    temp0.y = dot(temp1, (proj_matrix._m01_m11_m21_m31));\n    // dp4 r0.z, r1, c10\n    temp0.z = dot(temp1, (proj_matrix._m02_m12_m22_m32));\n    // mad r1.x, r0.y, -c20.y, r2.y\n    temp1.x = temp0.y * -vp_size.y + temp2.y;\n    // mov o0, r0\n    o.position = temp0;\n    // mul o3.zw, r0, c22.xyzx\n    o.texcoord1.zw = temp0.zw * float2(1, 2);\n    // mad o3.y, r2.z, r3.y, r1.x\n    o.texcoord1.y = temp2.z * temp3.y + temp1.x;\n    // mov o1.xy, v3\n    o.texcoord.xy = i.texcoord.xy;\n    // mov o2.xy, v4\n    o.texcoord6 = i.texcoord3;\n    // \n\n    return o;\n}\n")),(0,m.kt)("p",null,"Decompiled by DXDecompiler."),(0,m.kt)("h4",{id:"pixel-shader-1"},"Pixel Shader"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-hlsl"},"float ref_il_multiplier : register(ps_3_0, c0);\nsampler2D self_illumination_texture : register(ps_3_0, s0);\nfloat4 PixelMain(float2 texcoord : TEXCOORD) : COLOR\n{\n    float4 out_color;\n    float4 temp0;\n    // def c1, 1, 0, 0, 0\n    // dcl_texcoord v0.xy\n    // dcl_2d s0\n    // texld_pp r0, v0, s0\n    temp0 = /* not implemented _pp modifier */ tex2D(self_illumination_texture, texcoord.xy);\n    // mul_pp oC0.xyz, r0, c0.x\n    out_color.xyz = /* not implemented _pp modifier */ temp0.xyz * ref_il_multiplier.xxx;\n    // mov_pp oC0.w, c1.x\n    out_color.w = /* not implemented _pp modifier */ float1(1);\n    // \n\n    return out_color;\n}\n")),(0,m.kt)("p",null,"Decompiled by DXDecompiler."))}i.isMDXComponent=!0}}]);