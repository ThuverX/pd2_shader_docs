"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[8018],{3905:(e,t,r)=>{r.d(t,{Zo:()=>i,kt:()=>D});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),m=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},i=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},l="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,i=d(e,["components","mdxType","originalType","parentName"]),l=m(r),u=o,D=l["".concat(s,".").concat(u)]||l[u]||c[u]||a;return r?n.createElement(D,p(p({ref:t},i),{},{components:r})):n.createElement(D,p({ref:t},i))}));function D(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,p=new Array(a);p[0]=u;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d[l]="string"==typeof e?e:o,p[1]=d;for(var m=2;m<a;m++)p[m]=r[m];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},2281:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>c,frontMatter:()=>a,metadata:()=>d,toc:()=>m});var n=r(7462),o=(r(7294),r(3905));const a={id:0x3e67a1474e91ce00,title:"Post Contour Mask Default"},p="Post Contour Mask Default",d={unversionedId:"Generated/Shaders/Post/4496740080585658000",id:"Generated/Shaders/Post/4496740080585658000",title:"Post Contour Mask Default",description:"(postcontourmask:default, 0x3e67a1474e91cd18)",source:"@site/docs/Generated/Shaders/Post/0x3e67a1474e91cd18.mdx",sourceDirName:"Generated/Shaders/Post",slug:"/Generated/Shaders/Post/4496740080585658000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Post/4496740080585658000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Post/0x3e67a1474e91cd18.mdx",tags:[],version:"current",frontMatter:{id:"4496740080585658000",title:"Post Contour Mask Default"},sidebar:"docsSidebar",previous:{title:"Post Smaa Blend Neighbourhood Default Smaa Hlsl 3",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Post/4491164139891084300"},next:{title:"Blit Masks Depth Default",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Post/4501811371148308500"}},s={},m=[{value:"Technique <code>ambient</code>",id:"technique-ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],i={toc:m},l="wrapper";function c(e){let{components:t,...r}=e;return(0,o.kt)(l,(0,n.Z)({},i,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"post-contour-mask-default"},"Post Contour Mask Default"),(0,o.kt)("p",null,"(",(0,o.kt)("inlineCode",{parentName:"p"},"post_contour_mask:default"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"0x3e67a1474e91cd18"),")"),(0,o.kt)("p",null,"This template is referenced 1 time by ",(0,o.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/post.render_template_database#post-contour-mask"},"post_contour_mask"),"."),(0,o.kt)("h3",{id:"technique-ambient"},"Technique ",(0,o.kt)("inlineCode",{parentName:"h3"},"ambient")),(0,o.kt)("h3",{id:"render-states"},"Render States"),(0,o.kt)("p",null,"More info can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 0,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 1,\n    D3DRS_CULLMODE = 1,\n    D3DRS_COLORWRITEENABLE = 7,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 1,\n    D3DRS_STENCILFUNC = 6,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = -1,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 4,\n    D3DRS_STENCILWRITEMASK = 255,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n    D3DRS_BLENDOP = 1,\n    D3DRS_DESTBLEND = 2,\n    D3DRS_SRCBLEND = 2,\n};\n")),(0,o.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,o.kt)("p",null,"More info can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,o.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 2,\n    D3DSAMP_MINFILTER = 2,\n    D3DSAMP_MIPFILTER = 2,\n};\n")),(0,o.kt)("h3",{id:"shaders"},"Shaders"),(0,o.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float2 texcoord : TEXCOORD;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    // def c4, 1, 0, 0, 0\n    // dcl_position v0\n    // dcl_texcoord v1\n    // dcl_position o0\n    // dcl_texcoord o1.xy\n    // dp4 o0.x, v0, c0\n    o.position.x = dot(i.position, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, v0, c1\n    o.position.y = dot(i.position, (view_proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.w, v0, c3\n    o.position.w = dot(i.position, (view_proj_matrix._m03_m13_m23_m33));\n    // mov o0.z, c4.x\n    o.position.z = float1(1);\n    // mov o1.xy, v1\n    o.texcoord = i.texcoord;\n    // \n\n    return o;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."),(0,o.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D diffuse_texture : register(ps_3_0, s0);\nfloat3 render_target_size : register(ps_3_0, c0);\nfloat4 PixelMain(float2 texcoord : TEXCOORD) : COLOR\n{\n    float4 out_color;\n    float4 temp0, temp1, temp2, temp3, temp4, temp5;\n    // def c1, 0, 0, 0, 0\n    // dcl_texcoord v0.xy\n    // dcl_2d s0\n    // texld r0, v0, s0\n    temp0 = tex2D(diffuse_texture, texcoord.xy);\n    // add r0.x, r0.y, r0.x\n    temp0.x = temp0.y + temp0.x;\n    // add r0.x, r0.z, r0.x\n    temp0.x = temp0.z + temp0.x;\n    // rcp r1.x, c0.x\n    temp1.x = 1.0f / render_target_size.x;\n    // rcp r1.w, c0.y\n    temp1.w = 1.0f / render_target_size.y;\n    // mov r1.yz, c1.x\n    temp1.yz = float2(0, 0);\n    // add r2, r1, v0.xyxy\n    temp2 = temp1 + texcoord.xyxy;\n    // add r1, -r1, v0.xyxy\n    temp1 = -temp1 + texcoord.xyxy;\n    // texld r3, r2, s0\n    temp3 = tex2D(diffuse_texture, temp2.xy);\n    // texld r2, r2.zwzw, s0\n    temp2 = tex2D(diffuse_texture, temp2.zw);\n    // add r0.y, r3.y, r3.x\n    temp0.y = temp3.y + temp3.x;\n    // add r4.x, r3.z, r0.y\n    temp4.x = temp3.z + temp0.y;\n    // add r0.y, r2.y, r2.x\n    temp0.y = temp2.y + temp2.x;\n    // add r4.y, r2.z, r0.y\n    temp4.y = temp2.z + temp0.y;\n    // texld r5, r1, s0\n    temp5 = tex2D(diffuse_texture, temp1.xy);\n    // texld r1, r1.zwzw, s0\n    temp1 = tex2D(diffuse_texture, temp1.zw);\n    // add r0.y, r5.y, r5.x\n    temp0.y = temp5.y + temp5.x;\n    // add r4.z, r5.z, r0.y\n    temp4.z = temp5.z + temp0.y;\n    // add r0.y, r1.y, r1.x\n    temp0.y = temp1.y + temp1.x;\n    // add r4.w, r1.z, r0.y\n    temp4.w = temp1.z + temp0.y;\n    // add_sat r0, -r0.x, r4\n    temp0 = saturate(-temp0.x + temp4);\n    // frc r4, -r0\n    temp4 = frac(-temp0);\n    // add r0, r0, r4\n    temp0 = temp0 + temp4;\n    // mul r2.xyz, r2, r0.y\n    temp2.xyz = temp2.xyz * temp0.yyy;\n    // mad r2.xyz, r0.x, r3, r2\n    temp2.xyz = temp0.xxx * temp3.xyz + temp2.xyz;\n    // mad r0.xyz, r0.z, r5, r2\n    temp0.xyz = temp0.zzz * temp5.xyz + temp2.xyz;\n    // mad_pp oC0.xyz, r0.w, r1, r0\n    out_color.xyz = /* not implemented _pp modifier */ temp0.www * temp1.xyz + temp0.xyz;\n    // mov_pp oC0.w, c1.x\n    out_color.w = /* not implemented _pp modifier */ float1(0);\n    // \n\n    return out_color;\n}\n")),(0,o.kt)("p",null,"Decompiled by DXDecompiler."))}c.isMDXComponent=!0}}]);