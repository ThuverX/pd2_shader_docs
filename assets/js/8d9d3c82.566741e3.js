"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[18332],{603905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>_});var n=r(667294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},p=Object.keys(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),m=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},x=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,p=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=m(r),x=a,_=d["".concat(s,".").concat(x)]||d[x]||c[x]||p;return r?n.createElement(_,o(o({ref:t},l),{},{components:r})):n.createElement(_,o({ref:t},l))}));function _(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var p=r.length,o=new Array(p);o[0]=x;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:a,o[1]=i;for(var m=2;m<p;m++)o[m]=r[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}x.displayName="MDXCreateElement"},245566:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>p,metadata:()=>i,toc:()=>m});var n=r(487462),a=(r(667294),r(603905));const p={id:0x982c310da0369800,title:"Filter Night Vision Gaussian Blur Default"},o="Filter Night Vision Gaussian Blur Default",i={unversionedId:"Generated/Shaders/Post/10965193127332583000",id:"Generated/Shaders/Post/10965193127332583000",title:"Filter Night Vision Gaussian Blur Default",description:"(filternightvisiongaussianblur:default, 0x982c310da03699dd)",source:"@site/docs/Generated/Shaders/Post/0x982c310da03699dd.mdx",sourceDirName:"Generated/Shaders/Post",slug:"/Generated/Shaders/Post/10965193127332583000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Post/10965193127332583000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Post/0x982c310da03699dd.mdx",tags:[],version:"current",frontMatter:{id:"10965193127332583000",title:"Filter Night Vision Gaussian Blur Default"},sidebar:"docsSidebar",previous:{title:"Post Rain Ripples Default",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Post/10740706612977496000"},next:{title:"Filter Shadow Areas Default",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Post/11306949176809972000"}},s={},m=[{value:"Technique <code>transparent</code>",id:"technique-transparent",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],l={toc:m},d="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"filter-night-vision-gaussian-blur-default"},"Filter Night Vision Gaussian Blur Default"),(0,a.kt)("p",null,"(",(0,a.kt)("inlineCode",{parentName:"p"},"filter_night_vision_gaussian_blur:default"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0x982c310da03699dd"),")"),(0,a.kt)("p",null,"This template is referenced 1 time by ",(0,a.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/post.render_template_database#filter-night-vision-gaussian-blur"},"filter_night_vision_gaussian_blur"),"."),(0,a.kt)("h3",{id:"technique-transparent"},"Technique ",(0,a.kt)("inlineCode",{parentName:"h3"},"transparent")),(0,a.kt)("h3",{id:"render-states"},"Render States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 0,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 1,\n    D3DRS_COLORWRITEENABLE = 7,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,a.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,a.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 2,\n    D3DSAMP_MINFILTER = 2,\n    D3DSAMP_MIPFILTER = 2,\n};\n")),(0,a.kt)("h3",{id:"shaders"},"Shaders"),(0,a.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"float3 render_target_size : register(vs_3_0, c4);\ncolumn_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 texcoord : TEXCOORD;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float2 texcoord : TEXCOORD;\n    float2 texcoord1 : TEXCOORD1;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float temp0;\n    float2 temp1;\n    // def c5, 1, 0, 0, 0\n    // dcl_position v0\n    // dcl_texcoord v1\n    // dcl_position o0\n    // dcl_texcoord o1.xy\n    // dcl_texcoord1 o2.xy\n    // dp4 o0.w, v0, c3\n    o.position.w = dot(i.position, (view_proj_matrix._m03_m13_m23_m33));\n    // rcp r0.x, c4.x\n    temp0.x = 1.0f / render_target_size.x;\n    // mul r0.x, r0.x, c4.y\n    temp0.x = temp0.x * render_target_size.y;\n    // dp4 r1.y, v0, c1\n    temp1.y = dot(i.position, (view_proj_matrix._m01_m11_m21_m31));\n    // mul o2.y, r0.x, r1.y\n    o.texcoord1.y = temp0.x * temp1.y;\n    // mov o0.z, c5.x\n    o.position.z = float1(1);\n    // dp4 r1.x, v0, c0\n    temp1.x = dot(i.position, (view_proj_matrix._m00_m10_m20_m30));\n    // mov o0.xy, r1\n    o.position.xy = temp1.xy;\n    // mov o2.x, r1.x\n    o.texcoord1.x = temp1.x;\n    // mov o1.xy, v1\n    o.texcoord = i.texcoord;\n    // \n\n    return o;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."),(0,a.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"float3 ref_inv_source_resolution : register(ps_3_0, c4);\nfloat3 ref_samples[13] : register(ps_3_0, c0);\nsampler2D ref_src_texture : register(ps_3_0, s0);\nfloat3 ref_vignette_settings_a : register(ps_3_0, c5);\nfloat3 ref_vignette_settings_b : register(ps_3_0, c6);\nstruct PixelMain_Input\n{\n    float2 texcoord : TEXCOORD;\n    float2 texcoord1 : TEXCOORD1;\n};\n\nfloat4 PixelMain(PixelMain_Input i) : COLOR\n{\n    float4 out_color;\n    float3 temp0;\n    float4 temp1, temp2, temp3, temp4;\n    // def c7, -1, 1, 0, 0\n    // def c8, 0, -2, 3, 0.99\n    // dcl_texcoord v0.xy\n    // dcl_texcoord1 v1.xy\n    // dcl_2d s0\n    // dp2add r0.x, v1, v1, c8.x\n    temp0.x = dot(i.texcoord1.xy, i.texcoord1.xy) + float1(0);\n    // rsq r0.x, r0.x\n    temp0.x = 1 / sqrt(temp0.x);\n    // rcp r0.x, r0.x\n    temp0.x = 1.0f / temp0.x;\n    // add r0.x, r0.x, -c5.x\n    temp0.x = temp0.x + -ref_vignette_settings_a.x;\n    // add r0.y, -c5.x, c5.y\n    temp0.y = -ref_vignette_settings_a.x + ref_vignette_settings_a.y;\n    // rcp r0.y, r0.y\n    temp0.y = 1.0f / temp0.y;\n    // mul_sat r0.x, r0.y, r0.x\n    temp0.x = saturate(temp0.y * temp0.x);\n    // mad r0.y, r0.x, c8.y, c8.z\n    temp0.y = temp0.x * float1(-2) + float1(3);\n    // mul r0.x, r0.x, r0.x\n    temp0.x = temp0.x * temp0.x;\n    // mad r1, r0.y, -r0.x, c8.w\n    temp1 = temp0.y * -temp0.x + float4(0.99, 0.99, 0.99, 0.99);\n    // mad r0.x, r0.y, r0.x, c7.x\n    temp0.x = temp0.y * temp0.x + float1(-1);\n    // mov r0.yz, c6\n    temp0.yz = ref_vignette_settings_b.yz;\n    // mad r0.x, r0.y, r0.x, c7.y\n    temp0.x = temp0.y * temp0.x + float1(1);\n    // texkill r1\n    clip(temp1);\n    // texld_pp r1, v0, s0\n    temp1 = /* not implemented _pp modifier */ tex2D(ref_src_texture, i.texcoord.xy);\n    // mul r0.yz, r0.z, c4.xxyw\n    temp0.yz = temp0.zz * ref_inv_source_resolution.xy;\n    // mad r2.xy, c1, r0.yzzw, v0\n    temp2.xy = ref_samples[1].xy * temp0.yz + i.texcoord.xy;\n    // texld r2, r2, s0\n    temp2 = tex2D(ref_src_texture, temp2.xy);\n    // mul r2, r2.xyzz, c1.z\n    temp2 = temp2.xyzz * ref_samples[1].z;\n    // mad_pp r2, r1.xyzz, c0.z, r2\n    temp2 = /* not implemented _pp modifier */ temp1.xyzz * ref_samples[0].z + temp2;\n    // mad r3.xy, c1, -r0.yzzw, v0\n    temp3.xy = ref_samples[1].xy * -temp0.yz + i.texcoord.xy;\n    // texld r3, r3, s0\n    temp3 = tex2D(ref_src_texture, temp3.xy);\n    // mad_pp r2, r3.xyzz, c1.z, r2\n    temp2 = /* not implemented _pp modifier */ temp3.xyzz * ref_samples[1].z + temp2;\n    // mad r3.xy, c2, r0.yzzw, v0\n    temp3.xy = ref_samples[2].xy * temp0.yz + i.texcoord.xy;\n    // texld r3, r3, s0\n    temp3 = tex2D(ref_src_texture, temp3.xy);\n    // mad_pp r2, r3.xyzz, c2.z, r2\n    temp2 = /* not implemented _pp modifier */ temp3.xyzz * ref_samples[2].z + temp2;\n    // mad r3.xy, c2, -r0.yzzw, v0\n    temp3.xy = ref_samples[2].xy * -temp0.yz + i.texcoord.xy;\n    // texld r3, r3, s0\n    temp3 = tex2D(ref_src_texture, temp3.xy);\n    // mad_pp r2, r3.xyzz, c2.z, r2\n    temp2 = /* not implemented _pp modifier */ temp3.xyzz * ref_samples[2].z + temp2;\n    // mad r3.xy, c3, r0.yzzw, v0\n    temp3.xy = ref_samples[3].xy * temp0.yz + i.texcoord.xy;\n    // mad r0.yz, c3.xxyw, -r0, v0.xxyw\n    temp0.yz = ref_samples[3].xy * -temp0.yz + i.texcoord.xy;\n    // texld r4, r0.yzzw, s0\n    temp4 = tex2D(ref_src_texture, temp0.yz);\n    // texld r3, r3, s0\n    temp3 = tex2D(ref_src_texture, temp3.xy);\n    // mad_pp r2, r3.xyzz, c3.z, r2\n    temp2 = /* not implemented _pp modifier */ temp3.xyzz * ref_samples[3].z + temp2;\n    // mad_pp r2, r4.xyzz, c3.z, r2\n    temp2 = /* not implemented _pp modifier */ temp4.xyzz * ref_samples[3].z + temp2;\n    // add r1, r1.xyzz, -r2.xyww\n    temp1 = temp1.xyzz + -temp2.xyww;\n    // mad_pp oC0, r0.x, r1, r2\n    out_color = /* not implemented _pp modifier */ temp0.x * temp1 + temp2;\n    // \n\n    return out_color;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."))}c.isMDXComponent=!0}}]);