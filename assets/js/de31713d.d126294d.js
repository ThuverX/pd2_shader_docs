"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[6165],{603905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>x});var r=n(667294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),d=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},_=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=m(e,["components","mdxType","originalType","parentName"]),c=d(n),_=a,x=c["".concat(i,".").concat(_)]||c[_]||s[_]||o;return n?r.createElement(x,p(p({ref:t},l),{},{components:n})):r.createElement(x,p({ref:t},l))}));function x(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,p=new Array(o);p[0]=_;var m={};for(var i in t)hasOwnProperty.call(t,i)&&(m[i]=t[i]);m.originalType=e,m[c]="string"==typeof e?e:a,p[1]=m;for(var d=2;d<o;d++)p[d]=n[d];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}_.displayName="MDXCreateElement"},891214:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>p,default:()=>s,frontMatter:()=>o,metadata:()=>m,toc:()=>d});var r=n(487462),a=(n(667294),n(603905));const o={id:0xff318efa3e2b1800,title:"Tintobject Default Depth Bias Blend View Distance Fade"},p="Tintobject Default Depth Bias Blend View Distance Fade",m={unversionedId:"Generated/Shaders/Base/[4700-4800]/18388635958966426000",id:"Generated/Shaders/Base/[4700-4800]/18388635958966426000",title:"Tintobject Default Depth Bias Blend View Distance Fade",description:"(tintobjectDEPTHBIASBLEND:VIEWDISTANCEFADE, 0xff318efa3e2b1416)",source:"@site/docs/Generated/Shaders/Base/[4700-4800]/0xff318efa3e2b1416.mdx",sourceDirName:"Generated/Shaders/Base/[4700-4800]",slug:"/Generated/Shaders/Base/[4700-4800]/18388635958966426000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[4700-4800]/18388635958966426000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/Generated/Shaders/Base/[4700-4800]/0xff318efa3e2b1416.mdx",tags:[],version:"current",frontMatter:{id:"18388635958966426000",title:"Tintobject Default Depth Bias Blend View Distance Fade"},sidebar:"docsSidebar",previous:{title:"Generic Shadow Caster Alpha Masked Ati Diffuse Texture Double Sided External Alpha Ref Normalmap Opacity Texture Rl Backdrop",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[4700-4800]/18378066316580053000"},next:{title:"Generic Shadow Caster Diffuse Texture Gloss Control Value Normalmap Nvidia",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[4700-4800]/18388717388244894000"}},i={},d=[{value:"Technique <code>effect_glow</code>",id:"technique-effect_glow",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Sampler 0",id:"sampler-0",level:4},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],l={toc:d},c="wrapper";function s(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tintobject-default-depth-bias-blend-view-distance-fade"},"Tintobject Default Depth Bias Blend View Distance Fade"),(0,a.kt)("p",null,"(",(0,a.kt)("inlineCode",{parentName:"p"},"tintobject:default:DEPTH_BIAS_BLEND:VIEW_DISTANCE_FADE"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0xff318efa3e2b1416"),")"),(0,a.kt)("p",null,"This template is referenced 1 time by ",(0,a.kt)("a",{parentName:"p",href:"/docs/Generated/Render%20Templates/base.render_template_database#tintobject-depth-bias-blend-view-distance-fade"},"tintobject:DEPTH_BIAS_BLEND:VIEW_DISTANCE_FADE"),".\nThis template uses the following inputs:\n|Name|UI Name|Type|\n|---|---|---|\n|tint_color|Tint Color|vector3|\n|intensity|Intensity|scalar|\n|distance_fade|Distance fade|scalar|\n|depth_bias|Depth bias|scalar|."),(0,a.kt)("h3",{id:"technique-effect_glow"},"Technique ",(0,a.kt)("inlineCode",{parentName:"h3"},"effect_glow")),(0,a.kt)("h3",{id:"render-states"},"Render States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype"},"Direct3D Docs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 0,\n    D3DRS_ALPHABLENDENABLE = 1,\n    D3DRS_CULLMODE = 2,\n    D3DRS_COLORWRITEENABLE = 7,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 0,\n    D3DRS_SLOPESCALEDEPTHBIAS = 0,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n    D3DRS_BLENDOP = 1,\n    D3DRS_DESTBLEND = 2,\n    D3DRS_SRCBLEND = 5,\n};\n")),(0,a.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,a.kt)("p",null,"More info can be found on the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/direct3d9/d3dsamplerstatetype"},"Direct3D Docs")),(0,a.kt)("h4",{id:"sampler-0"},"Sampler 0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DSAMPLERSTATETYPE {\n    D3DSAMP_MIPMAPLODBIAS = 827606343,\n    D3DSAMP_SRGBTEXTURE = 0,\n    D3DSAMP_ADDRESSU = 3,\n    D3DSAMP_ADDRESSV = 3,\n    D3DSAMP_MAGFILTER = 1,\n    D3DSAMP_MINFILTER = 1,\n    D3DSAMP_MIPFILTER = 1,\n};\n")),(0,a.kt)("h3",{id:"shaders"},"Shaders"),(0,a.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 camera_world_matrix : register(vs_3_0, c4);\nfloat ref_distance_fade : register(vs_3_0, c13);\nfloat3 render_target_texel_offset : register(vs_3_0, c10);\ncolumn_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nfloat3 vp_offset : register(vs_3_0, c11);\nfloat3 vp_size : register(vs_3_0, c12);\ncolumn_major float4x4 world_matrix : register(vs_3_0, c7);\nstruct VertexMain_Input\n{\n    float4 position : POSITION;\n    float4 normal : NORMAL;\n};\n\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float4 texcoord2 : TEXCOORD2;\n    float4 texcoord3 : TEXCOORD3;\n    float3 texcoord4 : TEXCOORD4;\n};\n\nVertexMain_Output VertexMain(VertexMain_Input i)\n{\n    VertexMain_Output o;\n    float4 temp0, temp1;\n    float2 temp2;\n    // def c14, 2, -1, 0.01, 0.5\n    // dcl_position v0\n    // dcl_normal v1\n    // dcl_position o0\n    // dcl_texcoord2 o1\n    // dcl_texcoord3 o2\n    // dcl_texcoord4 o3.xyz\n    // mad r0.xyz, v1, c14.x, c14.y\n    temp0.xyz = i.normal.xyz * float3(2, 2, 2) + float3(-1, -1, -1);\n    // dp3 o3.x, r0, c7\n    o.texcoord4.x = dot(temp0.xyz, (world_matrix._m00_m10_m20_m30).xyz);\n    // dp3 o3.y, r0, c8\n    o.texcoord4.y = dot(temp0.xyz, (world_matrix._m01_m11_m21_m31).xyz);\n    // dp3 o3.z, r0, c9\n    o.texcoord4.z = dot(temp0.xyz, (world_matrix._m02_m12_m22_m32).xyz);\n    // dp4 r0.x, v0, c7\n    temp0.x = dot(i.position, (world_matrix._m00_m10_m20_m30));\n    // add r0.x, -r0.x, c4.w\n    temp0.x = -temp0.x + (camera_world_matrix._m00_m10_m20_m30).w;\n    // dp4 r0.w, v0, c8\n    temp0.w = dot(i.position, (world_matrix._m01_m11_m21_m31));\n    // add r0.y, -r0.w, c5.w\n    temp0.y = -temp0.w + (camera_world_matrix._m01_m11_m21_m31).w;\n    // dp4 r0.w, v0, c9\n    temp0.w = dot(i.position, (world_matrix._m02_m12_m22_m32));\n    // add r0.z, -r0.w, c6.w\n    temp0.z = -temp0.w + (camera_world_matrix._m02_m12_m22_m32).w;\n    // dp3 r0.w, r0, r0\n    temp0.w = dot(temp0.xyz, temp0.xyz);\n    // rsq r0.w, r0.w\n    temp0.w = 1 / sqrt(temp0.w);\n    // mul o2.xyz, r0.w, r0\n    o.texcoord3.xyz = temp0.www * temp0.xyz;\n    // rcp r0.x, r0.w\n    temp0.x = 1.0f / temp0.w;\n    // add r0.x, r0.x, -c13.x\n    temp0.x = temp0.x + -ref_distance_fade.x;\n    // mul_sat o2.w, r0.x, c14.z\n    o.texcoord3.w = saturate(temp0.x * float1(0.01));\n    // dp4 r0.x, v0, c0\n    temp0.x = dot(i.position, (view_proj_matrix._m00_m10_m20_m30));\n    // mov r1.xw, c14\n    temp1.xw = float2(2, 0.5);\n    // mov r2.xy, c12\n    temp2.xy = vp_size.xy;\n    // mad r1.xy, c11, r1.x, r2\n    temp1.xy = vp_offset.xy * temp1.xx + temp2.xy;\n    // add r1.xy, r1, c14.y\n    temp1.xy = temp1.xy + float2(-1, -1);\n    // dp4 r0.w, v0, c3\n    temp0.w = dot(i.position, (view_proj_matrix._m03_m13_m23_m33));\n    // mul r1.xy, r1, r0.w\n    temp1.xy = temp1.xy * temp0.ww;\n    // mad r1.x, r0.x, c12.x, r1.x\n    temp1.x = temp0.x * vp_size.x + temp1.x;\n    // add r1.zw, r1.w, c10.xyxy\n    temp1.zw = temp1.ww + render_target_texel_offset.xy;\n    // add r2.x, r0.w, r0.w\n    temp2.x = temp0.w + temp0.w;\n    // mad o1.x, r2.x, r1.z, r1.x\n    o.texcoord2.x = temp2.x * temp1.z + temp1.x;\n    // dp4 r0.y, v0, c1\n    temp0.y = dot(i.position, (view_proj_matrix._m01_m11_m21_m31));\n    // mad r1.x, r0.y, -c12.y, r1.y\n    temp1.x = temp0.y * -vp_size.y + temp1.y;\n    // mad o1.y, r2.x, r1.w, r1.x\n    o.texcoord2.y = temp2.x * temp1.w + temp1.x;\n    // dp4 r0.z, v0, c2\n    temp0.z = dot(i.position, (view_proj_matrix._m02_m12_m22_m32));\n    // mov o0, r0\n    o.position = temp0;\n    // mul o1.zw, r0, c14_abs.xyyx\n    o.texcoord2.zw = temp0.zw * float2(1, 2);\n    // \n\n    return o;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."),(0,a.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hlsl"},"sampler2D depth : register(ps_3_0, s0);\nfloat ref_depth_bias : register(ps_3_0, c2);\nfloat ref_intensity : register(ps_3_0, c1);\nfloat3 ref_tint_color : register(ps_3_0, c0);\nstruct PixelMain_Input\n{\n    float4 texcoord2 : TEXCOORD2;\n    float4 texcoord3 : TEXCOORD3;\n    float3 texcoord4 : TEXCOORD4;\n};\n\nfloat4 PixelMain(PixelMain_Input i) : COLOR\n{\n    float4 out_color;\n    float4 temp0;\n    // def c3, -2, 3, 0, 0\n    // dcl_texcoord2 v0\n    // dcl_texcoord3 v1\n    // dcl_texcoord4 v2.xyz\n    // dcl_2d s0\n    // nrm r0.xyz, v2\n    temp0.xyz = normalize(i.texcoord4.xyz).xyz;\n    // dp3 r0.x, v1, r0\n    temp0.x = dot(i.texcoord3.xyz, temp0.xyz);\n    // mul r0.y, r0_abs.x, r0_abs.x\n    temp0.y = abs(temp0).x * abs(temp0).x;\n    // mul r0.x, r0.y, r0_abs.x\n    temp0.x = temp0.y * abs(temp0).x;\n    // mul r0.y, v1.w, v1.w\n    temp0.y = i.texcoord3.w * i.texcoord3.w;\n    // mul r0.x, r0.y, r0.x\n    temp0.x = temp0.y * temp0.x;\n    // mul r0.xyz, r0.x, c0\n    temp0.xyz = temp0.xxx * ref_tint_color.xyz;\n    // mul_pp oC0.xyz, r0, c1.x\n    out_color.xyz = /* not implemented _pp modifier */ temp0.xyz * ref_intensity.xxx;\n    // texld r0, v0, s0\n    temp0 = tex2D(depth, i.texcoord2.xy);\n    // add r0.x, -r0.x, v0.z\n    temp0.x = -temp0.x + i.texcoord2.z;\n    // rcp r0.y, -c2.x\n    temp0.y = 1.0f / -ref_depth_bias.x;\n    // mul_sat r0.x, r0.y, r0.x\n    temp0.x = saturate(temp0.y * temp0.x);\n    // mad r0.y, r0.x, c3.x, c3.y\n    temp0.y = temp0.x * float1(-2) + float1(3);\n    // mul r0.x, r0.x, r0.x\n    temp0.x = temp0.x * temp0.x;\n    // mul_pp oC0.w, r0.x, r0.y\n    out_color.w = /* not implemented _pp modifier */ temp0.x * temp0.y;\n    // \n\n    return out_color;\n}\n")),(0,a.kt)("p",null,"Decompiled by DXDecompiler."))}s.isMDXComponent=!0}}]);