"use strict";(self.webpackChunkpd_2_shader_docs=self.webpackChunkpd_2_shader_docs||[]).push([[23811],{3905:(e,t,a)=>{a.d(t,{Zo:()=>M,kt:()=>_});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),i=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},M=function(e){var t=i(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,M=d(e,["components","mdxType","originalType","parentName"]),m=i(a),p=n,_=m["".concat(s,".").concat(p)]||m[p]||c[p]||o;return a?r.createElement(_,l(l({ref:t},M),{},{components:a})):r.createElement(_,l({ref:t},M))}));function _(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=p;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d[m]="string"==typeof e?e:n,l[1]=d;for(var i=2;i<o;i++)l[i]=a[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}p.displayName="MDXCreateElement"},96171:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>d,toc:()=>i});var r=a(87462),n=(a(67294),a(3905));const o={id:0x834c20f1e4721000,title:"Landscape Shadow Caster Blend Masks Mat0 Mat0 Blend World Mask Mat0 Nm Mat0 W Uv A Mat1 Mat1 Blend World Mask Mat1 Nm Mat1 Uv2 Mat2 Mat2 Blend World Mask Mat2 Nm Mat2 W Uv A Mat3 Mat3 Blend World Mask Mat3 Nm Mat3 W Uv A Nvidia Overlay Over Detail World Mask A Wetness World Nm World Overlay Mask Texture World Overlay Texture"},l="Landscape Shadow Caster Blend Masks Mat0 Mat0 Blend World Mask Mat0 Nm Mat0 W Uv A Mat1 Mat1 Blend World Mask Mat1 Nm Mat1 Uv2 Mat2 Mat2 Blend World Mask Mat2 Nm Mat2 W Uv A Mat3 Mat3 Blend World Mask Mat3 Nm Mat3 W Uv A Nvidia Overlay Over Detail World Mask A Wetness World Nm World Overlay Mask Texture World Overlay Texture",d={unversionedId:"Generated/Shaders/Base/[2400-2500]/9460973140490457000",id:"Generated/Shaders/Base/[2400-2500]/9460973140490457000",title:"Landscape Shadow Caster Blend Masks Mat0 Mat0 Blend World Mask Mat0 Nm Mat0 W Uv A Mat1 Mat1 Blend World Mask Mat1 Nm Mat1 Uv2 Mat2 Mat2 Blend World Mask Mat2 Nm Mat2 W Uv A Mat3 Mat3 Blend World Mask Mat3 Nm Mat3 W Uv A Nvidia Overlay Over Detail World Mask A Wetness World Nm World Overlay Mask Texture World Overlay Texture",description:"(landscapeBLENDMASKSMAT0BLENDWORLDMASKMAT0WUVAMAT1BLENDWORLDMASKMAT1UV2MAT2BLENDWORLDMASKMAT2WUVAMAT3BLENDWORLDMASKMAT3WUVAOVERLAYOVERDETAILWORLDNMWORLDOVERLAY_TEXTURE, 0x834c20f1e4720ce4)",source:"@site/docs/Generated/Shaders/Base/[2400-2500]/0x834c20f1e4720ce4.mdx",sourceDirName:"Generated/Shaders/Base/[2400-2500]",slug:"/Generated/Shaders/Base/[2400-2500]/9460973140490457000",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[2400-2500]/9460973140490457000",draft:!1,editUrl:"https://github.com/thuverx/pd2_shader_docs/tree/main/docs/docs/Generated/Shaders/Base/[2400-2500]/0x834c20f1e4720ce4.mdx",tags:[],version:"current",frontMatter:{id:"9460973140490457000",title:"Landscape Shadow Caster Blend Masks Mat0 Mat0 Blend World Mask Mat0 Nm Mat0 W Uv A Mat1 Mat1 Blend World Mask Mat1 Nm Mat1 Uv2 Mat2 Mat2 Blend World Mask Mat2 Nm Mat2 W Uv A Mat3 Mat3 Blend World Mask Mat3 Nm Mat3 W Uv A Nvidia Overlay Over Detail World Mask A Wetness World Nm World Overlay Mask Texture World Overlay Texture"},sidebar:"docsSidebar",previous:{title:"Generic Shadow Caster Alpha Masked Ati Diffuse Texture External Alpha Ref Normalmap Rl Core Environment",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[2400-2500]/9460285285021714000"},next:{title:"Effect Default Blend Add Diffuse0 Texture Diffuse0 Tint Double Sided",permalink:"/pd2_shader_docs/docs/Generated/Shaders/Base/[2400-2500]/9462810058511854000"}},s={},i=[{value:"Technique <code>ambient</code>",id:"technique-ambient",level:3},{value:"Render States",id:"render-states",level:3},{value:"Sampler States",id:"sampler-states",level:3},{value:"Shaders",id:"shaders",level:3},{value:"Vertex Shader",id:"vertex-shader",level:4},{value:"Pixel Shader",id:"pixel-shader",level:4}],M={toc:i},m="wrapper";function c(e){let{components:t,...a}=e;return(0,n.kt)(m,(0,r.Z)({},M,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"landscape-shadow-caster-blend-masks-mat0-mat0-blend-world-mask-mat0-nm-mat0-w-uv-a-mat1-mat1-blend-world-mask-mat1-nm-mat1-uv2-mat2-mat2-blend-world-mask-mat2-nm-mat2-w-uv-a-mat3-mat3-blend-world-mask-mat3-nm-mat3-w-uv-a-nvidia-overlay-over-detail-world-mask-a-wetness-world-nm-world-overlay-mask-texture-world-overlay-texture"},"Landscape Shadow Caster Blend Masks Mat0 Mat0 Blend World Mask Mat0 Nm Mat0 W Uv A Mat1 Mat1 Blend World Mask Mat1 Nm Mat1 Uv2 Mat2 Mat2 Blend World Mask Mat2 Nm Mat2 W Uv A Mat3 Mat3 Blend World Mask Mat3 Nm Mat3 W Uv A Nvidia Overlay Over Detail World Mask A Wetness World Nm World Overlay Mask Texture World Overlay Texture"),(0,n.kt)("p",null,"(",(0,n.kt)("inlineCode",{parentName:"p"},"landscape:shadow_caster:BLEND_MASKS:MAT0:MAT0_BLEND_WORLD_MASK:MAT0_NM:MAT0_W_UV_A:MAT1:MAT1_BLEND_WORLD_MASK:MAT1_NM:MAT1_UV2:MAT2:MAT2_BLEND_WORLD_MASK:MAT2_NM:MAT2_W_UV_A:MAT3:MAT3_BLEND_WORLD_MASK:MAT3_NM:MAT3_W_UV_A:NVIDIA:OVERLAY_OVER_DETAIL:WORLD_MASK_A_WETNESS:WORLD_NM:WORLD_OVERLAY_MASK_TEXTURE:WORLD_OVERLAY_TEXTURE"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"0x834c20f1e4720ce4"),")"),(0,n.kt)("h3",{id:"technique-ambient"},"Technique ",(0,n.kt)("inlineCode",{parentName:"h3"},"ambient")),(0,n.kt)("h3",{id:"render-states"},"Render States"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"enum D3DRENDERSTATETYPE {\n    D3DRS_ZENABLE = 1,\n    D3DRS_ZFUNC = 4,\n    D3DRS_ZWRITEENABLE = 1,\n    D3DRS_ALPHABLENDENABLE = 0,\n    D3DRS_CULLMODE = 2,\n    D3DRS_COLORWRITEENABLE = 0,\n    D3DRS_COLORWRITEENABLE1 = 15,\n    D3DRS_COLORWRITEENABLE2 = 15,\n    D3DRS_STENCILENABLE = 0,\n    D3DRS_STENCILFUNC = 1,\n    D3DRS_STENCILFAIL = 1,\n    D3DRS_STENCILMASK = 0,\n    D3DRS_STENCILPASS = 1,\n    D3DRS_STENCILREF = 0,\n    D3DRS_STENCILWRITEMASK = 0,\n    D3DRS_STENCILZFAIL = 1,\n    D3DRS_DEPTHBIAS = 961656599,\n    D3DRS_SLOPESCALEDEPTHBIAS = 1075838976,\n    D3DRS_FOGENABLE = 0,\n    D3DRS_SPECULARENABLE = 0,\n    D3DRS_ADAPTIVETESS_X = 0,\n    D3DRS_ADAPTIVETESS_Z = 0,\n    D3DRS_ADAPTIVETESS_W = 0,\n    D3DRS_SRGBWRITEENABLE = 0,\n    D3DRS_SEPARATEALPHABLENDENABLE = 0,\n    D3DRS_ALPHATESTENABLE = 0,\n};\n")),(0,n.kt)("h3",{id:"sampler-states"},"Sampler States"),(0,n.kt)("h3",{id:"shaders"},"Shaders"),(0,n.kt)("h4",{id:"vertex-shader"},"Vertex Shader"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-hlsl"},"column_major float4x4 view_proj_matrix : register(vs_3_0, c0);\nstruct VertexMain_Output\n{\n    float4 position : POSITION;\n    float texcoord1 : TEXCOORD1;\n};\n\nVertexMain_Output VertexMain(float4 position : POSITION)\n{\n    VertexMain_Output o;\n    float temp0;\n    // dcl_position v0\n    // dcl_position o0\n    // dcl_texcoord1 o1.x\n    // dp4 o0.x, v0, c0\n    o.position.x = dot(position, (view_proj_matrix._m00_m10_m20_m30));\n    // dp4 o0.y, v0, c1\n    o.position.y = dot(position, (view_proj_matrix._m01_m11_m21_m31));\n    // dp4 o0.w, v0, c3\n    o.position.w = dot(position, (view_proj_matrix._m03_m13_m23_m33));\n    // dp4 r0.x, v0, c2\n    temp0.x = dot(position, (view_proj_matrix._m02_m12_m22_m32));\n    // mov o0.z, r0.x\n    o.position.z = temp0.x;\n    // mov o1.x, r0.x\n    o.texcoord1 = temp0.x;\n    // \n\n    return o;\n}\n")),(0,n.kt)("p",null,"Decompiled by DXDecompiler."),(0,n.kt)("h4",{id:"pixel-shader"},"Pixel Shader"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-hlsl"},"float4 PixelMain(float texcoord1 : TEXCOORD1) : COLOR\n{\n    float4 out_color;\n    // def c0, 1, 0, 0, 0\n    // dcl_texcoord1 v0.x\n    // mul oC0, c0.xyyy, v0.x\n    out_color = float4(1, 0, 0, 0) * texcoord1.x;\n    // \n\n    return out_color;\n}\n")),(0,n.kt)("p",null,"Decompiled by DXDecompiler."))}c.isMDXComponent=!0}}]);